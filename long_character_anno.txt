./segmented_character_voice/lecs/lecs_1_0.wav|lecs|[KO] 안녕하십니까 컴퓨터 시스템 이론과 실습에 대한 소개 강좌를 맡은 광주과학기술원 전기전자컴퓨터공학부 김종원 교수입니다.[KO]
./segmented_character_voice/lecs/lecs_1_1.wav|lecs|[KO] 이번 강좌를 통해서 여러분들하고 저희가 컴퓨터 시스템이 어떤 것인지를 한번 저희가 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_2.wav|lecs|[KO] 그럼 첫 번째 챕터 시작을 해보겠습니다. 첫 번째 챕터에서는 저희가 컴퓨터가 무엇인가, What is a computer system? 이런 질문을 단지는 강좌가 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_3.wav|lecs|[KO] 컴퓨터가 무엇인가를 살펴보기 위해서 저희가 컴퓨터에 대해서 어디서부터 시작을 해야 되느냐, 이렇게 보면 히스토리칼하게 저희가 사는[KO]
./segmented_character_voice/lecs/lecs_1_4.wav|lecs|[KO] 새로운 모던 컴퓨터라고 하는 저희가 보고 있는 컴퓨터들이 나오기 전에는 간단한 원리를 가지고 계산하는, 주판 이런 것들을 컴퓨터라고 불렀던 시절이 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_1_5.wav|lecs|[KO] 그리고 저희가 2차 세전대전 1940년에 다들 들어보셨던 N이야기라고 하는 컴퓨터가 나와서 현재 새로운 컴퓨터의 시작을 알렸던 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_1_6.wav|lecs|[KO] 이후에 반도체 트랜지스터를 통해서 진정한 의미에서 요즘에 사용하는 컴퓨터들의 시대가 진행되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_7.wav|lecs|[KO] 그래서 이런 컴퓨터의 히스토리에 대해서 자료를 살펴보시면서 차분하게 히스토리를 한번 음미해보시는 개념을 가졌으면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_8.wav|lecs|[KO] 그럼 이제 실체적으로 컴퓨터 시스템이라고 저희가 하려고 있는 것을 정의를 한번 내려본다면 용어적으로 이렇게 정리합니다.[KO]
./segmented_character_voice/lecs/lecs_1_9.wav|lecs|[KO] 전자적인 디바이스다. 그런데 뭐냐, 데이터를 저장하고 처리할 수 있는,[KO]
./segmented_character_voice/lecs/lecs_1_10.wav|lecs|[KO] 그리고 이것을 이진이라고 하는 010이라고 하는 단위를 가지고 저장하고 처리할 수 있는 점자적인 디바이스를 컴퓨터라고 정의하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_11.wav|lecs|[KO] 그럼 이 전자적인 디바이스가 뭘 해줄 수 있냐면 저희가 얘기하는 프로그램을 통해서 프로그램에 주어진 인스트랙션을 수행해서[KO]
./segmented_character_voice/lecs/lecs_1_12.wav|lecs|[KO] 저희가 원하는 컴퓨터의 역할, 저희가 오리지널 얘기했던 컴퓨팅이라고 하는 역할을 해주는 디바이스라고 생각할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_13.wav|lecs|[KO] 이게 이제 컴퓨터 부분이고요. 그럼 컴퓨터 시스템이라고 됐을 때는 시스템이라는 단어가 더 붙게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_14.wav|lecs|[KO] 그럼 시스템이라는 단어가 왜 더 붙었고 붙었을 때 어떤 의미를 갖는지 한번 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_15.wav|lecs|[KO] 시스템이라는 단어는 기본적으로 어떤 요소들이 결합이 돼가지고 어떤 한 덩어리가 돼가지고 움직이는 어떤 그 덩어리 전체를 얘기하는 거고요.[KO]
./segmented_character_voice/lecs/lecs_1_16.wav|lecs|[KO] 컴퓨터라는 부분의 역할하는 기능하고 이 시스템이라는 단어가 결합이 돼서 만들어진 게 컴퓨터 시스템이 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_1_17.wav|lecs|[KO] 그럼 컴퓨터 시스템은 아까 말씀드렸던 데이터를 저장하고 처리하고 하는 이런 부분들이 한 덩어리의 여러 가지 요소들이 합쳐가지고[KO]
./segmented_character_voice/lecs/lecs_1_18.wav|lecs|[KO] 한 덩어리로 시스템이 돼서 이 시스템으로 해서 자기가 원하는 일을 해줄 수 있게 되는 디바이스라고 생각할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_19.wav|lecs|[KO] 디바이스들의 셋이라고 생각할 수 있겠습니다. 그럼 이제 그때 어떤 모습을 저희가 연상을 많이 하게 되면 일반적으로 퍼스널 컴퓨터,[KO]
./segmented_character_voice/lecs/lecs_1_20.wav|lecs|[KO] 저희가 컴퓨터 사용하는 PC의 모습들을 많은 분들이 연상을 해 줄 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_1_21.wav|lecs|[KO] 일단 그 모습을 연상을 하시는데 중요한 컴퓨터 시스템을 이해하기 위해서는 이 외관이 아니라 그 안쪽에 있는 내부의 모습들을 이해하는 게 굉장히 중요한 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_1_22.wav|lecs|[KO] 그래서 컴퓨터 내부의 모습들을 살펴보는 것으로 저희가 진행을 해야 되고요. 컴퓨터 내부의 모습을 살펴본다면 일단 이렇게 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_1_23.wav|lecs|[KO] 저희가 CPU라고 하는 가장 핵심적인 두뇌 역할을 하는 요소가 하나 자리를 잡고 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_24.wav|lecs|[KO] CPU에다가 데이터를 공급하거나 CPU가 데이터를 찾아볼 수 있게 도와주는 메모리에 있는 데이터를 CPU가 찾아보면서 일을 한다 이렇게 되고요.[KO]
./segmented_character_voice/lecs/lecs_1_25.wav|lecs|[KO] 여기 데이터라는 부분에서 저의사 저장이라는 단어랑 메모리에 있는 데이터라는 부분하고 저장된 데이터라는 예념을 조금 나눠보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_26.wav|lecs|[KO] 말씀을 드리면 어떤 얘기냐면 저희가 하드디스크나 이런 디스크에 있는 저장되어 있는 데이터를 메모리 상으로 옮겨가지고 CPU라는 데이가 일을 할 수 있도록 준비해주는 이런 과정이 한번 연결됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_27.wav|lecs|[KO] 그럼 다시 말씀드리면 CPU라고 하는 처리하는 두뇌에 해당되는 부분이 있고 두뇌가 일할 수 있도록 데이터를 준비해서 펼쳐주는 게 메모리라고 생각하시면 되고[KO]
./segmented_character_voice/lecs/lecs_1_28.wav|lecs|[KO] 그 데이터가 원래는 어디에 저장되어 있었냐면 하드디스크 같은데 저장돼서 가지고 나왔다.[KO]
./segmented_character_voice/lecs/lecs_1_29.wav|lecs|[KO] 그럼 저장된 데이터를 끌고 하드디스크에서 있는 데이터를 메모리에 옮기기 위해서는 어떤 길이 필요하고요.[KO]
./segmented_character_voice/lecs/lecs_1_30.wav|lecs|[KO] 이 길을 저희가 버스라는 용어를 가지고 길이라는 걸 표현하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_31.wav|lecs|[KO] 길 중에서 하드디스크에서 메모리가 올라가는 길.[KO]
./segmented_character_voice/lecs/lecs_1_32.wav|lecs|[KO] 그럼 이거는 인포트 아웃포트 하는 길이기 때문에 저희가 아이오 버스라는 길을 통해서 메모리에 옮기게 되고요.[KO]
./segmented_character_voice/lecs/lecs_1_33.wav|lecs|[KO] 근데 메모리 쪽은 CPU가 두뇌가 일을 해야 되기 때문에 가장 많이 메모리를 가지고 지저봐야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_34.wav|lecs|[KO] 그렇기 때문에 걔하고는 굉장히 전용 길을 하나 가지고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_35.wav|lecs|[KO] 그걸 메모리 버스라고 부르게 되고요.[KO]
./segmented_character_voice/lecs/lecs_1_36.wav|lecs|[KO] 메모리 버스라고 부르는 걸 통해서 CPU는 일을 합니다.[KO]
./segmented_character_voice/lecs/lecs_1_37.wav|lecs|[KO] 그럼 이제 CPU가 일을 하고요.[KO]
./segmented_character_voice/lecs/lecs_1_38.wav|lecs|[KO] 그럼 CPU한테 어떤 일을 하라고 저희가 대화를 해야 되기 때문에 대화를 하기 위해서 저희가 사용하는 키보드, 마우스 이런 게 되고[KO]
./segmented_character_voice/lecs/lecs_1_39.wav|lecs|[KO] 대화를 한 결과를 사람들이 볼 수 있도록 해주는 모니터가 붙게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_1_40.wav|lecs|[KO] 그래서 키보드, 마우스, 모니터 이 세 개의 아이오들이 다시 아이오 버스를 통해서 컴퓨터에 CPU하고 연결되면서 시스템적으로 완성이 된다.[KO]
./segmented_character_voice/lecs/lecs_1_41.wav|lecs|[KO] 이렇게 볼 수 있을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_1_42.wav|lecs|[KO] 그럼 이제 두뇌 부분만 조금 더 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_43.wav|lecs|[KO] 두뇌에 대한 CPU라는 부분은 어떤 역할을 하면 실제로 CPU를 계산하는 정말 브레인에 해당되는 부분이 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_44.wav|lecs|[KO] 브레인을 도와주기 위해서 메모장들의 역할을 하는 저희가 캐시라고 하는 아니면 레지스터라고 하는 것들이 준비를 하게 되어 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_45.wav|lecs|[KO] 그리고 ALU라고 하는 어시스펙트 로직 유닛을 통해서 저희가 산술적이나 로지컬한 어떤 연산들을 처리할 수 있도록 도와주는 부분.[KO]
./segmented_character_voice/lecs/lecs_1_46.wav|lecs|[KO] 이렇게 다 합쳐져서 전체 내부를 돌아볼 때는 CPU, 메모리, 그 다음에 저희가 말씀드렸던 스토리지라고 하는 디스크 부분, 그 다음에 아이오를 담당하는 부분.[KO]
./segmented_character_voice/lecs/lecs_1_47.wav|lecs|[KO] 한 가지 남은 게 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_48.wav|lecs|[KO] 이 네트워크라고 하는 부분이 안에 있는 대화를 하고 하는 부분에서 바깥 인터넷이라고 하는 부분과 접속하기 위해서 저희가 네트워크 부분을 붙여야 되는데[KO]
./segmented_character_voice/lecs/lecs_1_49.wav|lecs|[KO] 그걸 네트워크 인터페이스 카드 아니면 네트워크 어댑터라는 카드를 통해서 외부에 있는 네트워크를 연동하는 이런 식으로 구성되는.[KO]
./segmented_character_voice/lecs/lecs_1_50.wav|lecs|[KO] 그럼 다시 정리해보면 CPU, 메모리, 그 말씀드렸던 어떤 스토리지, 디바이스, 그리고 네트워크.[KO]
./segmented_character_voice/lecs/lecs_1_51.wav|lecs|[KO] 이 3대의 요소를 가지고 합쳐져서 구성이 되는 이런 형태의 모습을 가지는 게 현재 요즘에 얘기하는 컴퓨터 시스템의 전형적인 모습들입니다.[KO]
./segmented_character_voice/lecs/lecs_1_52.wav|lecs|[KO] 그럼 이런 컴퓨터 시스템들이 지금 보면 어떤 변화를 얻고 있느냐 이런 말씀을 드려야 되는데[KO]
./segmented_character_voice/lecs/lecs_1_53.wav|lecs|[KO] 컴퓨터 시스템들이 보면 초기의 컴퓨터 시스템을 만약에 보신 분들이 있다면 굉장히 대형 시스템들이었습니다.[KO]
./segmented_character_voice/lecs/lecs_1_54.wav|lecs|[KO] 요즘은 어떻게 되죠? 저희가 아는 스마트폰처럼 굉장히 작은 시스템으로 계속 변화가 일어나고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_55.wav|lecs|[KO] 그럼 그런 변화가 어떻게 일어나고 있느냐, 어떻게 해서 가능해졌느냐 이렇게 살펴보게 되면[KO]
./segmented_character_voice/lecs/lecs_1_56.wav|lecs|[KO] 결국은 반도체 칩을 통해서 이런 금방 말씀드렸던 요소들을 점점 더 작게 아니면 칩 쪽에 금방 말씀드렸던 다양한 부분들이 칩 안으로 점점 빨려 들어간다고 할까요?[KO]
./segmented_character_voice/lecs/lecs_1_57.wav|lecs|[KO] 나머지 부분들을 액세서리 형태로 붙이는 형태로 바뀌게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_58.wav|lecs|[KO] 그래서 아까 말씀드렸던 첫 번째 시스템들은 다 개별적으로 있던 것들을 하나씩 하나씩 붙였다는 형태라면[KO]
./segmented_character_voice/lecs/lecs_1_59.wav|lecs|[KO] 저희가 점점 시스템 칩이 발전이 되면서 주변 요소들을 칩 쪽으로 통합을 하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_60.wav|lecs|[KO] 그래서 CPU 부분만 갖고 있던 칩이 CPU하고 아까 말씀드렸던 어떤 길들을 포함하는 어떤 좀 더 프로세스 칩이 되고[KO]
./segmented_character_voice/lecs/lecs_1_61.wav|lecs|[KO] 프로세스 칩들도 CPU가 여러 개 담겨 있는 프로세스 덩어리들이 다시 메모리하고 상대하고 다시 하드 디스크하고 상대하는 모습으로[KO]
./segmented_character_voice/lecs/lecs_1_62.wav|lecs|[KO] 점점 단순화가 1차적으로 진행됐고요.[KO]
./segmented_character_voice/lecs/lecs_1_63.wav|lecs|[KO] 그리고 심지어 요즘은 어떻게 해서 시스템 온 칩이라고 하는 개념에 따라서[KO]
./segmented_character_voice/lecs/lecs_1_64.wav|lecs|[KO] 지금 말씀드렸던 모든 요소들이 하나의 어떤 반도체 판 위에 올라가는 그걸 저희가 SOC, 시스템 온 칩이라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_1_65.wav|lecs|[KO] 이런 쪽에 올라가서 보면 기본적인 요소들을 아까 말씀드렸던 대부분은 다 칩 하나에 다 올라가고[KO]
./segmented_character_voice/lecs/lecs_1_66.wav|lecs|[KO] 나머지들은 거기에 인터페이스, 정말로 붙일 수 있는 하드웨어적인 것만 인터페이스하는 길들을 여는 형태로[KO]
./segmented_character_voice/lecs/lecs_1_67.wav|lecs|[KO] 이렇게 하면서 점점 더 작은 어떤 컴퓨터가 만들어질 수 있는 원리가 만들어졌다고 볼 수 있겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_68.wav|lecs|[KO] 그럼 현재적으로 보면 작아진다는 원리까지는 조금 저희가 설명을 드린 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_1_69.wav|lecs|[KO] 그럼 다시 아까 말씀드렸던 이 네 가지 요소였던 컴퓨터라는 게 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_70.wav|lecs|[KO] 컴퓨터를 하기 위해서는 CPU하고 메모리가 합작을 해서 두뇌하고 그걸 갖다가 일할 수 있는 데이터가 펼쳐져 있는 부분이 메모리라고 생각하면[KO]
./segmented_character_voice/lecs/lecs_1_71.wav|lecs|[KO] 합작을 해서 계산을 해준다. 많이 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_1_72.wav|lecs|[KO] 그럼 저장을 한다고 하는 부분이라고 하는 데이터가 지금 어디서 끌고 와서 저장이 돼야 되는 부분이 있는데[KO]
./segmented_character_voice/lecs/lecs_1_73.wav|lecs|[KO] 이 저장이 되는 부분 그리고 네트워크라는 4대 요소가 어떻게 구성이 되고 어떻게 발전되고 있는지 내부적으로 좀 더 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_74.wav|lecs|[KO] 먼저 CPU의 모습이나 아니면 CPU에 대해서 좀 이해를 하시려면[KO]
./segmented_character_voice/lecs/lecs_1_75.wav|lecs|[KO] CPU라는 쪽에서 요즘 여러 가지 용어를 쓰는데 많이 들으시겠지만 멀티코어, 매니코어라고 해서[KO]
./segmented_character_voice/lecs/lecs_1_76.wav|lecs|[KO] 이 두뇌가 하나를 쓰는 게 아니라 두뇌를 여러 개를 쓰는 형태로 지금 진화하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_77.wav|lecs|[KO] 그렇기 때문에 CPU라는 것들이 가서 보면 여러 개의 코어라고 하는 것들로 나눠지고 있는데[KO]
./segmented_character_voice/lecs/lecs_1_78.wav|lecs|[KO] 이 코어라는 게 나눠질 때 실제로 이 코어라는 것들을 여러 개의 코어에 있는 CPU를 갖다가[KO]
./segmented_character_voice/lecs/lecs_1_79.wav|lecs|[KO] 또 그 다음에 그것들을 세수로 쓰기 위해서 소켓이라는 것을 실제로 피지컬에 꽂는 상태로 CPU들을 나눠가지고[KO]
./segmented_character_voice/lecs/lecs_1_80.wav|lecs|[KO] 하나, 두 개, 하나 꽂는 거다, 두 개 꽂는 거다 이렇게 해서 나눠지고요.[KO]
./segmented_character_voice/lecs/lecs_1_81.wav|lecs|[KO] 그 다음에 한 쪽에서는 한 쪽의 단위에서 한 개의 코어, 결국은 CPU라는 두뇌의 한 덩어리가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_1_82.wav|lecs|[KO] 한 덩어리가 일을 하고요. 그런데 이 일을 하는 것들이 스레드라고 하는 어떤 프로그램이 실행되는 단위하고 다시 만나서[KO]
./segmented_character_voice/lecs/lecs_1_83.wav|lecs|[KO] 저희가 지금 생각하던 어떤 코어하고 스레드가 연결이 되면서 CPU가 일을 한다.[KO]
./segmented_character_voice/lecs/lecs_1_84.wav|lecs|[KO] 이 정도까지는 이해해 볼 필요가 있을 것 같습니다. 그래서 컴퓨터 부분에서 CPU 부분은 그렇게 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_1_85.wav|lecs|[KO] 두 번째로 메모리하고 스토리지를 말씀을 드렸는데 메모리하고 스토리지가 어떤 부분에 관계를 갔냐면[KO]
./segmented_character_voice/lecs/lecs_1_86.wav|lecs|[KO] 저희가 메모리에도 데이터가 올려져 있어서 저희가 데이터를 볼 수가 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_87.wav|lecs|[KO] 스토리에도 데이터는 저장입니다. 메모리의 데이터는 저장이라는 것보다는 사용이라는 개념을 펼쳐놨다가[KO]
./segmented_character_voice/lecs/lecs_1_88.wav|lecs|[KO] 저희가 파워가 없어지면 사라진다. 이렇게 보시면 되고요.[KO]
./segmented_character_voice/lecs/lecs_1_89.wav|lecs|[KO] 그 다음에 스토리지에 있는 데이터는 계속 저장이 돼서 저희가 원할 때 항상 다시 꺼내서 볼 수 있는 거다.[KO]
./segmented_character_voice/lecs/lecs_1_90.wav|lecs|[KO] 이렇게 됐을 때 그러면 메모리하고 스토리지가 완벽하게 떨어지는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_1_91.wav|lecs|[KO] 사실은 조금 연결되는 어떤 하이라키를 갖는다. 저렇게 저희가 설명하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_92.wav|lecs|[KO] 메모리하고 스토리지는 하이라키 어떤 계층성을 가지고 한 덩어리에서 이해하실 필요가 있다.[KO]
./segmented_character_voice/lecs/lecs_1_93.wav|lecs|[KO] 이렇게 말씀드리겠습니다. 그럼 조금 더 들어가 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_94.wav|lecs|[KO] 일단 저희가 어떤 데이터를 가지고 데이터를 가지고 저희가 일을 하기 위해서 데이터를 살펴봐야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_95.wav|lecs|[KO] 살펴보고 싶을 때 내가 원하는 데이터 덩어리를 하나만 가지고 오고 아니면 데이터가 파일에 있으니까[KO]
./segmented_character_voice/lecs/lecs_1_96.wav|lecs|[KO] 저희가 서류를 찾아보면 어떤 파일 하나 찾으면 그 안에 노트 안에 어떤 내용이 다 있다 이렇게 하는 부분[KO]
./segmented_character_voice/lecs/lecs_1_97.wav|lecs|[KO] 이렇게 파일 형태로 파일 이름을 찾아내면 노트를 찾아내면 그거에 다 끌어볼 수 있는 파일 형태의 스토리가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_98.wav|lecs|[KO] 그런데 그거랑 조금 다르게 내가 어떤 일을 하기 위해서 넓은 운동장처럼 서류를 펼쳐놓고 일을 하고 싶습니다.[KO]
./segmented_character_voice/lecs/lecs_1_99.wav|lecs|[KO] 그러면 많은 데이터를 펼쳐놔야 되고 그건 내가 임의로 원하는 형태로 프로그램이 원하는 형태의 데이터를 펼쳐놓고 싶다.[KO]
./segmented_character_voice/lecs/lecs_1_100.wav|lecs|[KO] 그럼 저희가 블록 스토리지와는 결함에서 어떤 데이터를 저장 용량의 어떤 부분들을 펼쳐놓고[KO]
./segmented_character_voice/lecs/lecs_1_101.wav|lecs|[KO] 거기다 이렇게 원하는 대로 흩어놓고 쓰는 이 블록 스토리지 타입의 데이터를 활용하는 방법을 사용합니다.[KO]
./segmented_character_voice/lecs/lecs_1_102.wav|lecs|[KO] 또 새로운 방법을 하나 더 추가로 말씀을 드리면 오브젝트 스타일의 스토리지라는 개념들이 점점 올라오고 있는데[KO]
./segmented_character_voice/lecs/lecs_1_103.wav|lecs|[KO] 오브젝트라는 것은 지금 말씀드렸던 것과 사용하는 어떤 형태의 중심이 아니라[KO]
./segmented_character_voice/lecs/lecs_1_104.wav|lecs|[KO] 내가 생각하는 이 저장할 데이터의 덩어리들은 이 정도의 어떤 덩어리들이다.[KO]
./segmented_character_voice/lecs/lecs_1_105.wav|lecs|[KO] 오브젝트 덩어리다 생각하고 오브젝트 덩어리를 네가 나 잠시 저장했다가 내가 원할 때 줘.[KO]
./segmented_character_voice/lecs/lecs_1_106.wav|lecs|[KO] 나는 어디에 저장되어 있는지 신경 쓰지 않고 내가 그냥 달라고 요청하면 주는[KO]
./segmented_character_voice/lecs/lecs_1_107.wav|lecs|[KO] 이거 저희가 비유를 한다면 발레파킹하고 많이 비교해요. 저희가 차를 키를 맡기고 자기가 차를 찾을 때는 그냥 키를 주면은[KO]
./segmented_character_voice/lecs/lecs_1_108.wav|lecs|[KO] 자기가 차를 돌려받는 것처럼 저희가 원했던 데이터를 저장시키고 돌려받는 원리를 하는 이 오브젝트 스토리지.[KO]
./segmented_character_voice/lecs/lecs_1_109.wav|lecs|[KO] 이런 세 가지 스토리지의 어떤 원리를 실제로 존재하는 스토리지를 할 수 있는 디바이스하고 연결해서 저희가 문제를 바라보게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_110.wav|lecs|[KO] 그럼 실제로 저장할 수 있는 디바이스는 뭐가 있느냐. 데이터를 저장해서 기록해서 가지고 있을 수 있는 디바이스가 뭐냐.[KO]
./segmented_character_voice/lecs/lecs_1_111.wav|lecs|[KO] 이렇게 보면은 고전적으로는 이 테이프 드라이브라는 걸 저희가 활용했었고요.[KO]
./segmented_character_voice/lecs/lecs_1_112.wav|lecs|[KO] 그 다음에 그 다음에 나왔던 게 저희가 좀 많이 쓰고 있는 하드 디스크.[KO]
./segmented_character_voice/lecs/lecs_1_113.wav|lecs|[KO] 그 다음에 좀 새롭게 요즘 모던하게 쓰고 있는 플래시 드라이브라고 하는 솔리드 스테이트 드라이브라고 하는 SSD가 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_114.wav|lecs|[KO] 그래서 이런 부분들에 연결해서 이 부분들 다 어떻게 되냐면 디스크라고 얘기해서 디스크라는 말을 쓰면은 저장 공간이라는 개념이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_1_115.wav|lecs|[KO] 그러면 이건 다 스토리지의 역할을 하게 되고요.[KO]
./segmented_character_voice/lecs/lecs_1_116.wav|lecs|[KO] 똑같은 플래시 메모리라는 단어를 써가지고 플래시 메모리 그 다음에 아니면 D램 메모리 이렇게 저희가 많은 램 램 뭐 이렇게 얘기하는 부분들은 다 메모리 공간입니다.[KO]
./segmented_character_voice/lecs/lecs_1_117.wav|lecs|[KO] 그래서 근본적으로 메모리에 저장이 돼서 일을 합니다.[KO]
./segmented_character_voice/lecs/lecs_1_118.wav|lecs|[KO] 여기서 이제 경계선에서 조금 헷갈리게 저희 많은 게 플래시라는 어떤 소자가 있는데 저희가 플래시라는 소자는 이 메모리의 역할도 좀 할 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_119.wav|lecs|[KO] 그 다음에 저장의 역할도 할 수 있는 중간적인 입장을 가지고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_120.wav|lecs|[KO] 그래서 중간적으로 해서 필요에 따라서 어떨 때는 메모리가 부족하면 그걸 보충할 수 있기도 하고 그 다음에 디스크 쪽에서 역할을 할 수 있는 그런 식으로 쓰이는 상태.[KO]
./segmented_character_voice/lecs/lecs_1_121.wav|lecs|[KO] 그래서 얘가 전체적인 뭐죠? 피라미드 형태의 하이라키를 가지고 어떤 말씀을 드리면 빠른 메모리나 빠른 저장 공간은 비쌉니다.[KO]
./segmented_character_voice/lecs/lecs_1_122.wav|lecs|[KO] 그리고 싼 저장 공간들은 느립니다.[KO]
./segmented_character_voice/lecs/lecs_1_123.wav|lecs|[KO] 그래서 그것들을 적절하게 균형을 맞춰서 사용하는 방법으로 컴퓨터를 활용하도록 해야 되는 원리를 가지고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_124.wav|lecs|[KO] 추가적으로 마지막 부분은 이제 네트워크라고 하는 게 그래서 이 컴퓨터라는 부분이 밖으로 하는 대화하는 부분을 지원하는 요소들이 네 번째 중요한 요소로 자리 잡고 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_125.wav|lecs|[KO] 이것에 대해서는 뒷부분에 따로 말씀을 드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_126.wav|lecs|[KO] 지금까지 컴퓨터에 대해서 어떻게 저희가 살펴봤냐면 컴퓨터라는 어떤 구조적으로 생각을 해서 아까 4개의 덩어리 CPU, 메모리, 스토리지, 네트워크라는 4개의 요소[KO]
./segmented_character_voice/lecs/lecs_1_127.wav|lecs|[KO] 아니면 또 크게 보면은 컴퓨터를 할 수 있도록 도와주는 장치 부분, 그 다음에 스토리 저장을 할수록 도와주는 부분,[KO]
./segmented_character_voice/lecs/lecs_1_128.wav|lecs|[KO] 그 다음에 네트워크를 할수록 좋아지는 이 3가지 요소를 가지고 있는 것입니다.[KO]
./segmented_character_voice/lecs/lecs_1_129.wav|lecs|[KO] 크게 보면은 3가지 요소고 실제로 그거 갖다가 구성품으로 보면 아까 CPU, 메모리, 스토리지, 그 다음 네트워크 이렇게 볼 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_130.wav|lecs|[KO] 그럼 이 3가지 요소가 있는데 컴퓨터 안에 그럼 이 요소들을 갖다가 어떻게 넘고 어떻게 넣어놓고 어떻게 다룰 거냐 이런 부분입니다.[KO]
./segmented_character_voice/lecs/lecs_1_131.wav|lecs|[KO] 그리고 그걸 가지고 어떤 일을 시킬 거냐 이런 입장에서 저희가 전형적으로 얘기하는 컴퓨터 형태가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_132.wav|lecs|[KO] 지금 계속 살펴봤던 그냥 계산을 중심으로 해서 해주는 컴퓨터의 모습 그걸 저희가 컴퓨터에 대해서 컴퓨터 중심으로 활용하는 어떤 컴퓨터 박스라고 저희가 한번 얘기를 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_133.wav|lecs|[KO] 그 다음에 저장을 하는 부분에 대한 걸 집중하는 저희가 어떤 컴퓨터가 있냐면 컴퓨터가 아까 말씀하신 것처럼 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_1_134.wav|lecs|[KO] 이 저장하고 하는 거 계산하고 하는 부분이 아니라 전반적으로 저장에만 집중해서 다른 사람의 저장을 도와주고 필요한다면 그걸 갖다가 서플라이는 저장에 집중되어 있는 스토리지 박스라고 부를 수 있는 컴퓨터 형태가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_135.wav|lecs|[KO] 이걸 저희가 어떤 데는 스토리지 서버라고 따로 부르기도 하고 그런 형태들이 하나 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_136.wav|lecs|[KO] 한 가지 형태를 넣어 보겠습니다. 네트워크에 집중하고 있는 컴퓨터들이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_137.wav|lecs|[KO] 네트워킹 박스라고 저희가 부르는 저희가 다른 말로는 스위치 라우터라고 하는 이런 것들인데 얘는 어떤 식이냐면 안에 있는 컴퓨터 원리가 동일하게 적용합니다.[KO]
./segmented_character_voice/lecs/lecs_1_138.wav|lecs|[KO] 다만 네트워킹 하는 부분에 대해서만 집중적으로 다 기능이 특화가 되어 있다고 말씀드려야겠죠.[KO]
./segmented_character_voice/lecs/lecs_1_139.wav|lecs|[KO] 그럼 동일하게 스토리지 박스는 스토리지 부분의 기능이 특화가 되어 있고요.[KO]
./segmented_character_voice/lecs/lecs_1_140.wav|lecs|[KO] 컴퓨터 박스는 원래 기본적으로 하는 저희가 얘기하는 계산을 하고 그 다음에 그 계산을 보조하기 위해서 저장을 일부하고 하는 정도로 커버하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_1_141.wav|lecs|[KO] 그럼 지금 3대 역할인 계산을 중심으로 하는 컴퓨터를 지원하는 어떤 컴퓨터들이 있고 스토리지를 집중적으로 지원하는 컴퓨터들이 있고[KO]
./segmented_character_voice/lecs/lecs_1_142.wav|lecs|[KO] 네트워크를 지원하는 컴퓨터들이 있고 그런데 그런 것들을 갖다가 다 다른 컴퓨터라고 생각하지 말고[KO]
./segmented_character_voice/lecs/lecs_1_143.wav|lecs|[KO] 같은 어떤 박스에 담겨서 컴퓨팅 하는 재료가 좀 많고 어떤 쪽에는 스토리지 하는 저장을 하는 재료가 많고 어떤 거는 네트워크 하는 재료가 좀 많은 걸로 이해하는[KO]
./segmented_character_voice/lecs/lecs_1_144.wav|lecs|[KO] 좀 더 논리적으로 추상화해서 컴퓨터들의 다양한 능력에 따라서 걔를 어떤 이름의 컴퓨터로 부를지 결정된다 이렇게 생각하시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_1_145.wav|lecs|[KO] 한 번만 다시 반복해서 설명을 드리면 컴퓨터라는 부분에서는 다 모든 지금 말씀하신 모든 것은 다 컴퓨터 시스템에 속하는 거고요.[KO]
./segmented_character_voice/lecs/lecs_1_146.wav|lecs|[KO] 그것들이 어떨 때는 컴퓨터라고 부르고 어떨 때는 저희가 스토리지 서버라고 부르고 어떨 때는 스위치 라우터라고 부를 뿐이지 근본적인 컴퓨터 시스템 원리에서는 다 한 패밀리다 이렇게 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_0.wav|lecs|[KO] 그럼 이런 컴퓨터 시스템들 패밀리에 대해서 좀 변화하는 모습들을 저희가 좀 살펴볼 수 있을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_2_1.wav|lecs|[KO] 변화하는 모습이라는 게 그럼 어떤 모습들을 가지고 있느냐 정말로 컴퓨터 쪽에서는 대표적으로 어떤 모습까지 있냐면[KO]
./segmented_character_voice/lecs/lecs_2_2.wav|lecs|[KO] 저희가 슈퍼 컴퓨팅이라고 하는 이런 모습이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_3.wav|lecs|[KO] 그림의 상단에 있는 것처럼 지금 굉장히 큰 컴퓨터들을 갖다가 서버를 해서 렉이라고 하는 장치에 넣고요.[KO]
./segmented_character_voice/lecs/lecs_2_4.wav|lecs|[KO] 그 렉들이 지금 뭐죠? 수십 개 아니면 한 백여 개의 렉들이 지금 여기 있는 것들을 보실 수 있어요.[KO]
./segmented_character_voice/lecs/lecs_2_5.wav|lecs|[KO] 이런 것 같이 아주 대겸으로 어떤 특화된 계산, 저희가 인류가 필요한 어떤 슈퍼 컴퓨팅이라는 계산할 수 있는 스케일까지 가지고 있는 컴퓨터 정보를 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_6.wav|lecs|[KO] 그걸 저희가 슈퍼 컴퓨터라고 부르고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_7.wav|lecs|[KO] 그리고 저희한테 가장 친숙한 스마트폰도 당연히 컴퓨터의 일종이고요.[KO]
./segmented_character_voice/lecs/lecs_2_8.wav|lecs|[KO] 그다음에 요즘 이게 뭐죠? 컴퓨터를 배우거나 이런 학생들한테 배울 때 가장 많이 쓰이는 라즈베리 파이라고 하는 친숙한 컴퓨터들,[KO]
./segmented_character_voice/lecs/lecs_2_9.wav|lecs|[KO] 오픈소스 형태의 컴퓨터가 있고요. 아두이노라고 하는 그 보다 약간 작은 버전이 있고요.[KO]
./segmented_character_voice/lecs/lecs_2_10.wav|lecs|[KO] 이런 버전들도 다 컴퓨터의 하나가 당연히 아실 거고요.[KO]
./segmented_character_voice/lecs/lecs_2_11.wav|lecs|[KO] 조금 더 작은 거를 어디까지 가느냐, 좀 작은 거는 지금 현재 그래도 약간 실용적으로 저희가 쓸 수 있는,[KO]
./segmented_character_voice/lecs/lecs_2_12.wav|lecs|[KO] 일반인들이 사서 쓸 수 있는 컴퓨터 중에서는 에디슨이라고 하는 저희가 SD 메모리에 관한 칩의 사이즈의 컴퓨터가 들어가는 형태도 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_2_13.wav|lecs|[KO] 그래서 컴퓨터의 모습에 대해서는 여러 가지 형태가 있고, 크고 작은 다양한 형태의 컴퓨터의 모습이 있다는 걸 일단 한번 생각을 해주시고 컴퓨터를 바라보셨으면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_14.wav|lecs|[KO] 두 번째는 스토리지에 특화된 컴퓨터들은 그럼 어떤 모습을 가지고 있느냐, 이런 부분에서 살펴보는 게 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_15.wav|lecs|[KO] 스토리지라는 부분에서 아까 제가 말씀드리면서 이 테이프라는 얘기는 잠깐 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_2_16.wav|lecs|[KO] 하드디스크, 그다음에 뭐죠? SSD라고 하는 플래시를 가지고 가는 어떤 디스크까지 말씀을 드렸는데,[KO]
./segmented_character_voice/lecs/lecs_2_17.wav|lecs|[KO] 실제로 저희가 저장이라고 하는 부분에서 그동안 많이 썼던 CD-ROM, DVD, 이것도 다 저장 매체입니다.[KO]
./segmented_character_voice/lecs/lecs_2_18.wav|lecs|[KO] 그리고 그거 말고도 좀 다르다는 저희가 생각하는 추가적인 매체로 옛날에는 펀치카드라는 것도 저장 매체로 썼고요.[KO]
./segmented_character_voice/lecs/lecs_2_19.wav|lecs|[KO] 그래서 어떤 자료를 보시면 연대별로 어떤 저장 기술이 어떻게 발전됐고 이런 걸 살펴볼 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_20.wav|lecs|[KO] 한 가지 더 추가로 보면 요즘에는 저장이라는 개념에서 저장을 내 현재 위치에서 컴퓨터에 바로 붙여서 저장하는 것만이 아니라[KO]
./segmented_character_voice/lecs/lecs_2_21.wav|lecs|[KO] 이 네트워크, 인터넷으로 해가 되고 클라우드로 연결해서 네트워크의 원리가 돼서 네트워크로 온라인 저장이라고 하는 개념이 들어가서[KO]
./segmented_character_voice/lecs/lecs_2_22.wav|lecs|[KO] 저희가 온라인에서 쓰이는 파일 저장하는 파일 저장소 공유 많이 하셨죠?[KO]
./segmented_character_voice/lecs/lecs_2_23.wav|lecs|[KO] 그 다음에 요즘 드랍박스 같은 더 클라우드 형의 저장소까지 가는 이런 개념이 있는 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_2_24.wav|lecs|[KO] 그래서 저장의 기본적으로 형태나 이런 진화가 어떻게 되는지 그렇게 전체로 살펴보시면 좋겠고요.[KO]
./segmented_character_voice/lecs/lecs_2_25.wav|lecs|[KO] 조금 이제 들어가서 보면은 테이프를 가지고 하는 거 저장 장치는 그럼 어떤 모습을 가졌느냐?[KO]
./segmented_character_voice/lecs/lecs_2_26.wav|lecs|[KO] 한 번 정도 지금 보시면은 테이프를 전용으로 해서 굉장히 방대한 데이터를 굉장히 오래 저장할 수 있는 매체로 테이프가 여전히 많이 활용이 되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_27.wav|lecs|[KO] 또 그 다음 단계로는 지금 가장 파퓰리하게 저희가 뭐 인터넷에서 저희가 비디오를 보거나 이럴 때 대부분 저장되는 경우는 하드 디스크를 사용해 가지고[KO]
./segmented_character_voice/lecs/lecs_2_28.wav|lecs|[KO] 대용량의 데이터를 저장하고 그걸 빨리빨리 읽어내서 소비자한테 전달하는 형태의 저장장치가 지금 많이 쓰고 있다고 생각하시면 되고요.[KO]
./segmented_character_voice/lecs/lecs_2_29.wav|lecs|[KO] 그 다음 단계로 최근에는 제가 아까 말씀드린 플래시를 해서 더 빠른, 더 많은 사람들이 하는 계산이 단순히 어떤 내가 데이터를 보내면 그 데이터를 반응을 해서 더 빠른 계산을 해서 저장이 돼서 그게 나한테 돌아오는[KO]
./segmented_character_voice/lecs/lecs_2_30.wav|lecs|[KO] 더 빠른 저장의 니트가 점점 강해지고 있습니다. 저희가 좀 기술적인 말로는 이렇게 말하자면 지연을 줄일 수 있는 로우 레이턴시,[KO]
./segmented_character_voice/lecs/lecs_2_31.wav|lecs|[KO] 레이턴시라는 게 어떤 지연의 크기인데 지연을 줄일 수 있는 그런 저장을 서포트하는 그래서 플래시를 사용해서 굉장히 많은 계산,[KO]
./segmented_character_voice/lecs/lecs_2_32.wav|lecs|[KO] 많은 데이터를 가지고 순식간에 처리한다. 요게 연결된다면 요새 빅데이터 아니면 요새 딥러닝 이런 부분에서 필요한 저장장치는 굉장히 많은 데이터를 뒤집고 다시 뒤집고[KO]
./segmented_character_voice/lecs/lecs_2_33.wav|lecs|[KO] 다시 접어 놓고 다시 표를 해치고 닫아 열고 열고 이런 식으로 반복하는 거에 사용되는 저장장치가 있습니다. 그런 것들을 위해서는 플래시 같은 굉장히 빠른 저장장치들이 활용이 되고 있다.[KO]
./segmented_character_voice/lecs/lecs_2_34.wav|lecs|[KO] 이렇게 봐주시면 좋겠습니다. 저희가 컴퓨터의 어떤 모습이나 이런 것들을 많이 살펴봤고요. 네트워크라는 부분에 대해서 좀 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_35.wav|lecs|[KO] 일반적으로 보면 유저들이 아까 컴퓨터 장치는 PC를 통해서 나름대로 친숙하다고 생각하시는데 저장 전용 스토리 장치는 조금 많이 보신지 못하는 경우가 있고요.[KO]
./segmented_character_voice/lecs/lecs_2_36.wav|lecs|[KO] 네트워크 쪽의 장치들은 저희가 알고 있는 집에서 사용하는 억세스 포인트라고 하는 부분에다가 이렇게 플러그에서 뒤에 구멍이 좀 뚫려있는 이런 형태를 많이 생각하시죠.[KO]
./segmented_character_voice/lecs/lecs_2_37.wav|lecs|[KO] 그런데 그것들은 저희가 하는 네트워크 장치의 일부분일 뿐이고요. 저희가 대표적으로 네트워크 장치들을 구분한다면 저희가 스위치라고 라우터라고 하는 두 개의 장치들을 대표적으로 거론하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_38.wav|lecs|[KO] 스위치라고 하는 장치는 어떤 역할을 하냐면 여러 개의 컴퓨터들에 있는 것들이 서로 서로 서로를 찾아가서 바로 직접적으로 연결할 때 사용하는[KO]
./segmented_character_voice/lecs/lecs_2_39.wav|lecs|[KO] 그러니까 서로 서로를 찾아가서 직접 연결할 때 사용하는 스위치를 해주는 거죠. 스위치에서 A하고 B를 연결해서 직접 접속을 시켜주는 이런 식의 기능을 하도록 만들어진 특화된 컴퓨터다 이게 바로 스위치가 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_2_40.wav|lecs|[KO] 그럼 라우터는 뭐냐? 어떤 데이터를 가지고 내가 어떤 다른 컴퓨터를 찾아가야 되는데 다른 컴퓨터 찾기에서는 이 길로 찾아가면 좋다. 안내원 같은 역할을 하는 컴퓨터가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_41.wav|lecs|[KO] 그걸 라우터라고 부르게 될 것 같고요. 이런 라우터들을 연결을 하면 저희가 스위치를 통해서 주변의 역할을 찾은 다음에 제가 지금 부탁할 수 있는 라우터를 찾아갑니다.[KO]
./segmented_character_voice/lecs/lecs_2_42.wav|lecs|[KO] 그럼 라우터가 내가 너는 이렇게 찾아가면 저 사람을 찾아갈 수 있을까라고 알려주는 개념이 될 것 같습니다. 그래서 이걸 그림으로 한번 살펴보시면 지금 같은 원리가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_2_43.wav|lecs|[KO] 대부분의 컴퓨터들이 아래쪽에 매달려 있는 모습을 보시면 알 수 있고요. 그게 스위치에 컴퓨터들이 매달려 있는 거죠. 그래서 A빌딩에 스위치가 하나 있으면 그게 컴퓨터에 매달려 있고 B빌딩에도 똑같이 컴퓨터가 매달려 있는데 얘네들이 저희가 말씀했던 어떤 다시 백본이라고 하는 부분에서 한 번 더 모이게 되고요.[KO]
./segmented_character_voice/lecs/lecs_2_44.wav|lecs|[KO] 이 부분도 스위치 원리가 그대로 적용됩니다. 그리고 나서 이 보호하기 위해서는 파이월을 통해서 한 번 한 다음에 그 밖에 보면 라우터라고 해서 내가 지금 밖으로 나가는데 지금부터 네가 하는 데스티니션이 뭐냐.[KO]
./segmented_character_voice/lecs/lecs_2_45.wav|lecs|[KO] 그러니까 목적 주소가 뭐냐 이렇게 해서 목적 주소에 따라서 인터넷에서 이 길로 찾아가라 저길로 찾아가라 이런 거 안내해주는 게 라우터는 컴퓨터 시스템이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_46.wav|lecs|[KO] 그럼 이런 정도로 해서 저희가 세 가지 타입에 대해서 다 살펴본 것 같고요. 그럼 저희가 컴퓨터라는 걸 한 번 다시 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_47.wav|lecs|[KO] 컴퓨터라는 것에 대해서 저희가 컴퓨터가 어떤 식으로 원리를 갖는 게 컴퓨터라고 정의를 해봤고 그거의 핵심적인 구성 요소인 저희가 하는 컴퓨터 스토리지 네트워크라는 세 가지 요소를 봤고[KO]
./segmented_character_voice/lecs/lecs_2_48.wav|lecs|[KO] 이 네이스 요소 중심으로 해서 어떤 형태의 컴퓨터들의 모습들이 있는지 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_2_49.wav|lecs|[KO] 이런 컴퓨터들이 최근에 조금씩 변화를 겪고 있습니다. 변화를 겪고 있는다는 게 조금 미래형으로 컴퓨터가 진화한다고 하는 모습을 보죠.[KO]
./segmented_character_voice/lecs/lecs_2_50.wav|lecs|[KO] 아까 말씀드렸던 어떤 계산을 전용으로 하고 저장을 전용으로 하고 네트워크를 전용으로 하고 이렇게 따로따로 만들어서 썼는데[KO]
./segmented_character_voice/lecs/lecs_2_51.wav|lecs|[KO] 요즘에 봤더니 굳이 그렇게 해야 돼? 아니면 왜냐하면 점점 더 빠른 계산하고 빠르게 저장하고 싶은데 내가 저장한 부분에서 데이터를 가져가서 다른 컴퓨터에서 가져가서 내가 해서 처리를 해서 다시 네트워크로 보내고 이런 일을 할 거면[KO]
./segmented_character_voice/lecs/lecs_2_52.wav|lecs|[KO] 내가 한 컴퓨터 한 대에 그걸 다 모아놓고 계산하고 저장을 빠르게 하고 그 다음 네트워크도 빠르게 하는 그런 컴퓨터들을 여러 개 만들어서 계속 여러 개 반복해서 똑같은 형태로 만들었으면 훨씬 더 일을 간편하게 할 수 있지 않을까?[KO]
./segmented_character_voice/lecs/lecs_2_53.wav|lecs|[KO] 그 모습이 더 편안하지 않을까? 이런 트렌드를 반영해서 만들어지고 있는 컴퓨터의 형태가 있습니다. 이걸 저희가 Hyperconverged Infrastructure, HCI 형태로 만들어진 컴퓨터들이라고 부르고요.[KO]
./segmented_character_voice/lecs/lecs_2_54.wav|lecs|[KO] 근무적으로 말씀드렸던 것처럼 컴퓨팅하는 개념하고 스토리지하는 개념하고 네트워크 개념을 하나의 컴퓨터 박스 안에 넣는 개념으로 진화를 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_55.wav|lecs|[KO] 그럼 어떤 사례들이 있느냐? 여러 가지 회사들에서 스토리지하고 컴퓨터 부분에 집중해서 모아놓는 것들을 하는 게 어떤 일일까요?[KO]
./segmented_character_voice/lecs/lecs_2_56.wav|lecs|[KO] 컴퓨터하고 그 다음에 네트워크를 좀 더 집중해서 모아놓는 형태도 있고요. 여러 가지 형태로 해서 이런 기능을 통합적으로 모아놓고 똑같은 박스를 계속 카피하듯이 만들어서 그걸 관리하는 걸로 진화하는.[KO]
./segmented_character_voice/lecs/lecs_2_57.wav|lecs|[KO] 다시 말씀드렸지만 이런 형태가 왜 나타나느냐를 한번 다시 생각을 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_58.wav|lecs|[KO] 객각의 세 가지의 다른 것들을 다뤄서 저희가 어떤 통합적인 일을 시키는 것보다 하나의 통합적인 일에다가 잘 정리해서 네가 필요에 따라서 이렇게 저렇게 바꿔쓰게 하는 정도로 하는 방법이 훨씬 더 저희가 하는 효율성이라고 그러죠.[KO]
./segmented_character_voice/lecs/lecs_2_59.wav|lecs|[KO] 효율성은 경제성을 낳는 거고요. 효율성은 경제성 또 하나 숨는 게 있습니다. 효율성과 경제성이 나오는 게 어떤 똑같은 타입을 하면[KO]
./segmented_character_voice/lecs/lecs_2_60.wav|lecs|[KO] A라는 걸 가지고 B를 쓰고 C를 쓸 수 있다. 이게 무슨 말이죠? 저희가 빠르게 대응할 수 있다는 겁니다.[KO]
./segmented_character_voice/lecs/lecs_2_61.wav|lecs|[KO] 요즘 얘기하는 인터넷 시대, 스피드 시대에서 필요한 어떤 스피드에 대응하기 위해서는 지금 같이 모여진 형태를 가지고 필요에 따라서 목적을 바꿔 쓸 수 있는 약간 다 목적, 다용도의 컴퓨터 형태로의 어떤 니드가 굉장히 많이 나타나고 있고[KO]
./segmented_character_voice/lecs/lecs_2_62.wav|lecs|[KO] 그 니드에 대응하는 것이 HCI라고 하는 어떤 약간 미래지향적인 컴퓨터의 모습이라고 볼 수 있겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_63.wav|lecs|[KO] 지금까지 전체적인 컴퓨터들이 어떤 모습으로 진화하고 있고 변화하고 있는 부분들을 다 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_2_64.wav|lecs|[KO] 그것들을 제가 설명을 드리면서 박스라는 단어를 항상 여러분 설명드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_2_65.wav|lecs|[KO] 이 박스라는 부분이나 말을 왜 하고 있고 박스에 대해서 어떤 변화가 있는지 한 번 더 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_66.wav|lecs|[KO] 저희가 박스라고 해서 지금 보면 블랙박스 컴퓨터는 어떤 거야? 블랙박스다.[KO]
./segmented_character_voice/lecs/lecs_2_67.wav|lecs|[KO] 그런데 컴퓨터는 내가 어떤 시키는 프로그램을 설치해서 두면 내가 마음대로 프로그램해서 마음대로 쓸 수 있는 이런 장지라고 배웠는데[KO]
./segmented_character_voice/lecs/lecs_2_68.wav|lecs|[KO] 사실은 내가 지금 컴퓨터 프로그램을 익히면 컴퓨터를 마음대로 쓸 수 있느냐? 사실은 그렇지 않습니다.[KO]
./segmented_character_voice/lecs/lecs_2_69.wav|lecs|[KO] 주어져 있는 어떤 컴퓨터의 어떤 룰에 따라서 약속된 일을 시켜야지만 걔가 대응을 해주지 내가 원하는 대로 마음대로 컴퓨터 얘가 원래 원하지 않을 때 일까지는 시킬 수가 아직 없습니다.[KO]
./segmented_character_voice/lecs/lecs_2_70.wav|lecs|[KO] 이런 부분들을 해서 조금 더 폐쇄적으로 잘 관리되어 있으니까 너는 어플리케이션들 지금 잘 짜져 있는 사용자의 어플리케이션만 잘 쓰면서 그냥 컴퓨터를 써라.[KO]
./segmented_character_voice/lecs/lecs_2_71.wav|lecs|[KO] 그런데 저희가 지금 앞으로 하고 싶은 것은 이 컴퓨터들이 갖고 있는 기능을 이용해서 세상의 컴퓨터들이 퍼질 텐데 그 컴퓨터를 마음대로 원해서 바꿔서 쓰고 싶은 니들이 점점 생기고 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_2_72.wav|lecs|[KO] 요즘 얘기하는 뭐죠? Do it yourself라 그럴까? 아니면 프로그램을 점점 배워서 그 컴퓨터를 마음대로 쓰고 싶은데 컴퓨터가 이렇게 됐으면 좋겠는데[KO]
./segmented_character_voice/lecs/lecs_2_73.wav|lecs|[KO] 여기 부분은 원래 아니야. 원래 저렇게 쓰도록 돼 있어. 약간 이런 식의 얘기가 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_2_74.wav|lecs|[KO] 그래서 그런 식으로 이렇게 돼 있다는 한정에 대해서 조금 터치하기가 마음대로 쉽지 않고 제가 원하는 대로 바꿀 수 없는 형태.[KO]
./segmented_character_voice/lecs/lecs_2_75.wav|lecs|[KO] 블랙박스 또는 브라운 약간 중립적이지만 조금은 고칠 수 있지만 다는 못기는 이런 개념의 컴퓨터들이 하나 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_76.wav|lecs|[KO] 그럼 여기에 반해서 다시 요즘 얘기하는 화이트박스 형태의 컴퓨터라는 개념을 한번 설명을 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_77.wav|lecs|[KO] 이건 지금 보신 것처럼 박스가 화이트박스라고 부릅니다. 화이트박스라는 것은 어떤 A, B라는 어떤 특정한 회사들이 딱 만들어놓은 컴퓨터의 형태가 아니고[KO]
./segmented_character_voice/lecs/lecs_2_78.wav|lecs|[KO] 저희가 실제로는 화이트박스 컴퓨터를 산 다음에 원하는 내가 프로그램들을 원하는 데서 설치해가지고 마음대로 자유롭게 써라.[KO]
./segmented_character_voice/lecs/lecs_2_79.wav|lecs|[KO] 저희가 지금 다른 컬러들 녹색, 노란색, 빨간색 컬러들의 원하는 OS를 마음대로 집어넣고 써라. 이런 얘기가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_2_80.wav|lecs|[KO] 그러니까 자기가 원하는 오프라인 시스템도 마음대로 고르고 프로그램도 마음대로 골라서 쓸 수 있는 컴퓨터. 이렇게 생각하실 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_2_81.wav|lecs|[KO] 이런 형태의 컴퓨터가 좀 더 진정한 의미에서 저희가 마음대로 활용할 수 있는 컴퓨터가 될 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_2_82.wav|lecs|[KO] 또 이 문제를 하나를 조금 더 연결해서 한번 들여다보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_83.wav|lecs|[KO] 저희가 컴퓨터라는 형태의 특정한 회사, 저희가 뭐 A 회사라고 할까요? 아니면 그 다음에 먼저 M 회사라고 하는 이거에 특화된 어떤 컴퓨터들이 있다면[KO]
./segmented_character_voice/lecs/lecs_2_84.wav|lecs|[KO] 실제로 화이트박스 컴퓨터는 여러 개의 회사를 마음대로 바꿔가니까 컴퓨터 하드웨어를 갖다가는 내가 마음대로 사고요.[KO]
./segmented_character_voice/lecs/lecs_2_85.wav|lecs|[KO] 대신 소프트웨어를 따로 사는, 소프트웨어를 자기가 마음대로 사서 원하는 데서 설치할 수 있는,[KO]
./segmented_character_voice/lecs/lecs_2_86.wav|lecs|[KO] 사용자들이 저 자율권을 갖는다. 이런 컴퓨터 형태로 유저들이 디멘드하고 그 형태의 대응이 점점 일어나고 있는 부분이 있다.[KO]
./segmented_character_voice/lecs/lecs_2_87.wav|lecs|[KO] 이건 이제 하나 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_2_88.wav|lecs|[KO] 하나 조금 더 개념을 좀 더 가보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_89.wav|lecs|[KO] 아까 제가 말씀드렸던 컴퓨터에 어떤 형태가 있느냐.[KO]
./segmented_character_voice/lecs/lecs_2_90.wav|lecs|[KO] HCI라고 하는 컴퓨터라고 해서 하나의 머신 안에 저희가 컴퓨터 계산을 하는 부분하고 저장하는 부분하고 네트워크 하는 부분을 한테 모아서[KO]
./segmented_character_voice/lecs/lecs_2_91.wav|lecs|[KO] 그걸 스케일을 해서 여러 개를 만들어서 자유롭게 쓰는 형태의 모습을 말씀드렸고요.[KO]
./segmented_character_voice/lecs/lecs_2_92.wav|lecs|[KO] 이런 형태의 그림을 조금 더 미래적으로 생각해 보면 요새 컴퓨터가 어떤 형태로 사람들을 이 컴퓨터를 바라보게 할 시간이냐.[KO]
./segmented_character_voice/lecs/lecs_2_93.wav|lecs|[KO] 저희가 옛날에 픽처폰을 스마트폰으로 바라보던 것처럼 픽처폰에 있는 프로그램을 그냥 썼던 거라면 지금은 스마트폰은[KO]
./segmented_character_voice/lecs/lecs_2_94.wav|lecs|[KO] 스마트하게 내가 원하는 프로그램을 마음대로 가져가서 설치해서 쓰는 형태.[KO]
./segmented_character_voice/lecs/lecs_2_95.wav|lecs|[KO] 좀 있으면 내가 원하는 프로그램을 집어넣어서 내 프로그램도 집어넣어서 쓰는 형태.[KO]
./segmented_character_voice/lecs/lecs_2_96.wav|lecs|[KO] 이렇게 바뀌겠죠.[KO]
./segmented_character_voice/lecs/lecs_2_97.wav|lecs|[KO] 그래서 저희가 스마트한 컴퓨터의 모습으로 현재 진화가 일어나고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_98.wav|lecs|[KO] 진화가 일어난다는 것은 저희가 하는 세상의 원리나 이런 부분들을 컴퓨터를 자유롭게 쓰고 있는 니드들을 사용자들이 요구하고 있고[KO]
./segmented_character_voice/lecs/lecs_2_99.wav|lecs|[KO] 그거에 대해서 컴퓨터를 제조하고 컴퓨터에 대한 소프트웨어를 만드는 사람 그쪽 방향으로 점점 진화해서[KO]
./segmented_character_voice/lecs/lecs_2_100.wav|lecs|[KO] 점점 스마트하고 굉장히 사용자가 중심으로 사용되는 컴퓨터의 형태로 지금 현재 진화하고 있다.[KO]
./segmented_character_voice/lecs/lecs_2_101.wav|lecs|[KO] 이걸 갖다가 저희가 어떤 단어를 한번 써볼 거냐 해서 스마트한 컴퓨터의 모습으로 진화하고 있다.[KO]
./segmented_character_voice/lecs/lecs_2_102.wav|lecs|[KO] 이렇게 말하는 것이 스마트 X 박스라는 표현을 한번 표현해 봤습니다.[KO]
./segmented_character_voice/lecs/lecs_2_103.wav|lecs|[KO] 그리고 여기 중간에서 한 가지 숨어 있는 부분이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_104.wav|lecs|[KO] 하나의 컴퓨터가 있는데 요새 컴퓨터가 굉장히 사용을 하고 파워풀해졌습니다.[KO]
./segmented_character_voice/lecs/lecs_2_105.wav|lecs|[KO] 파워풀해져서 여러 명이 나눠 써야 되는데 여러 명이 나눠 쓰고 싶은데[KO]
./segmented_character_voice/lecs/lecs_2_106.wav|lecs|[KO] 어떻게 하냐면 지금 하나를 갖다가 한 컴퓨터를 갖다가 한 명한테 주고 옆에서 여러 명이 같이 쓰게 되면 충돌이 일어날 수밖에 없고요.[KO]
./segmented_character_voice/lecs/lecs_2_107.wav|lecs|[KO] 충돌이 일어나는 것을 저희가 Virtualization 기술을 통해서 충돌을 갖다가 가운데를 끊어주는 거죠.[KO]
./segmented_character_voice/lecs/lecs_2_108.wav|lecs|[KO] 끊어서도 하나의 컴퓨터를 마치 여러 대의 컴퓨터처럼 나눠줄 수 있고[KO]
./segmented_character_voice/lecs/lecs_2_109.wav|lecs|[KO] 여러 대의 컴퓨터로 나눠줄 수 있으니까 이 컴퓨터를 갖다가 여러 명이 한 명이 쓸 컴퓨터를 갖다가[KO]
./segmented_character_voice/lecs/lecs_2_110.wav|lecs|[KO] 20명이 쓰는 거죠. 그렇게 되는 방식으로 가성화된 컴퓨터의 부분을 열일을 활용해서[KO]
./segmented_character_voice/lecs/lecs_2_111.wav|lecs|[KO] 컴퓨터의 활용도를 높이는 방법이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_112.wav|lecs|[KO] 여기서 조금 더 개념적인 혼동이 있을까요? 한 번 더 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_113.wav|lecs|[KO] 하나의 컴퓨터의 여러 명이 지금 같이 쓸 수 없느냐? 같이 쓸 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_114.wav|lecs|[KO] 한 컴퓨터에서 멀티태스킹을 해서 여러 명의 여섯 개의 테스트가 같이 어렵게 돌 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_115.wav|lecs|[KO] 다만 이렇게 도는 경우에 어떤 문제가 생기냐면 이 테스트 사이 만약에 충돌이 일어나거나[KO]
./segmented_character_voice/lecs/lecs_2_116.wav|lecs|[KO] 그러면 어떤 한쪽에서 문제가 생겨도 전체적인 컴퓨터가 죽어버리는 이런 문제가 있는 걸 많이 느끼셨습니다.[KO]
./segmented_character_voice/lecs/lecs_2_117.wav|lecs|[KO] 그것을 갖다가 분리해서 쓸 수 있도록 이 버츌라이징 기술은 아이솔레이션 컴퓨터를 만들어서[KO]
./segmented_character_voice/lecs/lecs_2_118.wav|lecs|[KO] 하나 쪽에서 문제가 생겨서 죽더라도 다른 쪽에는 문제가 없는 컴퓨터를 만드는[KO]
./segmented_character_voice/lecs/lecs_2_119.wav|lecs|[KO] 이런 부분이 버츌라이징 기술의 기본적인 의미가 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_2_120.wav|lecs|[KO] 이런 버츌라이징 기술을 활용해서 저희가 지금 알고 있는 클라우드 컴퓨팅이라는 원리를[KO]
./segmented_character_voice/lecs/lecs_2_121.wav|lecs|[KO] 조금 연장해서 설명을 드리도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_122.wav|lecs|[KO] 저희가 되는 클라우드 컴퓨터 쪽에서 사람들이 필요할 때마다 컴퓨터를 빌려준다.[KO]
./segmented_character_voice/lecs/lecs_2_123.wav|lecs|[KO] 그런데 사람들이 컴퓨터를 쓰는 부분에서 한 대의 컴퓨터를 풀로 쓰는 게 아니기 때문에[KO]
./segmented_character_voice/lecs/lecs_2_124.wav|lecs|[KO] 컴퓨터가 쓸 때마다 그걸 조각을 내서 이 조각을 빌려주는 상태로 컴퓨터를 활용해주면[KO]
./segmented_character_voice/lecs/lecs_2_125.wav|lecs|[KO] 훨씬 더 빌려주는 입장에서 훨씬 더 효율적인 빌려질 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_2_126.wav|lecs|[KO] 실제로 그래서 클라우드라고 하는 컴퓨터를 사용하실 때는[KO]
./segmented_character_voice/lecs/lecs_2_127.wav|lecs|[KO] 대부분 가상화된 어떤 컴퓨터 부분 한 조각을 받아서 사용하시는 형태가 된다.[KO]
./segmented_character_voice/lecs/lecs_2_128.wav|lecs|[KO] 이 원리가 숨어 있다는 것을 아시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_129.wav|lecs|[KO] 그래서 컴퓨터는 점점 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_2_130.wav|lecs|[KO] 컴퓨터는 점점 사용자가 원하는 형태로 자유롭게 쓸 수 있는[KO]
./segmented_character_voice/lecs/lecs_2_131.wav|lecs|[KO] 화이트한 박스 형태의 컴퓨터로 바뀌고 그래서 사용자가 자유롭게 쓰니까[KO]
./segmented_character_voice/lecs/lecs_2_132.wav|lecs|[KO] 사용자의 프로그램을 원하는 대로 집어넣어서 그걸 내가 말하는데도 똑똑하게 되는[KO]
./segmented_character_voice/lecs/lecs_2_133.wav|lecs|[KO] 스마트한 컴퓨터 형태로 바뀌고요.[KO]
./segmented_character_voice/lecs/lecs_2_134.wav|lecs|[KO] 스마트한 컴퓨터 형태로 바뀔 때 하나 더 추가한다면 저희가 경계성도 생각을 해야 되기 때문에[KO]
./segmented_character_voice/lecs/lecs_2_135.wav|lecs|[KO] 가상화해서 나눠 쓸 수도 있고 그 다음에 하이퍼 컨버지드에서 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_2_136.wav|lecs|[KO] 스케일링해서 똑같은 걸 찍어내서 훨씬 더 대량생산의 이점을 닿는[KO]
./segmented_character_voice/lecs/lecs_2_137.wav|lecs|[KO] 이런 컴퓨터 형태들의 발전하는 모습이 현재 나타나고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_0.wav|lecs|[KO] 지금까지 말씀드렸던 어떤 컴퓨터를 사용하는 원리에 대해서 쭉 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_3_1.wav|lecs|[KO] 그래서 대량이라는 부분, 클라우드라는 부분을 했는데 컴퓨터의 모습이 요즘은 컴퓨터가 어디서 가장 많이 소비되느냐, 어디서 컴퓨터를 많이 사느냐,[KO]
./segmented_character_voice/lecs/lecs_3_2.wav|lecs|[KO] 이런 세상에서 컴퓨터들이 많이 매년 만들어지는데 그 컴퓨터들이 다 어디로 가느냐,[KO]
./segmented_character_voice/lecs/lecs_3_3.wav|lecs|[KO] 저에 있는 개인 유저의 PC로 가느냐, 아니면 어떤 산업체에 있는 그 필드에 있는 컴퓨터로 가느냐, 아니면 데이터 센터로 가느냐, 아니면 클라우드 데이터 센터로 가느냐 보면[KO]
./segmented_character_voice/lecs/lecs_3_4.wav|lecs|[KO] 클라우드 데이터 센터가 전세계 컴퓨터의 반 정도는 소비를 해서 설치가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_3_5.wav|lecs|[KO] 어떤 말씀을 드리면 클라우드라는 부분의 컴퓨터가 전세계의 컴퓨터 인구라고 그럴까요?[KO]
./segmented_character_voice/lecs/lecs_3_6.wav|lecs|[KO] 컴퓨터 인구 중에 많은 컴퓨터들이 현재는 클라우드에 가서 존재하고 저희가 컴퓨터에서 빌리는 형태가 된다.[KO]
./segmented_character_voice/lecs/lecs_3_7.wav|lecs|[KO] 그럼 클라우드라는 게 어떻게 그 많은 컴퓨터들을 한 대 모아 놓을 수 있고 그렇게 할 수 있게 진화를 했느냐,[KO]
./segmented_character_voice/lecs/lecs_3_8.wav|lecs|[KO] 이렇게 한번 모습을 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_3_9.wav|lecs|[KO] 컴퓨터가 점점 지각이 되고 많은 컴퓨터를 담을 수 있는 형태로 진화된 모습을 그려놓은 게 지금 자료에 보이고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_10.wav|lecs|[KO] 보면 저희가 타워 서버라고 해서 어떤 렉이라고 하는 컴퓨터들의 컴퓨터를 층층이 쌓는 형태로 되는 법이죠.[KO]
./segmented_character_voice/lecs/lecs_3_11.wav|lecs|[KO] 전체로 큰 덩어리로 한 덩어리로 됐던 컴퓨터가 초기의 컴퓨터의 모습이 컴퓨터가 점점 파워력이 작아지면서 그걸 렉 형태로 해서[KO]
./segmented_character_voice/lecs/lecs_3_12.wav|lecs|[KO] 한 층을 옆으로 수평으로 쭉 누적하는 형태로 바뀌었고요.[KO]
./segmented_character_voice/lecs/lecs_3_13.wav|lecs|[KO] 이렇게 바뀌다가 더 작아졌는데 그럼 효율적으로도 안 되네.[KO]
./segmented_character_voice/lecs/lecs_3_14.wav|lecs|[KO] 그러면 다시 수직으로 세워서 블레이드라는 형태로 더 촘촘하게 넣고요.[KO]
./segmented_character_voice/lecs/lecs_3_15.wav|lecs|[KO] 그것도 더 했다니 더 밀접하고 싶으니까 이번에는 꽂는 방법을 다시 낮춰서[KO]
./segmented_character_voice/lecs/lecs_3_16.wav|lecs|[KO] 다시 컴퓨터 렉에서 쭉 끄집어내서 위에서 아래로 꽂는 이 마이크로 서버 형태로 바뀌고[KO]
./segmented_character_voice/lecs/lecs_3_17.wav|lecs|[KO] 이런 식으로 해서 계속 컴퓨터가 지각되는 형태의 변화의 모습의 변화를 가지고 왔습니다.[KO]
./segmented_character_voice/lecs/lecs_3_18.wav|lecs|[KO] 그런데 최종적으로 보면 이런 굉장히 집합된 형태로 컴퓨터가 바뀌어서[KO]
./segmented_character_voice/lecs/lecs_3_19.wav|lecs|[KO] 하나의 컴퓨터 4개는 사실은 수백 대의 컴퓨터가 하나를 모여있는 형태로 진화하고 있다는 모습을 한번 이해해 주셨으면 좋겠고요.[KO]
./segmented_character_voice/lecs/lecs_3_20.wav|lecs|[KO] 그래서 그걸 갖다가 저희가 렉 스텔 컴퓨터 형태로 그립니다.[KO]
./segmented_character_voice/lecs/lecs_3_21.wav|lecs|[KO] 또 이제 이런 부분을 들어갔다가 이런 컴퓨터를 만드는 방법이 여러 가지 방법으로 만들 수 있는데[KO]
./segmented_character_voice/lecs/lecs_3_22.wav|lecs|[KO] 다들 다른 방법으로 만들면 효율적으로 떨어집니다.[KO]
./segmented_character_voice/lecs/lecs_3_23.wav|lecs|[KO] 그래서 전 세계적으로 이런 컴퓨터를 만드는 방법을 좀 통일적으로 어떤 오픈 소스의 원리에 따라서 만드는 방법을 내가 다 공개할 테니까[KO]
./segmented_character_voice/lecs/lecs_3_24.wav|lecs|[KO] 이것에 따라서 한번 같이 만들어서 더 경제적인 컴퓨터를 만들고 다 쓰기 좋은 컴퓨터를 힘을 모아서 만들어보자.[KO]
./segmented_character_voice/lecs/lecs_3_25.wav|lecs|[KO] 이런 오픈 소스 하드의 형태, 오픈 컴퓨터 프로젝트 같은 형태의 컴퓨터 활용 방법도 요즘 서서히 올라오고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_26.wav|lecs|[KO] 서서히 부상하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_27.wav|lecs|[KO] 여기까지 말씀을 드렸고 조금 더 가보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_3_28.wav|lecs|[KO] 컴퓨터가 지금 어디저기 퍼져서 마음대로 흘러나와서 있다.[KO]
./segmented_character_voice/lecs/lecs_3_29.wav|lecs|[KO] 이 부분을 많이 설명할 때 요즘 많이 얘기가 되는 게 저희가 스마트폰이라는 부분에서 스마트한 컴퓨터다.[KO]
./segmented_character_voice/lecs/lecs_3_30.wav|lecs|[KO] 스마트폰도 스마트한 컴퓨터다.[KO]
./segmented_character_voice/lecs/lecs_3_31.wav|lecs|[KO] 그 말 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_3_32.wav|lecs|[KO] 그럼 다음번에 있는 가장 대표적인 스마트한 컴퓨터의 모습은 그 다음에 사람들을 가장 친숙하게 할 컴퓨터의 모습은 뭘까?[KO]
./segmented_character_voice/lecs/lecs_3_33.wav|lecs|[KO] 결국 스마트카가 컴퓨터의 모습이지만 그렇게 한다고 지금 생각합니다.[KO]
./segmented_character_voice/lecs/lecs_3_34.wav|lecs|[KO] 저희가 지금 전기자동차 이런 얘기를 하고 있지만 전기자동차는 이런 원리에서 자율자동차라는 단어들이 많이 나오고 있고요.[KO]
./segmented_character_voice/lecs/lecs_3_35.wav|lecs|[KO] 자율자동차를 위해서는 보면 더 이상 자동차가 기계, 엔진하고 이런 부분이 아니라 그게 모터로 바뀔 거예요.[KO]
./segmented_character_voice/lecs/lecs_3_36.wav|lecs|[KO] 저희가 하는 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_3_37.wav|lecs|[KO] 가스를 쓰는 전제 엔진에서 지금 현재 다시 전기로 가면 배터리를 쓰는 그냥 구동 부분으로 바뀔 거예요.[KO]
./segmented_character_voice/lecs/lecs_3_38.wav|lecs|[KO] 그 다음에 또 그걸 모든 걸 통제하고 하는 자율 부분에서는 슈퍼컴퓨터의 어떤 파워가 먼저 자동차 안으로 들어가는 형태의 모습.[KO]
./segmented_character_voice/lecs/lecs_3_39.wav|lecs|[KO] 그 다음에 저희가 이제 다른 모습으로 보면 로봇들에서 다 눈에가 되는 컴퓨터가 그 안에 들어가는 모습.[KO]
./segmented_character_voice/lecs/lecs_3_40.wav|lecs|[KO] 그래서 어떤 모습을 상상을 했으면 좋겠냐면 컴퓨터라는 부분은 저희가 쓰는 대부분 중요한 기기들에 다 컴퓨터가 연결돼서 다 컴퓨터가 자리 잡고 있다.[KO]
./segmented_character_voice/lecs/lecs_3_41.wav|lecs|[KO] 크고 작은 거에 그게 문제고요.[KO]
./segmented_character_voice/lecs/lecs_3_42.wav|lecs|[KO] 또 자리를 잡고 있을 뿐만 아니라 점점 그것들이 다 서로 연결돼서 연결돼서 쓰는 컴퓨터의 모습으로 진화하고 있다.[KO]
./segmented_character_voice/lecs/lecs_3_43.wav|lecs|[KO] 모든 컴퓨터들이 연결되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_44.wav|lecs|[KO] 그렇기 때문에 연결되는 모습을 가지고 저희가 어떤 말을 쓰면 인터넷 오브 싱스, 인터넷 오브 컴퓨터, 인터넷 오브 싱스 이런 단어들을 하는 트렌드가[KO]
./segmented_character_voice/lecs/lecs_3_45.wav|lecs|[KO] 컴퓨터가 점점 퍼져서 다양하게 되고 그것들이 하나로 연결되면서[KO]
./segmented_character_voice/lecs/lecs_3_46.wav|lecs|[KO] 또 안전하게 중앙에서 어떤 관리가 이뤄져서 사람들이 믿고 쓸 수 있는 형태로 진화하고 있는 모습을 상상해 주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_3_47.wav|lecs|[KO] 지금까지 현재 컴퓨터들이 어떤 형태의 변화를 가지고 오고 어떤 식으로 변화를 가져가서 어떤 모습으로 저희가 하는 생활 속에 점점 퍼뜨리는 컴퓨터의 모습으로 진화하고 있는지까지 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_3_48.wav|lecs|[KO] 컴퓨터들이 현재 새로운 모습이나 앞으로 더 새로운 컴퓨팅을 하거나 미래의 컴퓨팅에서는 여전히 앞으로 발전을 많이 해야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_3_49.wav|lecs|[KO] 그런 부분에서는 어떤 일들, 퓨처 오브 컴퓨터라고 하는 부분에서 잠깐 한번 벌어내주고 있는 일들을 한번 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_3_50.wav|lecs|[KO] 컴퓨터 쪽이 점점 더 빨라지고 하는 부분들이 지금 무한하게 될 수 있느냐 이런 부분에서 몇 가지 애로사항이 다시 생겼습니다.[KO]
./segmented_character_voice/lecs/lecs_3_51.wav|lecs|[KO] 컴퓨터 쪽에서는 이런 무허의 법칙이라는 걸 굉장히 많이 이용합니다.[KO]
./segmented_character_voice/lecs/lecs_3_52.wav|lecs|[KO] 무허의 법칙이 어떤 얘기였냐면 저희가 반도체라는 걸 만드는데 반도체라는 걸 저희가 매년 한 1, 2년 가면 성능을 두 배 하는 것도[KO]
./segmented_character_voice/lecs/lecs_3_53.wav|lecs|[KO] 한 2년 정도면 성능이 두 배 되는 반도체를 만들어서 컴퓨터의 성능을 두 배로 계속 업할 수 있었다 이런 식으로 됐고요.[KO]
./segmented_character_voice/lecs/lecs_3_54.wav|lecs|[KO] 그런데 문제는 이 무허의 법칙이 더 이상 잘 성립하지 않은 단계로 넘어갔습니다.[KO]
./segmented_character_voice/lecs/lecs_3_55.wav|lecs|[KO] 이유는 뭐냐면 더 작은 사이즈를 만드는 부분에서 요즘 텐나노라는 엄청나게 세밀한 사이즈로까지 내려가야 되는데[KO]
./segmented_character_voice/lecs/lecs_3_56.wav|lecs|[KO] 그 부분에서 기술적인 문제가 점점 생기고 있고요.[KO]
./segmented_character_voice/lecs/lecs_3_57.wav|lecs|[KO] 또 컴퓨터를 빠르게 하기 위해서는 이렇습니다. 0101을 다루는 이 단위를 빠르게 한다는 게 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_3_58.wav|lecs|[KO] 저희가 프리퀀시를 높인다, 주파수를 높인다, 그래서 클락을 높인다 이렇게 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_59.wav|lecs|[KO] 그런데 클락을 높이게 되면 저희가 하는 전자적인 원리로 보면 이게 노이즈라는 부분이 생길 거예요.[KO]
./segmented_character_voice/lecs/lecs_3_60.wav|lecs|[KO] 그 다음 열이 생깁니다. 이 부분을 해소하는 게 같이 필요해서 현재는 컴퓨터의 성능을 원하는 대로 옛날처럼 작게 작게 작게 만들 수 있는 부분에 한계가 와서[KO]
./segmented_character_voice/lecs/lecs_3_61.wav|lecs|[KO] 지금 새로운 미래형 컴퓨터를 만드는데 사람들의 고민을 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_62.wav|lecs|[KO] 이런 고민을 해결하기 위해서 현재 시도되고 있는 방법 중의 하나는[KO]
./segmented_character_voice/lecs/lecs_3_63.wav|lecs|[KO] 여전히 반도체를 가지고 반도체를 작게 만들기는 세밀하게 만들기는 어려워.[KO]
./segmented_character_voice/lecs/lecs_3_64.wav|lecs|[KO] 그런데 세밀하게 만들기 어렵기 때문에 한쪽에서 가는 방법은 3차원적인 구상으로 넘어가는 반도체들이 나타나고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_65.wav|lecs|[KO] 그러니까 원래는 평면으로 1층짜리 반도체였다면 1층짜리 반도체가 4층짜리 반도체로 변화하면서 소재를 바꾸면서 하는 이런 컴퓨터라면 훨씬 더 집적된 컴퓨터의 모습을 만들 수 있다.[KO]
./segmented_character_voice/lecs/lecs_3_66.wav|lecs|[KO] 이 흐름은 계속 진화의 형태로 지금 진행되고 있고요.[KO]
./segmented_character_voice/lecs/lecs_3_67.wav|lecs|[KO] 그럼 추가적으로 보겠습니다. 추가적으로 보면 아까 말씀드렸던 것처럼 컴퓨터가 많이 모아놓고 쓰니까 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_3_68.wav|lecs|[KO] 열이 난다고 말씀드렸습니다. 열이 나기 때문에 쿨링이 굉장히 중요한 집적한 컴퓨터를 만들 때 문제의식이 되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_69.wav|lecs|[KO] 그래서 극좋은 컴퓨터를 개념을 가져가지고 열이 나는 문제를 해결하면서 훨씬 더 미래형 컴퓨터를 만드는 시도도 한쪽에서 벌어지고 있고요.[KO]
./segmented_character_voice/lecs/lecs_3_70.wav|lecs|[KO] 그 다음에 재미있는 변화를 보는 게 사람의 두뇌에 가까운 컴퓨터, 브레인 컴퓨터라는 개념에서 뉴러모픽이라고 하는 기술적으로 부르고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_71.wav|lecs|[KO] 뉴러모픽이라는 기술적인 단어를 통해서 어떤 미래적인 어떤 내의 원리를 사용하는 컴퓨터를 만들어보자.[KO]
./segmented_character_voice/lecs/lecs_3_72.wav|lecs|[KO] 그걸 뭐죠? 저희가 하는 반도체 회로의 원리를 활용해서 만들어보자. 이런 컴퓨터 형태가 나타나고 있고요.[KO]
./segmented_character_voice/lecs/lecs_3_73.wav|lecs|[KO] 또 주변에 많이 나오는 단어가 가끔씩 나오는 퀀텀 컴퓨터, 퀀텀의 원리를 갖다가 퀀텀 시어리 원리를 통해서 그걸 컴퓨팅으로 하는[KO]
./segmented_character_voice/lecs/lecs_3_74.wav|lecs|[KO] 진짜의 미래형 컴퓨팅에 대한 기술 개발 경쟁도 요즘 활발하게 벌어지고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_75.wav|lecs|[KO] 이러한 것들이 사실은 앞으로 저희가 하는 컴퓨터가 정말로 인비저블 컴퓨터, 이런 모든 게 반성이 되면 사람들이 보면 컴퓨터의 모습을 보는 게 아니라 그냥 요즘 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_3_76.wav|lecs|[KO] 인공지능 스피커나 이런 것들 통해서 컴퓨터랑 대화하면 컴퓨터가 일을 해주지, 내가 컴퓨터를 직접 쳐야 되는 모습이나 터치하는 것에서도 터치를 안 하는 쪽으로 바뀌고요.[KO]
./segmented_character_voice/lecs/lecs_3_77.wav|lecs|[KO] 그럼 컴퓨터랑 대화하고 제가 미래 공상 영화에서 보던 형태의 컴퓨터의 모습들이 어떤 원리에 대해서 준비가 되고 있는지 한번 생각해 볼 필요가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_78.wav|lecs|[KO] 이런 식의 어떤 새로운 미래형 컴퓨터의 모습들이 현재 많이 만들어져서 준비되고 있고요.[KO]
./segmented_character_voice/lecs/lecs_3_79.wav|lecs|[KO] 이런 부분들을 갖다가 현재 있는 컴퓨터의 원리에 따라서 어떤 부분들을, 그림을 보시면 빨갛게 마크된 부분들을 많이 보실 수 있는데 이 마크된 부분들이 바로 변화되는 부분입니다.[KO]
./segmented_character_voice/lecs/lecs_3_80.wav|lecs|[KO] 어떤 건 굉장히 많은 지금의 컴퓨터의 원리를 완전히 뒤집어 버리는 수준도 있고 조금씩 조금씩 개선하는 것도 있습니다.[KO]
./segmented_character_voice/lecs/lecs_3_81.wav|lecs|[KO] 이런 식의 여러 가지 다양한 원리들에 의해서 미래의 컴퓨터의 모습들이 한쪽에서는 열심히 사이언티스트의 도움과 사이언티스트와 엔지니어리 합작품으로 만들어지고 있다.[KO]
./segmented_character_voice/lecs/lecs_3_82.wav|lecs|[KO] 이렇게 이해해 주시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_3_83.wav|lecs|[KO] 다시 정리해 보면 저희 컴퓨터 시스템에 대한 기본적으로 이 무엇이냐에 대해 살펴보았는데요.[KO]
./segmented_character_voice/lecs/lecs_3_84.wav|lecs|[KO] 한번 내용을 다시 한번 훑어보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_3_85.wav|lecs|[KO] 컴퓨터 시스템이라는 것은 어떤 역사를 가지고 만들어졌고 현재의 모던 컴퓨터가 뭔지 저희가 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_3_86.wav|lecs|[KO] 이 살펴보면서 CPU, 메모리, 스토리지, 네트워크라는 4대 요소를 컴퓨트 스토리지 네트워킹이라는 원리를 가지고 통합해서 다루고[KO]
./segmented_character_voice/lecs/lecs_3_87.wav|lecs|[KO] 그래서 그걸 사람들에게 원하는 컴퓨트 계산이죠.[KO]
./segmented_character_voice/lecs/lecs_3_88.wav|lecs|[KO] 그 다음에 저장, 스토리지, 네트워킹의 욕구를 채워주는 이것을 저희 컴퓨터 시스템에 정의해 보았습니다.[KO]
./segmented_character_voice/lecs/lecs_3_89.wav|lecs|[KO] 그리고 이 컴퓨터 시스템들이 다양한 형태로 존재한다는 것을 저희가 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_3_90.wav|lecs|[KO] 컴퓨터를 중심으로 하는 것, 그 다음에 스토리를 중심으로 하는 것, 네트워크를 중심으로 하는 것,[KO]
./segmented_character_voice/lecs/lecs_3_91.wav|lecs|[KO] 그리고 그것들이 다시 합쳐져서 융합된 형태로 만들어지는 약간 미래적으로 아주 편리하게 사람을 쓸 수 있는 모습을 하는 것을 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_3_92.wav|lecs|[KO] 그리고 이 컴퓨터들이 점점 퍼져나가면서 새로운 형태로 담기는,[KO]
./segmented_character_voice/lecs/lecs_3_93.wav|lecs|[KO] 저희가 하는 슈퍼컴 같은 부분이 결국은 차에 담긴다.[KO]
./segmented_character_voice/lecs/lecs_3_94.wav|lecs|[KO] 스마트카, 자율주행차가 그렇다는 모습도 한번 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_3_95.wav|lecs|[KO] 마지막으로 현재의 컴퓨터들의 시스템들 한계를 하기 위해서 새로운 미래지향적 노력들을 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_3_96.wav|lecs|[KO] 말씀드렸던 퀀텀 컴퓨팅, 유럼 오피스 컴퓨팅 같은 주제가 새롭게 이제 되어있으니까[KO]
./segmented_character_voice/lecs/lecs_3_97.wav|lecs|[KO] 그에 대해서 저희 먼, 아니 먼후대가 아니라 조만간 그에 대한 좋은 기대를 해봐도 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_3_98.wav|lecs|[KO] 이상으로 장의를 마치겠습니다. 고맙습니다.[KO]
./segmented_character_voice/lecs/lecs_5_0.wav|lecs|[KO] 또 다음으로 저희가 잠깐 짚어볼 수 있는 것은 CPU 중에서도 CPU가 CPU한테 어떤 CPU가 하나하나의 명령을 수행할 때 프로그램을 수행할 때 갖고 있는[KO]
./segmented_character_voice/lecs/lecs_5_1.wav|lecs|[KO] 그걸 인스트랙션이라고 인스트랙션 셋이라고 합니다. 인스트랙션이고요. 인스트랙션에 셋이 있습니다. 셋을 만들어서[KO]
./segmented_character_voice/lecs/lecs_5_2.wav|lecs|[KO] 이런 명령어를 하나씩, 이 명령을 들으면 이걸 수행해야 되고 이걸 하는 부분이 인스트랙션 셋이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_3.wav|lecs|[KO] 이 셋을 갖다가 다양한 어떤 명령어들마다 인스트랙션을 갖다가 별도로 만들어 놓고 그걸 가지고 활용해서[KO]
./segmented_character_voice/lecs/lecs_5_4.wav|lecs|[KO] 프로그램이 빨리 효율적으로 돌 수 있도록 해보자. 그러니까 다양한 명령어들을 다양하게 준비하는 거죠. 굉장히 많은 명령어를 준비해서[KO]
./segmented_character_voice/lecs/lecs_5_5.wav|lecs|[KO] 컴플렉스하다고 해서 컴플렉스하지만 세밀한 명령을 해서 구체적으로 어떤 하나를 얘기할 때는 그 명령을 얘기하면 전체를 이해하고 진행할 수 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_5_6.wav|lecs|[KO] 그걸 저희가 시스크, 컴플렉스 인스트랙션 셋 컴퓨팅이라고 해서 시스크 구조에 따른 어떤 CPU 이렇게 얘기하고요.[KO]
./segmented_character_voice/lecs/lecs_5_7.wav|lecs|[KO] 반대방법론이 있습니다. 인스트랙션 셋을 너무 복잡하게 하지 말고 저희가 알아두는 간단한 어떤 말들을 가지고 하면 좋지 않을까?[KO]
./segmented_character_voice/lecs/lecs_5_8.wav|lecs|[KO] 그러면서 그 부분들을 가지고 인스트랙션 셋이 기본적으로 간단한 명령어를 계속 반복하고 그 반복해서 연결해가지고[KO]
./segmented_character_voice/lecs/lecs_5_9.wav|lecs|[KO] 요거 요거 하고 이렇게 해서 하면서 명령어 자체는 간단하지만 그걸 빠르게 처리할 수 있게 만들어 놓고 갈 수 있잖아요.[KO]
./segmented_character_voice/lecs/lecs_5_10.wav|lecs|[KO] 그렇게 하는 방식을 써서 하는 리스크 방식. 그래서 리스크 방식 시스크 방식들이 계속 기술 경쟁을 하면서 지금 활용되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_11.wav|lecs|[KO] 저희가 알고 있는 저희가 인텔 x86이라고 부르는 어떤 CPU에서는 이 시스크 방식을 갖다가 추구해 왔었고요.[KO]
./segmented_character_voice/lecs/lecs_5_12.wav|lecs|[KO] 그 다음에 저희가 ARM이라고 하는 인베디드, 그 다음에 스마트폰에 많이 들어가는 이런 ARM 프로세서는 지금 현재 리스크 방식을 추구했었습니다.[KO]
./segmented_character_voice/lecs/lecs_5_13.wav|lecs|[KO] 그래서 그런 것들의 차이점을 한번 이해하시고 봐주시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_5_14.wav|lecs|[KO] 그럼 이제 다시 저희가 아까 다뤘던 OS 이슈로 한번 돌아가서 보겠습니다. OS 이슈로 돌아가면서 첫번째 그래도 CPU하고 OS가 어떻게 연결되는지[KO]
./segmented_character_voice/lecs/lecs_5_15.wav|lecs|[KO] 이제 그 관계를 파악하는 게 필요합니다. 이걸 파악해서 CPU란 애가 어떻게 지금 현재 컴퓨터 안에서 어떤 모습으로 존재하느냐,[KO]
./segmented_character_voice/lecs/lecs_5_16.wav|lecs|[KO] 모던 CPU가 어떻게 존재하느냐 이 부분에 아셔야 될 게 저희가 소켓, 그 다음에 코어, 그 다음에 스레드 이런 용어들을 씁니다.[KO]
./segmented_character_voice/lecs/lecs_5_17.wav|lecs|[KO] 그래서 그거를 그림에서 보시면 쉽게 느끼시겠지만 어떤 CPU가 이렇게 전체적으로 한 덩어리로 돼 가지고 하는 걸 갖다가 꽂을 수 있는 상태로 만드는 걸 저희가 소켓이라고 합니다.[KO]
./segmented_character_voice/lecs/lecs_5_18.wav|lecs|[KO] 이 소켓 안에서 실제로 한 소켓 안에는 두뇌의 역할을 하는 걸 갖다가 저희가 코어라고 부르는데 이 두뇌가 지금 사실은 하나가 들어가는 게 아니라 요즘은 멀티 코어라고 해서[KO]
./segmented_character_voice/lecs/lecs_5_19.wav|lecs|[KO] 그 다음 멀티 코어 또 매니 코어라고 해서 멀티는 여러 개 매니는 아주 많은 코어가 들어가는 형태로 기술 진화가 돼 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_20.wav|lecs|[KO] 그래서 많은 코어들이 되고 저희가 저번 이그젬플 그림에서는 두 개의 코어가 한 소켓에 있는 이그젬플을 저희가 보여드리고 있고요.[KO]
./segmented_character_voice/lecs/lecs_5_21.wav|lecs|[KO] 그래서 소켓하고 코어라는 개념을 이 피지컬한 어떤 CPU의 어떤 존재가 하는 그 형태에서 이해해 주시면 좋을 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_5_22.wav|lecs|[KO] 여기랑 연결해서 하나도 이해하셔야 할 게 어떤 개념이 있습니다. 이 스레드라는 용어를 쓰겠습니다.[KO]
./segmented_character_voice/lecs/lecs_5_23.wav|lecs|[KO] 스레드가 이제 저희가 얘기하는 어떤 프로세스하고 스레드를 연결해서 같이 생각을 하셔야 되는데 OS가 뭔가 일을 하면서 어떤 식으로 일을 하냐면[KO]
./segmented_character_voice/lecs/lecs_5_24.wav|lecs|[KO] 어떤 프로세스를 가지고 내가 일할 때 요일 요일 하는 것들을 다 나누는 거죠.[KO]
./segmented_character_voice/lecs/lecs_5_25.wav|lecs|[KO] 이걸 갖다가 프로세스가 나뉜다고 보이고요. 프로세스 나눈 부분이 실제로 이 하드웨어의 어떤 CPU하고 어떤 릴레이션십을 가지고 어떤 관계를 가지고 나눠지느냐.[KO]
./segmented_character_voice/lecs/lecs_5_26.wav|lecs|[KO] 맵핑되는 부분이죠. 그래서 말씀드리면 대부분 이제 코어가 지금 여러 개의 코어가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_27.wav|lecs|[KO] 그럼 보통 어떤 한 코어에다가 스레드를 갖다가 하나만 돌리느냐 아니면 두 개로 돌리느냐 이렇게 말씀을 드리겠죠.[KO]
./segmented_character_voice/lecs/lecs_5_28.wav|lecs|[KO] 그래서 보통 코어당 멀티 스레드로 돌립니다. 여러 개의 스레드가 돌면서 한 코어가 여러 가지 일들을 갖다가 나눠서 멀티적으로 멀티 스레딩 적으로 동작하게 하는 부분을[KO]
./segmented_character_voice/lecs/lecs_5_29.wav|lecs|[KO] 저희가 작업을 하도록 만들어 놓고 있고요. 이 부분하고 이제 하나 더 연결시키면 멀티 스레드라는 부분하고 저희가 이제 멀티 테스킹이라는 용어가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_30.wav|lecs|[KO] 멀티 테스킹은 여러 가지 일을 하도록 만들었다. 멀티 스레드는 그걸 하는 일들의 프로세스가 지금 결국은 요 일도 했다가 저 일도 했다가 간다 이렇게 왔다 갔다 하는 겁니다.[KO]
./segmented_character_voice/lecs/lecs_5_31.wav|lecs|[KO] 그래서 이 개념을 좀 더 전체적으로 한번 살펴보면서 정리를 해보겠습니다. 오퍼링 시스템이 기본적으로 저희가 시스템의 하드웨어를 갖다가 유저한테 연결해준 관점에서 일을 해줘야 되는데[KO]
./segmented_character_voice/lecs/lecs_5_32.wav|lecs|[KO] 일을 할 때 얘가 어떻게 일을 하냐면 최종적으로 프로세스라는 메인 단위로 하나씩 하나씩 일을 하고 있다. 일을 하고 있는데 일을 하고 있는 상태에서 세부적으로 보면 일을 하나만 하다가 끝내는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_5_33.wav|lecs|[KO] 몇 가지 스레드라는 개념을 일을 나눠서 이렇게 계속 연속적으로 하면서 효율적으로 할 수 있는 구조로 나눠놨다. 이걸 스레드라고 보시면 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_5_34.wav|lecs|[KO] 그래서 스레드가 동작할 때는 한 프로세스가 있으면 한 프로세스는 여러 개의 스레드를 갖다가 같이 엮어져서 동작하는 상태로 스레드가 되고 있고요.[KO]
./segmented_character_voice/lecs/lecs_5_35.wav|lecs|[KO] 이 스레드 사이를 연결해서 어떤 것을 카모나게 어떤 쉐어를 하면서 공통적인 일을 갖다가 요런 단계 요런 단계 가지고[KO]
./segmented_character_voice/lecs/lecs_5_36.wav|lecs|[KO] 효율적으로 차렷할 수 있는 구조를 하나씩 있습니다. 이거 멀티 스레드 부분하고 프로세스 관계를 설명을 드렸고요. 또 다른 하나를 이해하실 거면 하나는 A라는 프로세스가 있고 B라는 프로세스는 협력을 해서 일을 하는 것은 필요하지 않느냐 이렇게 생각하실 수 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_5_37.wav|lecs|[KO] 그럼 협력을 하기 위해서 프로세스끼리 어떤 대화를 하느냐 여러 가지 방법이 있습니다. 프로세스끼리 저희가 소켓 베이스를 통신을 하도록 해서 대화를 할 수 있는 방법도 저희가 쓰고요.[KO]
./segmented_character_voice/lecs/lecs_5_38.wav|lecs|[KO] 지금 파이프라고 해서 어떤 다른 방식으로 조금 뭐죠? 즉결적으로 이렇게 A 프로세스에서 나온 결과물이 B로 바로 결과물이 넘어가도록 하는 파이프를 만들어서 바로 유통되도록 하는 약간 소켓은 약간 대화를 하는 개념이나 파이프는 어떤 데이터가 바로 넘어가는 개념이라고 보시면 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_5_39.wav|lecs|[KO] 이런 식으로 해서 여러 개의 프로세스가 또 협력을 해서 일을 하도록 만드는 부분까지 숨어 있습니다. 그래서 OS에서 기본적으로 하는 원리를 보셨을 때[KO]
./segmented_character_voice/lecs/lecs_5_40.wav|lecs|[KO] 오프라인 시스템이 지금 결국은 어떤 일을 해야 되는데 일을 하는 부분에서는 지금 말씀드렸던 프로세스라는 어떤 개념을 해서 최상위 개념이고 그걸 갖다가 스레드라는 걸로 효율적으로 해서 스레드가 아까 하드웨어 갖고 있는 코어 부분하고[KO]
./segmented_character_voice/lecs/lecs_5_41.wav|lecs|[KO] 매칭을 해가지고 리소스를 갖다가 CPU라고 하는 리소스 아니면 컴퓨터 그거에 연결되어 있는 컴퓨터나 리소스 효율적으로 하는 구조를 가지고 활용되고 있다.[KO]
./segmented_character_voice/lecs/lecs_5_42.wav|lecs|[KO] 이 부분을 이해해 주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_5_43.wav|lecs|[KO] 그럼 이제 지금 봤던 부분에서 전체적으로 일하는 부분까지 전체적으로 컴퓨터라는 부분에서 OS에서 부분에서 CPU를 중심으로 해서 시스템적으로 돌고 그게 전체적인 스케줄의 프로세스를 관리해서 일을 하는 부분의 구조는[KO]
./segmented_character_voice/lecs/lecs_5_44.wav|lecs|[KO] 지금 그쪽에서 기본적으로 서포드됐다 그러면 아까 남아있던 이슈 저희가 원하는 데이터를 주거받는다든지 그 다음에 그걸 가지고 아까 저장을 하고 그 다음에 네트워킹하고 이런 부분들을 자기가 같이 해줘야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_5_45.wav|lecs|[KO] 그래서 이런 부분을 처리하기 위해서 기본적으로 하는 일들을 데이터를 갖다가 입력하고 출력한다 이런 말을 쓸 거에요. 저희가 IO라는 말을 씁니다.[KO]
./segmented_character_voice/lecs/lecs_5_46.wav|lecs|[KO] 그러니까 IO라는 말을 씁니다. IO의 어떤 특화된 버전이 이렇게 말합니다. IO라는 걸 하는데 IO를 하는 부분에서 이 밖으로 나갈 데이터 밖이랑 내가 대화할 데이터를 IO하면 그걸 확장하면 네트워킹이 이루어지고요.[KO]
./segmented_character_voice/lecs/lecs_5_47.wav|lecs|[KO] IO라는 개념을 통해 가지고 내가 스토리지 디스크라고 하는 스토리지랑 대화를 해서 그거 갖다가 주거받으면 스토리지 기능이 구성이 되고요.[KO]
./segmented_character_voice/lecs/lecs_5_48.wav|lecs|[KO] 그래서 지금 IO라는 말하고 스토리지라는 개념이 연결된다고 말씀을 드렸고요. IO라는 거랑 네트워킹도 연결되고 또 IO라는 개념하고 저희가 하는 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_5_49.wav|lecs|[KO] 키보드 마우스 비디오 화면 모니터 화면 이런 것들을 갖다 보는 것도 IO를 통해서 어떤 데이터를 갖다 보내는 이런 개념을 씁니다.[KO]
./segmented_character_voice/lecs/lecs_5_50.wav|lecs|[KO] 그래서 뉴스에서 기본적으로 이 IO라는 걸 갖다 중심으로 해서 저희가 얘기하는 사용자들이 인터페이스 하는 부분, 그 다음에 스토리지를 지원하는 부분, 네트워킹 하는 부분들을 다 같이 풀고 있다.[KO]
./segmented_character_voice/lecs/lecs_5_51.wav|lecs|[KO] 이렇게 말씀드리고 있고요. 이 부분을 가지고 정리하는 걸 보면은 IO 중심으로 그걸 찾아보면 그걸 좀 이해할 수 있게 되는 거죠. 전체 그림은.[KO]
./segmented_character_voice/lecs/lecs_5_52.wav|lecs|[KO] 그런데 그럼 IO를 효과적으로 해야 되고 여러 가지 IO들이 지금 현재 나름대로 코디네이션, 아까 유저 인터페이스 IO, 네트워킹 IO, 스토리지 IO가 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_5_53.wav|lecs|[KO] 이런 여러 개의 IO들을 나름대로 교통정리를 해주면서 사용할 수 있도록 먼저 어떤 소프트웨어적인 준비가 돼 있어야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_5_54.wav|lecs|[KO] 이 커널하고 연결돼서 그 내용이 준비되어 있습니다. 그래서 그걸 하는 개념으로 정리가 돼서 한 IO를 스케줄링하고 그걸 하면서 소프트웨어가 준비되고[KO]
./segmented_character_voice/lecs/lecs_5_55.wav|lecs|[KO] 그 소프트웨어가 그거를 차근차근해서 여러 가지로 나눠주는 층이 하나 준비되어 있다는 걸 구조적으로 이해해 주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_5_56.wav|lecs|[KO] 여기 IO의 기본적인 건 같고요. 그럼 이제 IO를 단결함을 넣어서 저희가 스토리지라고 하는 주제로 조금 더 넘어가고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_57.wav|lecs|[KO] 스토리지의 부분적으로 메모리가 겹치게 되는데요. 이거는 다시 말해서 일단은 스토리지라는 부분에서 저희가 리눅스라는 거랑 스토리지라고 얘기하면은 컴퓨터에서 스토리지한다면[KO]
./segmented_character_voice/lecs/lecs_5_58.wav|lecs|[KO] 어떤 파일이 내가 지금 현재 저장이 된다. 이게 저희가 가장 많이 생각하는 어떤 스토리지 개념이죠. 그래서 이걸 파일을 저장할 수 있는 상태로[KO]
./segmented_character_voice/lecs/lecs_5_59.wav|lecs|[KO] 서포트 되는 이 저장 방법을 저희가 파일 스토리지라고 부릅니다. 내가 지금 이 파일을 이런 네임에 있는 파일이 있으니까 이거는 여기에 저장됐다는 걸[KO]
./segmented_character_voice/lecs/lecs_5_60.wav|lecs|[KO] 기억을 해가지고 거기에 그다음에 이거의 데이터는 여기 하드 디스크에 여기 숨어있고 요즘 SSD 여기에 숨어있고 이걸 다 정리해서 그걸 찾아서 뽑아줄 수 있게 하는[KO]
./segmented_character_voice/lecs/lecs_5_61.wav|lecs|[KO] 그런 구조적으로 하는 게 파일 스토리지 모델입니다. 그런데 스토리지에서는 파일 스토리지 개념만 있는 게 아니라 다른 형태의 스토리지를 사용하는 방법이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_62.wav|lecs|[KO] 저희가 블록 스토리지라는 어떤 개념으로 쓰이는 것도 있고 오브젝트 스토리라는 개념으로 쓰이는 게 있습니다. 그래서 파일 스토리지, 블록 스토리지, 오브젝트 스토리지 이런 다양한 어떤 개념의 스토리지 개념이 있고요.[KO]
./segmented_character_voice/lecs/lecs_5_63.wav|lecs|[KO] 이것들에서 조금 구분해서 한번 보겠습니다. 파일 스토리지는 말씀 드렸던 우리가 일반적으로 알고 있는 스토리지 개념이고요. 블록 스토리지라는 것은 조금 다릅니다. 블록 스토리지는[KO]
./segmented_character_voice/lecs/lecs_5_64.wav|lecs|[KO] 내가 이런 부분의 스토리지 스페이스를 어떤 작업하기 위해서 내가 뭐지? 그러니까 파일을 하나하나 저장을 하는 게 아니라 내가 어떤 공간에서 이런 새로운 내가 원하는 어떤 새로운 작업을 하고 싶어.[KO]
./segmented_character_voice/lecs/lecs_5_65.wav|lecs|[KO] 그래서 이 디스크에 대한 저장 능력을 나한테 한 덩어리로 이 덩어리로 좀 줬으면 좋겠어. 이렇게 말하는 모드입니다.[KO]
./segmented_character_voice/lecs/lecs_5_66.wav|lecs|[KO] 그래서 그걸 쓰는 방법은 그래서 블록에 스토리지를 빌려 놓고 자기가 원하는 대로 스토리지 저장을 이렇게 알아서 저장하고 활용하는 이런 식으로 서포트하는 스토리지 모델입니다.[KO]
./segmented_character_voice/lecs/lecs_5_67.wav|lecs|[KO] 이걸 블록 스토리지라고 합니다. 그리고 요즘 가장 가깝다고 하는 스토리지 모델이 또 하나 있습니다. 오브젝트 스토리지입니다.[KO]
./segmented_character_voice/lecs/lecs_5_68.wav|lecs|[KO] 오브젝트 스토리지라는 것은 저희가 얘기하는 파일에서는 이 페일을 저장한다 이런 개념이라 그걸 좀 더 일반화해서 파일이 어디 있다는 것을 갖다가 기억하고 그렇게 저장하는 시스템이 파일 저장이었다면[KO]
./segmented_character_voice/lecs/lecs_5_69.wav|lecs|[KO] 오브젝트 저장에서는 개념이 조금 달라집니다. 어떻게 달라지냐면 기본적으로 저희가 생각하는 어떤 스토리지를 해야 되는데 이 스토리지는 갖다가 네가 알아서 어떤 오브젝트라는 것을 생각해서 저장을 해주고 내가 찾을 때 그냥 오브젝트를 돌려줘.[KO]
./segmented_character_voice/lecs/lecs_5_70.wav|lecs|[KO] 기본적인 인터페이스는 파일이 어디 있다는 것을 저희가 기억을 해서 파일을 쫓아다니는 어떤 개념에서 생각을 했다면 오브젝트를 생각할 때는 기본적으로 저장장치에 담아둔 것을 맡기고요.[KO]
./segmented_character_voice/lecs/lecs_5_71.wav|lecs|[KO] 저는 이 오브젝트 아까 맡겼던 오브젝트를 그냥 다시 줘. 저희가 비유할 때는 발레 파킹할 때 차를 맡기고 발레 파킹할 때 키를 받아가지고 다시 차를 돌려받는 개념처럼 증표만 내고 그런 개념을 하는 스토리지 모델을 오브젝트 스토리지입니다.[KO]
./segmented_character_voice/lecs/lecs_5_72.wav|lecs|[KO] 그래서 이 오브젝트 스토리지가 굉장히 요즘 사용자가 스토리지를 편리하게 자기가 원하는 대로 그냥 이거 맡았다가 다시 돌려줘 이렇게 생각하는 게 가장 간단한 모델이 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_5_73.wav|lecs|[KO] 파일처럼 어디 있었다는 것을 기억을 하지 않아도 되기 때문에 그런 식으로 모델로 많이 진행되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_74.wav|lecs|[KO] 그래서 오브젝트 스토리지, 블록 스토리지, 파일 스토리지 안에 다양한 스토리지 모델을 조금 이해를 해주시면 좋을 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_5_75.wav|lecs|[KO] 이런 실제로 스토리지 하는 부분에서 다시 또 중요한 요소가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_5_76.wav|lecs|[KO] 스토리지의 어떤 미디엄이죠. 미디어라는 거죠.[KO]
./segmented_character_voice/lecs/lecs_5_77.wav|lecs|[KO] 저희가 많이 얘기하는 하드 디스크, 그 다음에 요즘 얘기하는 플래시로 만들어내는 솔리드 스테이트 드라이브에 가죠.[KO]
./segmented_character_voice/lecs/lecs_5_78.wav|lecs|[KO] 그 다음에 실제 아주 대용량으로 하고 오랜 기간을 보장할 때는 여전히 아직 테이프 드라이브가 사용됩니다.[KO]
./segmented_character_voice/lecs/lecs_5_79.wav|lecs|[KO] 테이프 드라이버, 그 다음에 하드 디스크, 솔리드 디스크 이런 식으로 해서 그런데 그것들이 어떤 나름대로 하이라키를 갖고 있다.[KO]
./segmented_character_voice/lecs/lecs_5_80.wav|lecs|[KO] 스토리지 하이라키라고 적용합니다. 스토리지가 용량하고 가격의 어떤 트레이드풀을 갖고 하이라키를 갖고 있는데[KO]
./segmented_character_voice/lecs/lecs_5_81.wav|lecs|[KO] 이 하이라키 부분을 활용하면서 이해를 해주셨으면 좋겠다. 여기는 말씀드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_5_82.wav|lecs|[KO] 그래서 이 부분하고요. 한 가지 추가적으로 스토리지에서 어떤 부분을 하나 더 짚고 넘어갔으면 좋겠냐고 말씀을 드리냐면[KO]
./segmented_character_voice/lecs/lecs_5_83.wav|lecs|[KO] 스토리지 부분에서 요즘 빨라지는 여러 가지 스토리가 있는데 금방 말씀을 드렸던 것들이[KO]
./segmented_character_voice/lecs/lecs_5_84.wav|lecs|[KO] 파일 스토리지, 블록 스토리지 이런 것들을 리눅스에서 어떻게 처리하는지 부분에 대해서 기술적으로 소프트웨어가 어떻게 되는지 구성되는[KO]
./segmented_character_voice/lecs/lecs_5_85.wav|lecs|[KO] 그러니까 리눅스의 스토리지 스택이라고 하는 소프트웨어가 얘를 처리하기 위해서 어떤 기본 구성을 갖고 있는지를 이해하는 부분에[KO]
./segmented_character_voice/lecs/lecs_5_86.wav|lecs|[KO] 그것도 조금 살펴보면서 같이 한번 살펴보시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_5_87.wav|lecs|[KO] 이 정도로 말씀을 드릴 거예요. 스토리지 부분은.[KO]
./segmented_character_voice/lecs/lecs_5_88.wav|lecs|[KO] 그 다음에 다음 주제가 네트워킹이라는 주제입니다.[KO]
./segmented_character_voice/lecs/lecs_5_89.wav|lecs|[KO] 네트워킹 주제에서도 기본적으로 어떤 컴퓨터 시스템에서 밖으로 있는 저희가 데이터를 밖이랑 주고받아서 하자.[KO]
./segmented_character_voice/lecs/lecs_5_90.wav|lecs|[KO] 주고받는다는 부분에서 결국은 저희가 인터넷에 접속을 해서 데이터를 마음대로 해서 세상에 있는 컴퓨터들을 다 연결하는 개념에 의해서[KO]
./segmented_character_voice/lecs/lecs_5_91.wav|lecs|[KO] 네트워킹 개념이 굉장히 중요해졌습니다.[KO]
./segmented_character_voice/lecs/lecs_5_92.wav|lecs|[KO] 이 개념을 정리할 때 커널이 기본적으로 네트워킹을 해서 사용자는 커널에서 네트워킹을 부탁하는 방식으로 해서[KO]
./segmented_character_voice/lecs/lecs_5_93.wav|lecs|[KO] 부탁을 하면 그대로 알아서 해주는 방식.[KO]
./segmented_character_voice/lecs/lecs_5_94.wav|lecs|[KO] 그래서 커널한테 어떻게 부탁하냐면 커널한테 어떤 소켓이라는 메디엄을 만들어 놓고[KO]
./segmented_character_voice/lecs/lecs_5_95.wav|lecs|[KO] 어플리케이션이 어플리케이션만 나름 소켓을 만들어 놓고 소켓을 통해서 커널한테 부탁을 합니다.[KO]
./segmented_character_voice/lecs/lecs_5_96.wav|lecs|[KO] 그렇게 하면 커널이 이걸 갖다가 부탁받은 것에 대해서 대응을 해주는 이런 논리를 부르고 있어서[KO]
./segmented_character_voice/lecs/lecs_5_97.wav|lecs|[KO] 저희가 이걸 전체로 부를 때 리눅스 커널 네트워킹의 원리로 결국은 소켓을 활용하는 소켓 APR을 활용하는[KO]
./segmented_character_voice/lecs/lecs_5_98.wav|lecs|[KO] 구체적으로 말씀드리면 이런 방식으로 하는 어떤 네트워킹을 실제로 활용하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_6_0.wav|lecs|[KO] 이 안쪽에서 보면 이 네트워킹 부분에서는 저희가 아주 세부적으로 들어가면 굉장히 어렵기 때문에 조금 원리적으로 말씀을 드리면[KO]
./segmented_character_voice/lecs/lecs_6_1.wav|lecs|[KO] 실제로 저희가 많이 쓰는 어떤 컴퓨터 입장에서는 이 네트워크를 하기 위해서 지금 인터페이스 카드라는 게 있고[KO]
./segmented_character_voice/lecs/lecs_6_2.wav|lecs|[KO] 거기다 네트워크를 플러그인해 보는 경험 분들이 있으실 겁니다.[KO]
./segmented_character_voice/lecs/lecs_6_3.wav|lecs|[KO] 그래서 그 네트워크 인터페이스 카드 부분에 대해서 정리하면 이게 저희가 하는 이계층, 링크계층에[KO]
./segmented_character_voice/lecs/lecs_6_4.wav|lecs|[KO] 또 정확하게 말하면 이더넷 계층의 어떤 네트워크 연결을 하는 부분에서 저희가 하는 패켓을 실제로 받아내고요.[KO]
./segmented_character_voice/lecs/lecs_6_5.wav|lecs|[KO] 이 패켓을 받은 거에 대해서 이게 지금 현재 어떤 쪽에서 왔다는 걸 서로 대화를 해서 정리해야 되죠.[KO]
./segmented_character_voice/lecs/lecs_6_6.wav|lecs|[KO] 그러니까 어디서 이 패켓이 온 건지 그런 분석하는 거, 실제로 받은 겁니다.[KO]
./segmented_character_voice/lecs/lecs_6_7.wav|lecs|[KO] 지금 2계층에서 받으면 3계층에서는 어디서 온 패켓이지, 아까 그걸 보고 주소를 본다는 개념에서[KO]
./segmented_character_voice/lecs/lecs_6_8.wav|lecs|[KO] 주소는 저희가 얘기하는 인터넷의 주소, IP 주소를 보고 이 IP 주소를 보고 그걸 패켓을 갖다가 어디서 온 패켓이고[KO]
./segmented_character_voice/lecs/lecs_6_9.wav|lecs|[KO] 그 다음에 어디를 찾아가는, 지금 나한테 왔는데 내 중에서 여러 가지 어플리케이션이 돌고 있는데 그 중에서 어떤 어플리케이션을 찾아가는 건지[KO]
./segmented_character_voice/lecs/lecs_6_10.wav|lecs|[KO] 그 부분을 연결하는 매개체가 있습니다. 아까 제가 소켓이라는 걸 말씀을 드렸는데 소켓이라는 것은 기본적으로 포트라는 개념을 가지고 있고요.[KO]
./segmented_character_voice/lecs/lecs_6_11.wav|lecs|[KO] 그래서 어떤 주소에서 어떤 주소로, 지금 나한테 왔죠. 어떤 소스 주소에서 나한테 지금 어떤 주소로 왔고요.[KO]
./segmented_character_voice/lecs/lecs_6_12.wav|lecs|[KO] 그 다음에 그쪽에서 본인은 어떤 어플리케이션을 나한테 보냈겠죠. 그럼 그쪽에서 포트 번호, 그 다음에 내가 갖고 있는 포트 번호,[KO]
./segmented_character_voice/lecs/lecs_6_13.wav|lecs|[KO] 그 다음에 보내는 데이터 전송하는 방법에서 저희가 TCP, UDP라고 하는 TCP라고 하는 릴라브라던 전송 방식,[KO]
./segmented_character_voice/lecs/lecs_6_14.wav|lecs|[KO] 그 다음에 UDP라고 하는 릴라브라던 전송 방식, 이 두 가지를 사용할 수 있습니다. 그래서 이 둘 중에 하나.[KO]
./segmented_character_voice/lecs/lecs_6_15.wav|lecs|[KO] 그래서 소스 IP 어드레스, 데스티니션 IP 어드레스, 그 다음에 소트 포트 넘버, 데스티니션 포트 넘버, 그 다음에 저희가 프로토컬[KO]
./segmented_character_voice/lecs/lecs_6_16.wav|lecs|[KO] 메소드, 그러니까 TCP냐 UDP냐 이 정도 구분하는 방식을 합쳐서 그걸 가지고 전체가 연결되면 저희가 어떤 데이터를 받아 가지고 실제로[KO]
./segmented_character_voice/lecs/lecs_6_17.wav|lecs|[KO] 어플리케이션에 전달할 수 있게 됩니다. 한번 다시 정리해 보겠습니다. 저희가 실제로 패켓을 갖다가 이더넷 패켓을 받은 다음에[KO]
./segmented_character_voice/lecs/lecs_6_18.wav|lecs|[KO] 그걸 IP라는 개념에서 어떤 주소 개념으로 확인을 하고 그 다음에 어플리케이션 전달하기 위해서 이 포트 번호를 통해서 소켓에 연결된 포트 넘버를[KO]
./segmented_character_voice/lecs/lecs_6_19.wav|lecs|[KO] 해서 어플리케이션을 전달하는 역할을 하면 결국은 네트워킹을 해서 저희가 사용자의 프로그램이나 아니면 시스템의 프로그램들이 그거를 활용해서[KO]
./segmented_character_voice/lecs/lecs_6_20.wav|lecs|[KO] 네트워킹을 활용할 수 있게 만들어준다. 이렇게 정리가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_6_21.wav|lecs|[KO] 대충 전체적인 부분이 어떤 리눅스 커널의 여러가지 모드들에 대해서 다 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_6_22.wav|lecs|[KO] 지금 이제 리눅스 커널의 컴퓨터 쪽에서 컴퓨터들이 저희가 활용할 때 보면 가장 많이 저희가 느끼는 게 뭐죠? 컴퓨터를 킨다.[KO]
./segmented_character_voice/lecs/lecs_6_23.wav|lecs|[KO] 그럼 컴퓨터 켜 가지고 어떻게 해서 지금 일할 준비가 되느냐. 그죠? 이거에 대해서 한번 짚고 넘어갈 필요가 있습니다. 그래서 컴퓨터를[KO]
./segmented_character_voice/lecs/lecs_6_24.wav|lecs|[KO] 키는 부분에서 어떤 식으로 컴퓨터가 켜지는지에 대해서 조금 한번 정리를 해보겠습니다. 리눅스를 기준으로.[KO]
./segmented_character_voice/lecs/lecs_6_25.wav|lecs|[KO] 그럼 저희가 어떤 6단계를 거쳐서 컴퓨터가 켜진다고 저희가 말하고 있고요. 컴퓨터가 켜지면 맨 처음에 저희가 이제 많이 경험을 해보셨겠지만 컴퓨터를[KO]
./segmented_character_voice/lecs/lecs_6_26.wav|lecs|[KO] 키면 원래 바이오스라는 부분에서 기본적으로 컴퓨터 켜면 먼저 동작을 하고요. 바이오스는 Basic Input Output System이라고[KO]
./segmented_character_voice/lecs/lecs_6_27.wav|lecs|[KO] 부릅니다. 그래서 바이오스라는 부분에서 컴퓨터가 켜지면 그걸 어떻게 파워가 켜졌어요? 어떤 일을 해야 될지 하는 일을 열심히 합니다.[KO]
./segmented_character_voice/lecs/lecs_6_28.wav|lecs|[KO] 그리고 나서 어떤 일을 하냐면 저희가 마스터 부트 레코드라고 지금부터 바이오스가 동작을 하면은 켜야 되는데 켜는 걸 어떻게 하지?[KO]
./segmented_character_voice/lecs/lecs_6_29.wav|lecs|[KO] 어떤 마스터 부트 레코드라는 어떤 부분인데 그걸 찾아가지고 그거 내용을 갖다가 그 안에 있는[KO]
./segmented_character_voice/lecs/lecs_6_30.wav|lecs|[KO] 그랜드 유니파이드 부트로드라는 그룹이라고 grub 이라고 부르는 어떤 내용을 수행을 해주게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_6_31.wav|lecs|[KO] 다시 정리하면 바이오스가 어떤 레코드를 찾고 mbr 레코드를 찾고 mbr 레코드에 있는 실제로 어떤 프로그램이라고 하는 grub 이라는[KO]
./segmented_character_voice/lecs/lecs_6_32.wav|lecs|[KO] 프로그램 그룹이라는 프로그램을 수행을 해주면 그러면 아까 os 부분의 핵심적인 역할의 부분이 뭐였죠?[KO]
./segmented_character_voice/lecs/lecs_6_33.wav|lecs|[KO] 핵심, 커널이죠. 커널이 기본적으로 이 그룹을 통해서 수행이 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_6_34.wav|lecs|[KO] 그럼 여기서 한 가지만 좀 짚어봐야겠어요. 그룹이라는 게 그럼 내가 지금 컴퓨터를 켤 때 a라는 os를 올릴 수도 있고 보면은 b라는 os도 올리고 왔다 갔다 하는[KO]
./segmented_character_voice/lecs/lecs_6_35.wav|lecs|[KO] os를 하는 방식도 가능한데 그건 어떻게 되느냐? 지금 말씀했던 어떤 그룹 부분에서 여러가지 멀티 os를 서포트할 수 있게 되면 다양한 os로 부트를 시킬 수 있는[KO]
./segmented_character_voice/lecs/lecs_6_36.wav|lecs|[KO] 방법을 가질 수 있겠죠. 그렇게 지금 고려가 되어있습니다. 그럼 다시 돌아가겠습니다.[KO]
./segmented_character_voice/lecs/lecs_6_37.wav|lecs|[KO] 바이오스, mbr, 마스터부트 레코드, 그 다음은 그룹, 그죠? 4번까지 갈 거에요. 그럼 커널까지 해서 네 번째 스테이지 같습니다.[KO]
./segmented_character_voice/lecs/lecs_6_38.wav|lecs|[KO] 남아있는 스테이지는 커널이 기본적으로 동작하면은 기본적으로 이제 아까 말씀드렸던 시스템을 돌리고 모든 것들이 다 할 수 있는, 일을 할 수 있는 기본적인 상태가 된 거죠.[KO]
./segmented_character_voice/lecs/lecs_6_39.wav|lecs|[KO] 그럼 기본적인 상태에서 지금부터 하나하나 시스템에 돌리는 편의 프로그램들을 갖다가 순서대로 이제 돌려야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_6_40.wav|lecs|[KO] 그걸 갖다가 저희가 이니트라는 과정을 통해 있는데 이니트라는 관계를 갖다가 어떤 모드로 이니트를 할 거냐?[KO]
./segmented_character_voice/lecs/lecs_6_41.wav|lecs|[KO] 어떤 모드라는 말이 이렇게 되어있습니다. 모드가 있습니다. 이니트 레벨에서 내가 지금 뭐지? 한 명이 쓰는 싱글 유저 모드로 이니트를 할 수도 있고요.[KO]
./segmented_character_voice/lecs/lecs_6_42.wav|lecs|[KO] 여러 명이 같이 있는 멀티 유저 모드로 이니트 할 수도 있고요. 그래서 정상적인 모드로 이니트 할 수 있고 여러가지 모드로 이니트 할 수 있는 넘버가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_6_43.wav|lecs|[KO] 0번, 1번, 2번 해가지고 여러가지 이니트 프로그램을 선택을 해서 그래서 어떤 레벨로 돌린다. 그래서 이니트라는 프로그램을 생각해가지고 어떤 레벨,[KO]
./segmented_character_voice/lecs/lecs_6_44.wav|lecs|[KO] 지금 아까 말씀드렸던 런 레벨 제로는 기본적으로 뭐죠? 시스템을 다운시켜서 이제 그냥 정지시켜라 이런식의 말을 하는 거고 런 레벨 1로 가라 그러면[KO]
./segmented_character_voice/lecs/lecs_6_45.wav|lecs|[KO] 싱글 유저가 쓰는 상태로 만들어서 뭔가 디버깅 할 때 쓰자. 아니면 보통 저희가 많이 쓰는 2번, 3번으로 가면 정상적인 모드에서 멀티 유저가 쓰는 모드로 가자.[KO]
./segmented_character_voice/lecs/lecs_6_46.wav|lecs|[KO] 이렇게 되는 여러가지 다양한 레벨로 이니트에서 가게 됩니다. 다시 정리해 보겠습니다. 바이오스, MGR, 그룹, 커널, 이니트, 런 레벨 이런 6스테이지를 가지고 부트가 완성이 되고[KO]
./segmented_character_voice/lecs/lecs_6_47.wav|lecs|[KO] 저희가 컴퓨터를 원하는 모드로 만들어내서 사용할 준비가 되는 걸로 완성이 되는게 저희가 얘기하는 컴퓨터 시스템의 동작언립니다.[KO]
./segmented_character_voice/lecs/lecs_6_48.wav|lecs|[KO] 지금과 같이 이제 전체적으로 컴퓨터 시스템에 기본적으로 돌아가는 오퍼레이징 중심으로 컴퓨터 시스템들이 어떻게 동작할 수 있게 만드는지, 실제로 유저가 활용할 수 있게 만드는 핵심인 오퍼링 시스템을 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_6_49.wav|lecs|[KO] 오퍼링 시스템에서 커널이라고 하는 핵심 엔터티를 저희가 살펴봤고, 커널이라는 핵심 엔터티가 여러가지 일들, 시스템을 관리해주고, 지금 말씀드렸던 아이오를 관리하면서 스토리지, 메모리, 그 다음에 유저 인터페이스 부분을 장결해주는 어떤 핵심 역할을 하고 그 위에서 사용자가 쓰게 해준다.[KO]
./segmented_character_voice/lecs/lecs_6_50.wav|lecs|[KO] 그리고 저희가 부트플러시를 통해서 실제로 컴퓨터가 여러분들이 사용하기 위해서 어떻게 준비가 되는지까지도 한번 확인해 봤습니다.[KO]
./segmented_character_voice/lecs/lecs_6_51.wav|lecs|[KO] 그런 부분들을 전체적으로 이해하면 컴퓨터 시스템 하나를 쓸 준비는 된 것이다. 여기까지는 저희가 다룬게 챕터2 였습니다.[KO]
./segmented_character_voice/lecs/lecs_6_52.wav|lecs|[KO] 이상으로 저희 챕터2 컴퓨터 시스템, 오퍼링 시스템 부분을 마치도록 하겠습니다. 감사합니다.[KO]
./segmented_character_voice/lecs/lecs_7_0.wav|lecs|[KO] 안녕하세요 컴퓨터 시스템, 가상화 및 컨테이너 주제의 챕터 3 강의를 시작하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_7_1.wav|lecs|[KO] 지금 저희가 다룰 내용은 이전에 봤던 컴퓨터 시스템이 무엇인가,[KO]
./segmented_character_voice/lecs/lecs_7_2.wav|lecs|[KO] 그 다음에 컴퓨터 시스템을 활용해서 오퍼레이팅 시스템을 통해서 컴퓨터 시스템을 활용할 수 있는 방법을 알아보는 것을 이어서[KO]
./segmented_character_voice/lecs/lecs_7_3.wav|lecs|[KO] 컴퓨터 시스템을 여러 개의 컴퓨터로 나눠서 쓸 수 있는 가상화라는 기법,[KO]
./segmented_character_voice/lecs/lecs_7_4.wav|lecs|[KO] 그 다음에 컴퓨터 안에서 저희가 하는 프로그램들, 어플리케이션들을 컨테이너를 어떤 방법으로 담아서[KO]
./segmented_character_voice/lecs/lecs_7_5.wav|lecs|[KO] 효율적으로 쉽게 재사용할 수 있게 하는 그런 방식, 이 두 가지 주제를 가지고[KO]
./segmented_character_voice/lecs/lecs_7_6.wav|lecs|[KO] 버추얼라이제이션 앤 컨테이너 지원, 이런 주제로 지금 저희가 문제를 다뤄보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_7_7.wav|lecs|[KO] 그럼 전체로 바라볼 부분에서 제가 금방 말씀드렸듯이 원래의 오리지널 컴퓨터가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_8.wav|lecs|[KO] 그 다음에 저희가 가상화를 해서 만들어내는 컴퓨터가 있고요.[KO]
./segmented_character_voice/lecs/lecs_7_9.wav|lecs|[KO] 그 다음에 그걸 가지고 어플리케이션을 사용할 수 있게 하는 이 세 가지 주제가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_10.wav|lecs|[KO] 그래서 이걸 저희가 단어를 이런 단어로 뽑아봤습니다.[KO]
./segmented_character_voice/lecs/lecs_7_11.wav|lecs|[KO] PVC라고 부르겠습니다. 피는 피지컬한 물리적인 어떤 컴퓨터.[KO]
./segmented_character_voice/lecs/lecs_7_12.wav|lecs|[KO] 그래서 저희가 베어메탈, 다른 말로는 깡통이라고 부르기도 하는데[KO]
./segmented_character_voice/lecs/lecs_7_13.wav|lecs|[KO] 베어메탈, 피지컬한 모습을 가지고 있는 피를 상징하는 피,[KO]
./segmented_character_voice/lecs/lecs_7_14.wav|lecs|[KO] 그 다음에 가상화를 해서 만들어내는 가상적인 머신,[KO]
./segmented_character_voice/lecs/lecs_7_15.wav|lecs|[KO] 가상적인 머신에 대한 상징하는 버추얼라이제이션 V,[KO]
./segmented_character_voice/lecs/lecs_7_16.wav|lecs|[KO] 그 다음에 컨테이너를 상징하는 C.[KO]
./segmented_character_voice/lecs/lecs_7_17.wav|lecs|[KO] 그래서 컨테이너라고 하는 어떤 새로운 포맷을 저희가 설명을 드릴 건데[KO]
./segmented_character_voice/lecs/lecs_7_18.wav|lecs|[KO] 이걸 하는 세 가지, 이 세 가지를 가지고 전체적인 컴퓨터 시스템을[KO]
./segmented_character_voice/lecs/lecs_7_19.wav|lecs|[KO] 먼저 새롭게 쓰는 현대적으로 쓰는 방법에 대해서 저희가 이해하는 시간을 갖도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_7_20.wav|lecs|[KO] 여기서 중요한 부분이 어떤 내용이냐면 이 세 가지 주제가 어떤 식의 연결을 가지고 있고[KO]
./segmented_character_voice/lecs/lecs_7_21.wav|lecs|[KO] 어떤 식의 컴퓨터를 사용할 수 있는지에 대해서 이해하는 부분이라고요.[KO]
./segmented_character_voice/lecs/lecs_7_22.wav|lecs|[KO] 첫 번째 일단은 가상화 주제 부분을 먼저 커버를 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_7_23.wav|lecs|[KO] 가상화주는 지금 보여드리는 그림처럼 보면 실제 어떤 피지컬한 어떤 컴퓨터가 있으면[KO]
./segmented_character_voice/lecs/lecs_7_24.wav|lecs|[KO] 이 가상화라는 부분을 가지고 그 컴퓨터를 여러 개의 가상적인 머신으로 나눌 수 있다.[KO]
./segmented_character_voice/lecs/lecs_7_25.wav|lecs|[KO] 저희가 어떤 서버 한 대의 경우는 한 20대 정도의 가상 머신으로 나눌 수 있다.[KO]
./segmented_character_voice/lecs/lecs_7_26.wav|lecs|[KO] 이 정도의 그냥 일반적인 얘기를 하지만 많은 숫자,[KO]
./segmented_character_voice/lecs/lecs_7_27.wav|lecs|[KO] 그러니까 내가 어떤 작은 집으로 나눌 거냐에 따라서 사실은 집의 숫자,[KO]
./segmented_character_voice/lecs/lecs_7_28.wav|lecs|[KO] 그러니까 가상적으로 지울 수 있는 집이라고 하는 버츄얼 머신의 숫자는 더 커집니다.[KO]
./segmented_character_voice/lecs/lecs_7_29.wav|lecs|[KO] 그래서 그 얘기는 말씀을 드리고요.[KO]
./segmented_character_voice/lecs/lecs_7_30.wav|lecs|[KO] 그 다음 단계에서 저희가 하는 컨테이너라는 부분이 그걸 이용해서[KO]
./segmented_character_voice/lecs/lecs_7_31.wav|lecs|[KO] 가상적인 집 쪽에도 컨테이너를 집어넣을 수 있고 원래 오리지널 집에서도[KO]
./segmented_character_voice/lecs/lecs_7_32.wav|lecs|[KO] 오리지널 머신에도 넣을 수 있고 이런 컨테이너라 이제 그 위에 어플리케이션 올라가는 이런 전체적인 구조입니다.[KO]
./segmented_character_voice/lecs/lecs_7_33.wav|lecs|[KO] 그래서 이 전체 구조 하에서 일단은 틀을 놓고 먼저 버츄얼 머신을 하는 가상화 기법에 대해서 상세히 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_7_34.wav|lecs|[KO] 일단 버츄얼 머신이 무엇이냐, 실제로 똑같은 집입니다.[KO]
./segmented_character_voice/lecs/lecs_7_35.wav|lecs|[KO] 그러니까 외견상으로 본다는 것, 외견이라는 것은 저희가 밖을 봤을 때는 컴퓨터 안에 숨어 있어서[KO]
./segmented_character_voice/lecs/lecs_7_36.wav|lecs|[KO] 저희가 직접적으로 볼 수는 없지만 컴퓨터라는 것을 저희가 접속할 때 쓰는 어떤 네트워크 베이스로 접속하게 되면[KO]
./segmented_character_voice/lecs/lecs_7_37.wav|lecs|[KO] 똑같은 집처럼 보여주고 제가 쓸 때는 실제로 그거를 처음부터 구분 안하고 접속을 하게 되면[KO]
./segmented_character_voice/lecs/lecs_7_38.wav|lecs|[KO] 이게 가상 머신으로 만들어진 집인지 아니면 원래부터의 컴퓨터인지를 구분할 수 있기도 어려울 정도가 버츄얼 머신의 정의라고 봅니다.[KO]
./segmented_character_voice/lecs/lecs_7_39.wav|lecs|[KO] 그래서 완벽한 집을 만들어줘야 되기 때문에 근본적으로 어떤 원리의 오리지널 컴퓨터를 여러 개로 나눌 수 있어요.[KO]
./segmented_character_voice/lecs/lecs_7_40.wav|lecs|[KO] 그럼 다시 한번 생각을 해보죠. 집에는 모든 것들이 저희가 살림살이 할 것이 다 있어야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_7_41.wav|lecs|[KO] 살림살이라는 것은 어떤 거냐면 저희가 하는 컴퓨터에서 가장 정의를 해보면 CPU, 메모리, 그 다음에 디스크, 그 다음에 네트워크[KO]
./segmented_character_voice/lecs/lecs_7_42.wav|lecs|[KO] 이 네 가지를 저희가 했던 것을 기억하실 수 있고요. 이 네 가지 주제에 대해서 이런 모든 어떤 가상적인 하드웨어,[KO]
./segmented_character_voice/lecs/lecs_7_43.wav|lecs|[KO] 피지컬한 하드웨어를 가상적인 하드웨어로 나눠서 생각할 수 있게 원하는 개수를 나눌 수 있어야 되죠.[KO]
./segmented_character_voice/lecs/lecs_7_44.wav|lecs|[KO] 그러면 나눈다는 부분에서 조금 더 가보겠습니다. CPU도 나눌 수 있고, 메모리도 나눌 수 있고,[KO]
./segmented_character_voice/lecs/lecs_7_45.wav|lecs|[KO] 그 다음에 디스크도 나눌 수 있고, 그 다음에 네트워크 인터넷 카드를 나눌 수 있다.[KO]
./segmented_character_voice/lecs/lecs_7_46.wav|lecs|[KO] 그러니까 CPU를 나눠 쓴다는 것은 CPU는 원래 같이 쓰는 리소스니까 요거 계산하다가 저쪽 계산 안 할 거 가지고 왔다 갔다 하면서[KO]
./segmented_character_voice/lecs/lecs_7_47.wav|lecs|[KO] 원래 쓰던 거니까 그거를 잘 정리해주면 CPU를 나눌 수 있습니다. 메모리는 어떨까요?[KO]
./segmented_character_voice/lecs/lecs_7_48.wav|lecs|[KO] 메모리 부분도 어떤 초찰 용량을 나눈다면 나눌 수가 있겠죠. 스토리지 하드 디스크도 어떤 부분은 이쪽에서 쓰고 저쪽으로 쓰게 되면 나눌 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_49.wav|lecs|[KO] 네트워크 하드는 전체적인 용량을 어느 정도 나눌 수도 있고, 아니면 원래부터 네트워크는 사실은 나눠 쓰는, 같이 쓰는 방식이니까 그걸 사용해서[KO]
./segmented_character_voice/lecs/lecs_7_50.wav|lecs|[KO] 그 두 개가 섞이지 않게 만들어주면 되겠죠. 이런 원리들을 소프트웨어적으로 채워서 점점 나눠주는 결을 만들어내는 기술.[KO]
./segmented_character_voice/lecs/lecs_7_51.wav|lecs|[KO] 이건 저희가 가상화 기술이라고 부릅니다. 그래서 지금 말씀드리는 것은 어떤 가상화 기술을 통해서 어떤 한 피지컬한 컴퓨터를 여러 개의 작은 컴퓨터로 나누는 거고요.[KO]
./segmented_character_voice/lecs/lecs_7_52.wav|lecs|[KO] 나눈다고 말씀드렸기 때문에 실제적으로 리소스를 나눠 가집니다. 그래서 하나의 할당된 리소스는 다른 가상 머신에서 쓸 수가 없습니다.[KO]
./segmented_character_voice/lecs/lecs_7_53.wav|lecs|[KO] A라는 가상 머신에 있는 것은 B라는 가상 머신에서 가져다 쓸 수 없이 리소스를 나누는 어떤 문제로 보시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_7_54.wav|lecs|[KO] 실제로 나누는 부분에서도 세부적으로 가면 저희가 나눈다는 방법에서 어느 정도로 나누냐, 어떤 형식으로 나누냐, 집에서 어떤 부분부터 나누냐,[KO]
./segmented_character_voice/lecs/lecs_7_55.wav|lecs|[KO] 가상화된 집을 갖다가 안쪽에 짓는다는 걸 생각해 보셨을 때 그 방법이 여러 가지로 나뉩니다. 저희가 타입1 방식, 타입2 방식이라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_7_56.wav|lecs|[KO] 타입1 방식이라는 것은 원래 집을 짓는 부분 입장에서 그 베이스로 대거하는 부분들은 저희가 그대로 가져가면서 다시 얘기하면 커널이라고 하는 부분이 있는데[KO]
./segmented_character_voice/lecs/lecs_7_57.wav|lecs|[KO] 커널이라는 핵심적인 부분을 갖다가 확장을 해서 커널을 통해서 여러 개의 집으로 나눌 수 있는 그런 근간을 만들어내고[KO]
./segmented_character_voice/lecs/lecs_7_58.wav|lecs|[KO] 그 위에서 새로운 어떤 그 안에 있는 각각의 원하는 집을 짓는 거죠. 여기서 이제 하나 더 확인하면은 새로운 집이니까 저희가 원래 커널에 쓰던 오퍼레이드 시스템이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_59.wav|lecs|[KO] 원래는 메인 컴퓨터에서는 피지컬 머신에서는 저희가 리눅스라는 예를 들어서 리눅스라는 오퍼레이드 시스템을 사용했습니다.[KO]
./segmented_character_voice/lecs/lecs_7_60.wav|lecs|[KO] 그걸 갖다가 지금 저희가 하는 가상적인 집에서는 어떻게 하냐? 한쪽에서는 윈도우를 쓰는 가상 머신을 만들 수도 있고 하나는 애플 OS를 쓸 수도 있고요.[KO]
./segmented_character_voice/lecs/lecs_7_61.wav|lecs|[KO] 또 다시 저희가 리눅스를 쓸 수도 있고 여러 가지 다양한 OS를 마음대로 갈아탈 수 있도록 만들어내는 식으로 올라탈 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_62.wav|lecs|[KO] 그래서 이런 부분에게 지금 현재 타입1이고요. 조금 다른 타입으로 짓는 방법이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_63.wav|lecs|[KO] 가상적인 집을 짓는데 기본적으로 아까만 아시면 커널 부분만을 기본적으로 다시 쉐어하는 그런 노즉에서 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_7_64.wav|lecs|[KO] 그렇지 말고 그냥 어떤 하드웨어가 있으면은 어떤 A라는 OS를 먼저 돌리고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_65.wav|lecs|[KO] 돌리고 있는 상태에서 다시 저희가 어떤 다른 방식을 통해서 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_7_66.wav|lecs|[KO] 다른 방식을 통해서 실제로 A라는 피지컬 머신을 저희가 사용하는 상태에서 그 한쪽에서 이렇게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_7_67.wav|lecs|[KO] 그러면 이게 사실 많이 본 형태입니다. 저희가 윈도우이라는 시스템을 쓰고 있는데 그 안에다가 어떤 새로운 방식을 통해서[KO]
./segmented_character_voice/lecs/lecs_7_68.wav|lecs|[KO] 가상 머신을 가지고 서포트해서 새로 하는 가상집.[KO]
./segmented_character_voice/lecs/lecs_7_69.wav|lecs|[KO] 그러니까 결국 원래 집은 사용하는 상태에서 옆에서 다시 짓는 이런 타입이 방식되어 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_7_70.wav|lecs|[KO] 결국은 집 속에서 기본적으로 생활하는 쪽에서 하는, 이걸 타입2라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_7_71.wav|lecs|[KO] 타입1은 아까 말씀드렸듯이 결국은 원래 커널을 쉐어하면서 실제로는 가상적인 집들만 실제적으로 활용을 하는 케이스라고 보면[KO]
./segmented_character_voice/lecs/lecs_7_72.wav|lecs|[KO] 타입2는 원래는 원래 집들은 그곳에 살고 옆에는 또 다시 나눠주는 집들이 사는 이런 형태의 모습이 될 것 같겠죠.[KO]
./segmented_character_voice/lecs/lecs_7_73.wav|lecs|[KO] 그래서 이 두 가지 타입으로 하는 기술들이 진화될 거예요.[KO]
./segmented_character_voice/lecs/lecs_7_74.wav|lecs|[KO] 하나 더 말씀드리겠습니다. 가상화를 할 수 있는 하이퍼바이저라고 하는 어떤 기술 자체가 처음에는 굉장히 소프트웨어 위주로 만들어졌었습니다.[KO]
./segmented_character_voice/lecs/lecs_7_75.wav|lecs|[KO] 그런데 지금 현재 집을 짓는 일들이 계속되고 나니까 컴퓨터 하드웨어를 만드는, 특히 CPU라는 어떤 존재를 만드는 쪽에서[KO]
./segmented_character_voice/lecs/lecs_7_76.wav|lecs|[KO] 집을 짓고 나눠서 쓰는 일이 굉장히 많고, 다시 말씀드리면 또 CPU라는 것들이 멀티코어, 매니코어에서 여러 개의 두뇌를 가지도록 발전을 했습니다.[KO]
./segmented_character_voice/lecs/lecs_7_77.wav|lecs|[KO] 기술적인 발전을. 그렇기 때문에 그 코어별로 결국은 새로운 집을 책임질 수 있게 하는 부분. 결국은 뭐 어떤 얘기냐면[KO]
./segmented_character_voice/lecs/lecs_7_78.wav|lecs|[KO] 하드웨어에 적용된 서포트가 이 가상화에 대해서 점점점 지원되면서 가상화 자체가 훨씬 더 안정적이 되고[KO]
./segmented_character_voice/lecs/lecs_7_79.wav|lecs|[KO] 소프트웨어만을 하는 어떤 가상화에서 점점 하드웨어가 서포되는, 하수웨어가 서포트해서 제대로 쉽게 할 수 있는, 소프트웨어는 훨씬 더 간단해지는 거죠.[KO]
./segmented_character_voice/lecs/lecs_7_80.wav|lecs|[KO] 하드웨어가 기본적인 틀을 잡아주니까. 그런 식의 가상화 기술로 진화를 하면서 발전을 해왔습니다. 여기서 하나 더 클리어 파이하면은 지금 저희가 하는 컴퓨터 시스템에 대한 가상화 문제를 저희가 다루고 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_7_81.wav|lecs|[KO] 여기까지 갈 거에요. 다음 이슈로 넘어가 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_7_82.wav|lecs|[KO] 그럼 실제로 이런 집을 짓는다는 부분에서 그럼 어떤 사이즈의 집을 짓을 거냐 그런 거죠.[KO]
./segmented_character_voice/lecs/lecs_7_83.wav|lecs|[KO] 작은 집으로 나눌 수 있다고 했는데 그럼 어떻게 나눌 수 있을 거냐, 나누는 방법은 어떻게 되는 거냐. 이게 저희가 할 수 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_7_84.wav|lecs|[KO] 그래서 나는 이런 작은 걸로 잘게 나누고 싶어. 이런 식으로 생각할 수도 있고요.[KO]
./segmented_character_voice/lecs/lecs_7_85.wav|lecs|[KO] 아니면 반대로 지금 생각하면 여러 가지로 나누고 싶다는 어떤 크기의 문제를 접근할 수도 있고[KO]
./segmented_character_voice/lecs/lecs_7_86.wav|lecs|[KO] 아니면 나는 요구에 담겨질 수 있는, 이게 들어가서 제대로 돌아줄 수 있는 그런 크기의 집을 짓고 싶어. 이렇게 할 수도 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_7_87.wav|lecs|[KO] 자기가 원하는 기능을 갖다가 담아서 그게 안쪽에서 충분히 돌 수 있을 만큼 리소스를 할당을 해서 묶어 놓고[KO]
./segmented_character_voice/lecs/lecs_7_88.wav|lecs|[KO] 그 크기만큼 아니면 또 그 크기보다도 약간 여유 공간을 둬서 다른 추가적인 기능을 담을 수 있게 크기를 잡고[KO]
./segmented_character_voice/lecs/lecs_7_89.wav|lecs|[KO] 그렇게 리소스 크기를 잡는다는 것은 말씀드렸던 CPU, 메모리, 하드디스크, 네트워크의 용량을 갖다가 나눠주는,[KO]
./segmented_character_voice/lecs/lecs_7_90.wav|lecs|[KO] 나눠져서 크기를 잡고 그거별로 짓는 방법이 있습니다. 그래서 요 부분에 집고 넘어갈 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_7_91.wav|lecs|[KO] 이거를 조금 자기가 요 정도 사이즈, 요 정도 사이즈 이런 말을 할 때 저희가 이 플레이버,[KO]
./segmented_character_voice/lecs/lecs_7_92.wav|lecs|[KO] 좀 작은 플레이버에 갖는 어떤 집을 짓겠다 아니면 좀 큰 어떤 플레이버를 갖는 집을 짓겠다 이런 식으로 정의할 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_7_93.wav|lecs|[KO] 또 집을 짓을 때 집을 짓더라도 어떤 일을 할지 모르기 때문에 작은 집을 짓을 수도 있고요.[KO]
./segmented_character_voice/lecs/lecs_7_94.wav|lecs|[KO] 어떤 일을 하는 게 딱 확정되어 있는 예를 들면 웹 서버로 돌리는 가상 머신이면 좋겠다라고 생각하면은 집을 짓을 때부터 저희가 집을 짓을 수 있는 내용을 다 채워가지고 바로 채워 들어가면 됩니다.[KO]
./segmented_character_voice/lecs/lecs_7_95.wav|lecs|[KO] 이걸 이제 다시 말씀을 드리면 이런 과정으로 보니까 가상 머신에 지금 어떤 집을 전하는데 거기서 오퍼레인 시스템을 다시 설치하고 하는 과정을 실제로 반복할 거냐[KO]
./segmented_character_voice/lecs/lecs_7_96.wav|lecs|[KO] 아니면 오퍼레인 시스템도 다 포함되어 있는 상태로 원래 재료를 만들어 놓고 그걸 바로 놓고 조금 몇 가지를 튜닝을 해가지고 맞춰주면은[KO]
./segmented_character_voice/lecs/lecs_7_97.wav|lecs|[KO] 얘가 실제로 동작할 수 있는 상태로 금방 돼서 바로 집을 저희가 사용할 수 있는 형태로 되거나 이 정도로 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_7_98.wav|lecs|[KO] 그런 방식을 저희가 구분하면서 집을 짓을 수 있는 상태로 여러 가지 다양한 옵션으로 집을 짓을 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_99.wav|lecs|[KO] 근데 중요한 파트는 여전히 리소를 일단은 묶어야 된다. 그리고 묶어야 되고 내가 그거에 대해서 어떤 일을 하기 위해서 사용을 해서 실제로 컴퓨터를 쓰는 것처럼 계속 채워나갈 수도 있고[KO]
./segmented_character_voice/lecs/lecs_7_100.wav|lecs|[KO] 그러면 어떻게 되죠? 사용하다 보면은 내가 이제 어떤 좀 많이 이것저것 채워서 준비를 했습니다. 그럼 어떻게 하고 싶죠?[KO]
./segmented_character_voice/lecs/lecs_7_101.wav|lecs|[KO] 그 집을 지은 것을 온전하게 나중에 문제없도록 보관을 해야 되겠죠. 그래서 VM을 스냅샷을 해서 찍어서 전체적인 일과를 저장을 해 놓고[KO]
./segmented_character_voice/lecs/lecs_7_102.wav|lecs|[KO] 나중에 그걸 다시 복구해서 딴 데 가서 똑같은 집으로 카피할 수도 있고 아니면 그걸 다시 불러들여서 복구를 할 수도 있고 이런 개념이 많이 전개됩니다.[KO]
./segmented_character_voice/lecs/lecs_7_103.wav|lecs|[KO] 그래서 이렇게 집이라는 게 가상적인 집이 되기 때문에 굉장히 일반적인 집보다 훨씬 더 유용성, 효율성 부분의 여러 가지 게인이 나오는 거죠.[KO]
./segmented_character_voice/lecs/lecs_7_104.wav|lecs|[KO] 단 하나 문제는 있습니다. 어떤 문제냐면은 가상적으로 집을 짓는다는 게 원래 리소스를 가지고 A하고 B, C, D가 나눠서 하는데 결국은 저희가 리소스를 나눠 가져야 되고요.[KO]
./segmented_character_voice/lecs/lecs_7_105.wav|lecs|[KO] 나누다 보면 나누기에서는 저희가 먼저 칸막이를 쳐야 되죠. 칸막이를 치는 부분에서 생각보다 오버헤드가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_7_106.wav|lecs|[KO] 칸막이를 치는데 오버헤드가 있다는 것은 칸막이 부분에서 이게 가끔 흩어져서 옆에 있는 사람이 나를 간섭하지 않도록 확실하게 나눠줘야 된다.[KO]
./segmented_character_voice/lecs/lecs_7_107.wav|lecs|[KO] 이걸 저희가 기술적으로는 리소스를 아이솔레이션 한다고 부르고 있고요. 리소스를 아이솔레이션 하기 위해서는 칸막이를 두껍게 쳐야 된다.[KO]
./segmented_character_voice/lecs/lecs_7_108.wav|lecs|[KO] 그래야지만 주변에 간섭을 안 받고 내가 하던 일을 할 수 있다. 또 간섭을 안 받기 때문에 안전하게 나는 독립적으로 할 수 있다 이런 개념이 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_7_109.wav|lecs|[KO] 그래서 그런 부분은 생기지만 그거에는 페널티가 있는 거죠. 왜냐하면 칸막이 자체도 비용이거든요. 칸막이를 두툼하게 쳐야 되기 때문에 오버헤드가 생깁니다.[KO]
./segmented_character_voice/lecs/lecs_7_110.wav|lecs|[KO] 그리고 실제적으로는 컴퓨터 안쪽에서 아까 말씀드렸던 하드웨어가 서포트해서 CPU가 서포트해서 집을 지어서 효율성은 계속 좋아졌긴 하지만[KO]
./segmented_character_voice/lecs/lecs_7_111.wav|lecs|[KO] 여전히 소프트웨어로 가짜 집을 진짜 집처럼 생각하던 만드는 이런 부분도 있습니다. 그런 부분에서도 조금씩 오버헤드를 가지고 있는 기술이 된다.[KO]
./segmented_character_voice/lecs/lecs_7_112.wav|lecs|[KO] 그리고 집을 짓는 거나 가상적인 집이지만 완전히 동작하는 컴퓨터가 됩니다. 완전히 동작하는 컴퓨터가 되니까 결국 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_7_113.wav|lecs|[KO] 모든 OS를 설치하는 과정을 하는 것처럼 시간이 걸려야지 생성이 됩니다. 생성이 되는 시간이 조금 길게 갈립니다.[KO]
./segmented_character_voice/lecs/lecs_7_114.wav|lecs|[KO] 물론 미리 준비된 버추얼 머신 이미지를 찍어내는 스타일로 가면 스피드를 빨리 할 수 있지만[KO]
./segmented_character_voice/lecs/lecs_7_115.wav|lecs|[KO] 한화 시간에서 OS를 설치하면서 새로운 머신을 사와서 OS를 설치하는 이런 상식으로 진행을 하는 그런 식으로 가상적인 가상 머신의 집을 짓는 경우는[KO]
./segmented_character_voice/lecs/lecs_7_116.wav|lecs|[KO] 굉장히 오래 걸리게 되는 단점이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_8_0.wav|lecs|[KO] 이제 기본적으로 가상 머신 집 부분에 까지는 확인했고요. 하나 더 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_8_1.wav|lecs|[KO] 근데 지금 저희가 어떤 문제를 또 봐야 되냐면, 어떤 컴퓨터라는 안쪽에 여러 개의 컴퓨터들이 사실 자리잡은 버추얼 머신이라는게 자리잡았죠.[KO]
./segmented_character_voice/lecs/lecs_8_2.wav|lecs|[KO] 제가 그걸 계속 집이라고 표현하고 있는데 이 집들이 있습니다. 그럼 집들을 갖다가 컴퓨터 안에서 여러 개의 집들을 다 나눠서 구분해서[KO]
./segmented_character_voice/lecs/lecs_8_3.wav|lecs|[KO] 각 집집마다 따로따로 네트워킹이 되도록 아니면 인터넷이 연결되도록 이렇게 만들어내는 거죠.[KO]
./segmented_character_voice/lecs/lecs_8_4.wav|lecs|[KO] 그럼 그걸 위해서 어떤 식으로 연결을 해줘야 되느냐? 이 문제를 다루겠습니다.[KO]
./segmented_character_voice/lecs/lecs_8_5.wav|lecs|[KO] 그럼 저희가 이 문제를 다루기 위해서는 어떤 저희가 머신 속에 버추얼 머신들이 들어가 있고요.[KO]
./segmented_character_voice/lecs/lecs_8_6.wav|lecs|[KO] 그 머신들을 연결하기 위해서는 현재 현실 세계에서는 저희가 머신들이 여러 개 있을 때 그거를 인터넷에 연결하기 위해서[KO]
./segmented_character_voice/lecs/lecs_8_7.wav|lecs|[KO] 스위치라는 걸 사용해서 스위치하고 컴퓨터를 일일이 연결해서 네트워크로 정렬을 하게 만듭니다.[KO]
./segmented_character_voice/lecs/lecs_8_8.wav|lecs|[KO] 그럼 가상적인 집들에 대해서는 어떻게 하냐? 또 동일한 원리로 버추얼한 스위치를 가상적인 스위치를 하나의 머신 안에 만들어 놓고[KO]
./segmented_character_voice/lecs/lecs_8_9.wav|lecs|[KO] 이 가상적인 스위치하고 버추얼 머신들을 일일이 접속해서 꽂는 그것도 꽂는 행동이 사실은 소프트웨어적으로 저희가 프로그램으로 해서 꽂도록 만들어 놓으면 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_8_10.wav|lecs|[KO] 그럼 가상적인 머신들이 그 안에 있는 버추얼 머신에 일일이 다 접속이 되어 있는 상태고 이 버추얼 스위치가 그럼 피지컬 하드웨어 머신에 있는[KO]
./segmented_character_voice/lecs/lecs_8_11.wav|lecs|[KO] 피지컬 컴퓨터에 있는 그 네트워크 인터페이스 카드 부분하고 다시 접속을 하도록 연결을 하게 만들면 그렇게 해서 이 컴퓨터 밖으로 빠져나올 수 있게 되고[KO]
./segmented_character_voice/lecs/lecs_8_12.wav|lecs|[KO] 이게 나온 것은 다시 피지컬 머신을 다시 실제적으로 존재하는 피지컬 스위치에 접속을 해서 다시 인터넷에 연결된다 이렇게 보실 수 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_8_13.wav|lecs|[KO] 그런 그림으로 전체적인 연결이 완성이 된다. 그래서 가상적인 머신들이 가상적인 스위치를 통해서 근본적으로 전결이 되고 그 가상적인 스위치를 매개로 해서[KO]
./segmented_character_voice/lecs/lecs_8_14.wav|lecs|[KO] 실제적인 피지컬 머신의 네트워크 기능의 네트워크 기승 또는 네트워크 리소스 또는 네트워크 인터페이스 카드를 활용해서 외부 세계랑 연결되는 이런 상태로 완성이 되는 걸로 보시면 됩니다.[KO]
./segmented_character_voice/lecs/lecs_8_15.wav|lecs|[KO] 그리고 실제적인 버추얼 머신에 대해서 어떤 식의 주소를 주느냐 이런 부분에 대한 대부분 저희가 피지컬 머신에 주는 부분을 다시 반복을 해서 활용할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_8_16.wav|lecs|[KO] 그런 부분을 해서 결국 저희가 쓰는 어떤 일반적인 네트워크 개념을 가상적이지만 거의 유사하게 쓸 수 있도록 정리를 하면[KO]
./segmented_character_voice/lecs/lecs_8_17.wav|lecs|[KO] 버추얼 머신도 피지컬 머신하고 동일하게 하는 개념으로 활용할 수 있는 상태를 만들 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_8_18.wav|lecs|[KO] 여기까지 기본적으로 저희가 알아본 것을 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_8_19.wav|lecs|[KO] 저희가 어떤 컴퓨터가 있었습니다. 피지컬 컴퓨터를 가상화라는 기술을 통해서 버추얼한 머신으로 나눠 놓았고요.[KO]
./segmented_character_voice/lecs/lecs_8_20.wav|lecs|[KO] 이 버추얼한 머신을 나눠 놓고 원하는 os를 사고 원하는 일을 시키도록 나눠서 사용하는 버전까지 갔습니다.[KO]
./segmented_character_voice/lecs/lecs_8_21.wav|lecs|[KO] 여기서 하나 더 보면 저희가 컴퓨터 부분을 버추얼하게 가상화를 해서 나눌 수 있다. 다 좋습니다.[KO]
./segmented_character_voice/lecs/lecs_8_22.wav|lecs|[KO] 그런데 그게 가상화라는 기술의 범위가 어디까지 적용되는 기술이냐. 이 범위에서 컴퓨터를 가상화해서 여러 개의 컴퓨터로만 쓸 수 있다.[KO]
./segmented_character_voice/lecs/lecs_8_23.wav|lecs|[KO] 그럼 저희가 얘기하는 컴퓨터들을 연결하는 네트워크라는 개념이 있는데 네트워크는 어떻게 되나요?[KO]
./segmented_character_voice/lecs/lecs_8_24.wav|lecs|[KO] 네트워크를 이렇게 저희가 나눠서 여러 개의 네트워크로 사용하는 방법하고 서로 연결을 해주면 컴퓨터들은 여러 개의 컴퓨터를 나눠주면서[KO]
./segmented_character_voice/lecs/lecs_8_25.wav|lecs|[KO] A가 쓰는 것을 B가 쓰는 것을 서로 나눠줄 수가 있었잖아요. 그럼 거기다가 네트워크를 연결하는 것을 다시 나눠줘서[KO]
./segmented_character_voice/lecs/lecs_8_26.wav|lecs|[KO] 또 나눠진 전용 컴퓨터하고 나눠진 전용 네트워크를 연결을 해주면 컴퓨터하고 네트워크의 연결도 완전히 더 분리되는[KO]
./segmented_character_voice/lecs/lecs_8_27.wav|lecs|[KO] 실제로 같이 쓰면서도 분리가 되어 있는 네트워크로 느낄 수 있는 이런 구성이 나올 수 있겠죠. 그래서 사실은 이 기술이 어떻게 지나가냐면 컴퓨터를 가상화하는 기술이[KO]
./segmented_character_voice/lecs/lecs_8_28.wav|lecs|[KO] 네트워크를 가상화하는 기술로 조금씩 조금씩 넘어가면서 일반적으로 네트워크를 가상화하는 기술은 컴퓨터를 가상화하는 기술하고 조금 본질적으로 다릅니다.[KO]
./segmented_character_voice/lecs/lecs_8_29.wav|lecs|[KO] 컴퓨터를 가상화하는 기술은 한 위치에 있는 피지컬한 컴퓨터 머신을 이렇게 나눠서 여러 개로 쓰는 기술이고요.[KO]
./segmented_character_voice/lecs/lecs_8_30.wav|lecs|[KO] 네트워크라는 기술은 사실은 여러 대 있는 스위치나 라우터들이 뭉쳐가지고 한 덩어리 일었을 때 여러 명이 있을 때 다 저희가 도로를 같이 쓰는데[KO]
./segmented_character_voice/lecs/lecs_8_31.wav|lecs|[KO] 전용 차선이 있는가 개체로 되는게 네트워크적인 가상화의 개념입니다. 그런 개념을 하는 걸 두 개를 연결을 시켜가지고 컴퓨터의 리소스도[KO]
./segmented_character_voice/lecs/lecs_8_32.wav|lecs|[KO] 단독으로 독진되고 갤도 같이 쓰는데 내가 어떤 순간에는 이 특정 길은 내 길이라고 하는 이런 식으로 하는 부분을 연결하는 그런 식의 기술이 뭉쳐지는 가상화로 지금 진화를 하면서 발전하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_8_33.wav|lecs|[KO] 여기서 기술적인 말을 한 가지만 더 말씀을 드리면 이걸 갖다가 저희가 어떤 리소스를 갖다가 피자판을 쪼르르 슬라이스를 만드는 것처럼 해서 컴퓨터 리소스를 슬라이스를 만들고[KO]
./segmented_character_voice/lecs/lecs_8_34.wav|lecs|[KO] 네트워크와 연결하는 부분도 다시 슬라이스를 전용 차선으로 만들고 그것들이 서로 슬라이스들이 연결되어서 전체적인 슬라이스로 되게 한다. 그래서 슬라이싱이라고 어떤 기술로 부르기도 합니다.[KO]
./segmented_character_voice/lecs/lecs_8_35.wav|lecs|[KO] 지금까지 저희가 버추얼라이제이션을 가상화라는 부분에 대해서 살펴봤고요. 지금부터는 컨테이너라고 하는 이 가상화라는 부분을 넘어서 조금 요즘 대세라고[KO]
./segmented_character_voice/lecs/lecs_8_36.wav|lecs|[KO] 부르고 있습니다. 대세라고 부른다는 것은 뭐죠? 컨테이너를 이용하면 지금 약간 목적은 다르지만 아까 목적은 뭐였죠?[KO]
./segmented_character_voice/lecs/lecs_8_37.wav|lecs|[KO] 집을 갖다가 여러 개의 집을 해서 독립적으로 그냥 내가 새로운 어떤 오프라인 시스템을 통해서 독립적으로 살 수 있는 공간을 만들고 계속 살 수 있는 공간을 만드는 이런 식의 가상화 기술이 굉장히[KO]
./segmented_character_voice/lecs/lecs_8_38.wav|lecs|[KO] 발표를 했습니다. 가상화 기술이 사실은 저희가 얘기하는 클라우드를 활용해서 저희가 머신을 빌려 쓴다고 얘기할 때는 이 가상화된[KO]
./segmented_character_voice/lecs/lecs_8_39.wav|lecs|[KO] 상태의 머신을 빌려 쓰는 상태고요. 클라우드의 발전과 함께 가상화가 급속도로 사실은 발전했다. 반대라면 가상화 기술이 있었기 때문에 클라우드 서비스가[KO]
./segmented_character_voice/lecs/lecs_8_40.wav|lecs|[KO] 가능해서 했다. 이렇게 말씀을 드릴 수 있겠죠. 그런데 그런 부분에도 아까 말씀드렸던 단점들이 있었습니다. 단점들이 뭐였냐면 어떤 리소스를 갖다가 일단은[KO]
./segmented_character_voice/lecs/lecs_8_41.wav|lecs|[KO] 다 갈라서 나눠 써야 된다. 갈라서 나눠 쓰는데 효과적으로 잘 나눠주고 쓰면 되는데 실제로 보면 어떻습니까? 어떤 리소스를 나눠 놓고 쓰다 보면[KO]
./segmented_character_voice/lecs/lecs_8_42.wav|lecs|[KO] 어떤 순간에는 사용을 하게 되고 어떤 순간에 사용하지 않는, 이게 가장 근본적인 문제적인 본질입니다. 사용하지 않을 순간에는 그것들이 갈라놓은 것 때문에[KO]
./segmented_character_voice/lecs/lecs_8_43.wav|lecs|[KO] 딴 사람이 손을 못 대는 거죠. 언제 쓸지 모르기 때문에. 거기서 조금 기술적인 어떤 애로사항이 있고요. 아까 말씀드렸듯이 가르기 위해서[KO]
./segmented_character_voice/lecs/lecs_8_44.wav|lecs|[KO] 칸막이를 두툼하게 한다는 어떤 그런 부분에서도 기술적인 오버헤드가 있습니다. 그럼 거기서도 좀 손해를 보게 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_8_45.wav|lecs|[KO] 그리고 만들 때도 제대로 된 만드려도 시간이 많이 걸린다. 이런 말씀을 드렸죠. 그럼 그걸 회피하면서[KO]
./segmented_character_voice/lecs/lecs_8_46.wav|lecs|[KO] 쓸 때는 뭐죠? 많이 사용할 때는 실제로 사용하지만 안 할 때는 딴 사람이 좀 쓸 수 있는 좀 더 유연한 칸막이를 하는[KO]
./segmented_character_voice/lecs/lecs_8_47.wav|lecs|[KO] 그러니까 이동식 벽체라는 개념을 조금 생각해 볼 수 있죠. 저희가 집을 보면 집에 방을 잡아놓고 났을 때 옛날에는 고정으로 하다가 이동식 벽체에서[KO]
./segmented_character_voice/lecs/lecs_8_48.wav|lecs|[KO] 차응에 따라서 왔다 갔다 하는 그런 개념을 가져왔잖아요. 그런 개념처럼 컨테이너라는 어떤 방식을 통하면[KO]
./segmented_character_voice/lecs/lecs_8_49.wav|lecs|[KO] 이게 저희가 다른 뭐죠? 비유할 때는 제가 보따리라는 말을 했습니다. 보따리 저희 없었죠? 사실은 보따리를 싸면 한 보따리를 한 덩어리로 물고 다니고 들고 다니기는 편하지만[KO]
./segmented_character_voice/lecs/lecs_8_50.wav|lecs|[KO] 그때 사이즈는 어떻게 되죠? 안에 있는 물건에 따라서 사실 보따리의 크기가 달라지죠. 보따리라는 게 가장 중요한 앱스트랙션이 뭐냐? 안에 있는 물건만 갖다가 보따리의 크기가 달라진다.[KO]
./segmented_character_voice/lecs/lecs_8_51.wav|lecs|[KO] 사용하는 만큼 물건을 많이 담아야 되면 크게 되고 물건이 작으면 작게 싸지죠. 이게 보따리의 기본적인 성질이니까 컨테이너는 그런 원리를 이용해서[KO]
./segmented_character_voice/lecs/lecs_8_52.wav|lecs|[KO] 머신에 갖다가 훨씬 더 효율적으로 잘게 나눠서 공유하게 되는 거죠. 다만 어떻게 되죠? 보따리입니다. 주변에 보따리가 옆에 있고 같이 눌리면 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_8_53.wav|lecs|[KO] 찌그러지죠. 찌그러진다는 것은 결국 뭐지? 같이 나눠서 써야 되기 때문에 리소스를. 같이 나눠서 쓰는 리소스 부분에서 찌그러진다는 말은 저쪽에서 많이 같이 쓸 때는 서로 뭐지?[KO]
./segmented_character_voice/lecs/lecs_8_54.wav|lecs|[KO] 잘 나눠서 적당한 범위 내에서 써야죠. 그러면 저희가 다 찌그러져서 아무도 일을 할 수 없는 상태가 될 수 있다. 여기까지 갔습니다.[KO]
./segmented_character_voice/lecs/lecs_8_55.wav|lecs|[KO] 컨테이너라는 부분의 기술이 어떤 식의 주제를 갖고 있느냐에 대해서는 설명을 드렸고요. 그것의 내용적으로 조금 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_8_56.wav|lecs|[KO] 그래서 아까 했던 가상화라는 부분하고 컨테이너를 먼저 비교하면서 살펴보는 게 가장 이해가 쉽기 때문에 한번 비교해서 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_8_57.wav|lecs|[KO] 말씀드렸던 가상화 쪽에서는 기본적으로 여러 가지 방식이 있지만 어떤 기본적인 피지컬 머신에서는 어떤 OS가 호스트 OS라는 게 있고요.[KO]
./segmented_character_voice/lecs/lecs_8_58.wav|lecs|[KO] 호스트 OS에서 저희가 가상화할 수 있는 하이퍼바이저를 올려 태웠습니다. 그리고 나면은 각각의 집이 있고 그 집은 새로운 원래 완벽한 집이 되어야 하는데 OS부터 다시 OS 위에 올라가는 라이브러리 그 다음에 어플리케이션 모든 것들이 풀 패키지로 깔아서[KO]
./segmented_character_voice/lecs/lecs_8_59.wav|lecs|[KO] 즉 마치 원래 있는 피지컬 머신과 동일한 상태로 지워야 됩니다. 그렇기 때문에 지금 자료에서 보시는 것처럼 굉장히 사이즈가 커지고 오베드가 있는 거죠. 컨테이너는 그렇게 하지 않습니다.[KO]
./segmented_character_voice/lecs/lecs_8_60.wav|lecs|[KO] 어떻게 하냐면은 기본적으로 OS 자체는 공유의 개념을 가지고 있습니다. 원래 호스트가 쓰는 OS를 기본적으로 공유를 합니다.[KO]
./segmented_character_voice/lecs/lecs_8_61.wav|lecs|[KO] 그리고 나서 그 위에 저희가 하는 엔진이라고 런타임 엔진이라고 하는 부분이 올라탑니다. 엔진이 올라타는 것은 컨테이너를 돌 수 있게 지원하는 어떤 엔진이 올라타고 엔진이 있으면은 그 위에서는 다양하게 저희가 컨테이너를 생성해서 돌릴 수 있게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_8_62.wav|lecs|[KO] 그래서 거기까지는 됐고요. 근데 지금 여기서 중요한 부분은 뭐냐면은 호스트 OS를 하나를 써서 다른 OS를 여러가지 OS를 왔다 갔다 할 수는 없고요. 호스트 OS를 같이 씁니다. 같이 쓰기 때문에 일단 공유해서 그 부분에서는 오버헤드가 없이 간소화 될 수 있는 거고요.[KO]
./segmented_character_voice/lecs/lecs_8_63.wav|lecs|[KO] 내가 사실 OS를 서로 설치하지 않아도 그냥 같이 쓰니까 빨리빨리 생성할 수 있는 거고 작고 가볍고 그 다음에 불필요한 부분을 반복적으로 설치를 안 해도 되니까[KO]
./segmented_character_voice/lecs/lecs_8_64.wav|lecs|[KO] 가볍게 갈 수 있습니다. 그런 장점을 갖고 있고 대신 어떤 이슈가 있냐면은 같이 써야 된다는 부분. 그쵸? 같이 써야 된다는 부분.[KO]
./segmented_character_voice/lecs/lecs_8_65.wav|lecs|[KO] 어느 정도 같이 쓸 때 어떻게 되죠? 저희가 어떤 공간을 같이 쓰는데 한쪽에서 문제가 생기면 문제가 생기면 같이 영향을 받는 거죠.[KO]
./segmented_character_voice/lecs/lecs_8_66.wav|lecs|[KO] 그래서 노이즈 네이버 노이즈 네이버 해가지고 주변에서 시끄러우면 저도 시끄러운 거죠. 그 다음에 주변에서 감염이 되면 저도 전파의 위험이 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_8_67.wav|lecs|[KO] 그래서 보안이나 이런 부분, 아이솔레이션이 약하다는 이런 단점을 있습니다. 나름대로 보안하고 아이솔레이션의 단점을 보완할 수 있는 중간적인 절충적인 기술도 나오면서 계속 진화를 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_8_68.wav|lecs|[KO] 그 부분까지 말씀드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_8_69.wav|lecs|[KO] 좀 더 가보겠습니다. 그런데 지금 얘기 말씀드린 컨테이너는 폭발적으로 어댑트 되는 어떤 매개체가 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_8_70.wav|lecs|[KO] 매개체라는 컨테이너라고 하는 기술은 오랫동안 존재했던 기술이었고요. 그런데 그 기술을 약간 대중화한다고 할까요? 대중화하는 부분에서 저희가 다커 다커라고 하는 어떤 고래의 모습을 갖고 있는 아이콘을 갖고 있는 컨테이너 기술이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_8_71.wav|lecs|[KO] 이 컨테이너 기술을 저희가 컨테이너를 여러 가지 기술적으로 분류할 때 보면 프로세스 컨테이너.[KO]
./segmented_character_voice/lecs/lecs_8_72.wav|lecs|[KO] 지금 저희가 한 프로세스, 프로세스 오프링 시스템에서 내기에는 프로세스별로 컨테이너를 한다. 웹서버 프로세스, 앱서버 프로세스, 데이터베이스 서버 프로세스 이런 프로세스별로 컨테이너를 해서 한 가지 목적에 딱 맞춰서 한정된 이런 펑션을 담고 그것만 담는 컨테이너를 만들어 놓고 그걸 도커라는 허브라는 쪽에 만들어서 굉장히 많은 사람이 쉽게 공유할 수 있게 만들어서 컨테이너가 실제로 활성화돼서[KO]
./segmented_character_voice/lecs/lecs_8_73.wav|lecs|[KO] 저변이 넓어질 수 있도록 만들어낸 일등공신이 도커라는 컨테이너 기술일 거예요. 이 기술을 가지고 컨테이너가 기본적인 많은 사람들의 사랑을 받게 됐습니다. 여기서 기술적으로 조금 더 들어가겠습니다.[KO]
./segmented_character_voice/lecs/lecs_8_74.wav|lecs|[KO] 그럼 컨테이너를 만들 때 기술적으로 어떻게 만드느냐 부분에 대한 얘기를 조금 덜 드렸기 때문에 도커를 통해서 컨테이너의 활성화가 일단 시작됐다. 원래 존재하던 기술이지만 도커가 상업적이라 그럴까 아니면 실제로 활성화하는 부분의 매개체가 됐다.[KO]
./segmented_character_voice/lecs/lecs_8_75.wav|lecs|[KO] 여기 됐죠? 한 가지 더 말씀드리겠습니다. 컨테이너 속 분명히 먼저 보타리를 싸듯이 싸야 됩니다. 싸기 때문에 어떤 리소스를 나눠서 할당을 해야 되는데 리소스를 할당하고 그 다음에 이 리소스는 그 안쪽에서는 새로운 어떤 주소라고 하는 건데 뉴욕스 쪽에서 이런 걸 나눠주는 기술에 관여되는 기술 요소들이 이렇게 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_8_76.wav|lecs|[KO] c그룹이라고 하는 리소스를 나눠주는 기술 요소가 있거나 네임 스페이스라고 해서 이거는 이렇게 부르자. 이 안에서는 이렇게 부르자. 그래서 이게 이름을 나눠준다는 것도 굉장히 중요하다. 자기가 구분할 때 이름이 나눠지고 그 다음에 실제로 그 할당이 나눠지는 문제로 단계적으로 기술을 가는데 c그룹 네임 스페이스라는 기술하고 이렇게 컨테이너 이미지로 싸가지고 원래 있는 베이스 os나 라이브러리의 디펜던치를 조금 줄이는.[KO]
./segmented_character_voice/lecs/lecs_8_77.wav|lecs|[KO] 여기 한 가지가 같습니다. 컨테이너로서 하면 원래 호스트 os가 버전이 안맞으면 컨테이너에 있는 건 똑같이 안돌던데 옛날에 보면 라이브러리가 안맞으면 안돌던데.[KO]
./segmented_character_voice/lecs/lecs_8_78.wav|lecs|[KO] 컨테이너에서는 그런 걸 보완하게 해서 내가 특정 어떤 프로세스를 돌고 있는 어플리케이션이 담고 있는 디펜던치가 있는 부분을 거기에 남겨놔서 다른 쪽에서 여러가지 호환성 부분을 갖다가 자기가 몇 개 챙길까 몇 개 챙겨가서 알아서 메꾸는 거죠.[KO]
./segmented_character_voice/lecs/lecs_8_79.wav|lecs|[KO] 그래서 이 라이브러리의 디펜던치를 줄여서 훨씬 더 다양한 os에서 바로 그냥 돌 수 있게. 가장 중요한 것은 이거는 금방금방 만들어 투입해서 돌아줘야 되거든요. 돌아주지 않으면 결국은 가치가 없어지는데 그 가치를 알 수 있게 만들어내는 굉장히 좋은 이미지를 만드는 기술, 현실적인 기술을 만들어낸 거죠. 그래서 이제 도커 라는 컨테이너가 활성화됐습니다.[KO]
./segmented_character_voice/lecs/lecs_9_0.wav|lecs|[KO] 이런 도커라는 컨테이너가 활성화되는 거에서 다시 이 부분이 어떤 흐름을 가져갔냐면[KO]
./segmented_character_voice/lecs/lecs_9_1.wav|lecs|[KO] 전체로 저희가 얘기했던 컨테이너 하는 게 저변이 다양한 컨테이너 기술들이[KO]
./segmented_character_voice/lecs/lecs_9_2.wav|lecs|[KO] 여러 가지 형태로 발전하면서 확장하는 어떤 모습을 만들어놨고요.[KO]
./segmented_character_voice/lecs/lecs_9_3.wav|lecs|[KO] 이걸 볼려면 전체적으로 컨테이너가 도커라고 얘기하는 프로세스 컨테이너가[KO]
./segmented_character_voice/lecs/lecs_9_4.wav|lecs|[KO] 하는 한 가지 형태만 있느냐? 그렇지 않습니다.[KO]
./segmented_character_voice/lecs/lecs_9_5.wav|lecs|[KO] 여러 가지 형태의 컨테이너들의 기술들이 존재하고요.[KO]
./segmented_character_voice/lecs/lecs_9_6.wav|lecs|[KO] 그래서 컨테이너가 어떤 조금 더 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_9_7.wav|lecs|[KO] 자료에서 보시는 것처럼 원래 오리지널 시스템을 같이 쓰는[KO]
./segmented_character_voice/lecs/lecs_9_8.wav|lecs|[KO] 그냥 저희가 아는 피지컬 머신을 같이 쓸 수가 있고요.[KO]
./segmented_character_voice/lecs/lecs_9_9.wav|lecs|[KO] 피지컬 머신을 같이 쓸 수 있고 버츄얼 머신으로 나눠서 그걸 쪼개를 쪼개서[KO]
./segmented_character_voice/lecs/lecs_9_10.wav|lecs|[KO] 저희가 버츄얼 머신을 나눠서 같이 쓸 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_11.wav|lecs|[KO] 그때 사용하는 어떤 저희가 하이퍼바이지를 소멸하는[KO]
./segmented_character_voice/lecs/lecs_9_12.wav|lecs|[KO] 케이브미어라는 게 대표적인 하이퍼바이지 중에 하나고요.[KO]
./segmented_character_voice/lecs/lecs_9_13.wav|lecs|[KO] 저희가 지금 말씀드리는 건 컨테이너 쪽에서는[KO]
./segmented_character_voice/lecs/lecs_9_14.wav|lecs|[KO] 컨테이너에서는 예를 들어 머신 컨테이너라고 하는 어떤 부위가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_15.wav|lecs|[KO] 얘는 머신이라는 단어랑 컨테이너라는 단어를 합쳐놨는데[KO]
./segmented_character_voice/lecs/lecs_9_16.wav|lecs|[KO] 아까 가상 머신, 가상 머신 할 때 버츄얼 머신, 머신이거든요.[KO]
./segmented_character_voice/lecs/lecs_9_17.wav|lecs|[KO] 머신처럼 굉장히 머신에 가까운 스타일의 컨테이너라고 얘기하는 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_18.wav|lecs|[KO] 그래서 LXD라고 하는 컨테이너, LXC에서 변형되는 그런 형태인데[KO]
./segmented_character_voice/lecs/lecs_9_19.wav|lecs|[KO] LXD라는 컨테이너라는 부분이 머신 컨테이너에서 있어서[KO]
./segmented_character_voice/lecs/lecs_9_20.wav|lecs|[KO] 굉장히 집이랑 유사한데 대신 칸막이가 좀 적은, 가벼운 집인 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_21.wav|lecs|[KO] 그래서 그림을 잘 보시면 바깥 테두리가 조금 얇은 선으로 돼 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_22.wav|lecs|[KO] 그것이 결국 어떤 말을 하는 거냐면[KO]
./segmented_character_voice/lecs/lecs_9_23.wav|lecs|[KO] 칸막이 가벼워서 아이솔레이션이 가볍게 만들 수 있는[KO]
./segmented_character_voice/lecs/lecs_9_24.wav|lecs|[KO] 그렇지만 여전히 안에 들어가면 집의 느낌을 주는 상태, 이게 머신 컨테이너입니다.[KO]
./segmented_character_voice/lecs/lecs_9_25.wav|lecs|[KO] 그리고 가장 일반적으로 많이 쓰는 건 여전히 프로세스 컨테이너입니다.[KO]
./segmented_character_voice/lecs/lecs_9_26.wav|lecs|[KO] 각자의 어떤 프로세스 하나하나마다 가볍게 담아가지고[KO]
./segmented_character_voice/lecs/lecs_9_27.wav|lecs|[KO] 보따리 싸지게 해가지고 퍼져서 쓴다.[KO]
./segmented_character_voice/lecs/lecs_9_28.wav|lecs|[KO] 이게 잘 보시면 지금 빨간 줄이 하나 있는데 딱 한 줄이 들어가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_29.wav|lecs|[KO] 프로세스 한 줄이 들어가 있다는 거예요.[KO]
./segmented_character_voice/lecs/lecs_9_30.wav|lecs|[KO] 그러니까 한 가지 프로세스에 집중하는 컨테이너가 들어가 있다.[KO]
./segmented_character_voice/lecs/lecs_9_31.wav|lecs|[KO] 이렇게 되는 거고요.[KO]
./segmented_character_voice/lecs/lecs_9_32.wav|lecs|[KO] 그런 상태로 들어가 있는 게 프로세스 컨테이너입니다.[KO]
./segmented_character_voice/lecs/lecs_9_33.wav|lecs|[KO] 저희가 머신 컨테이너, 프로세스 컨테이너는 일단 다 바꿔요.[KO]
./segmented_character_voice/lecs/lecs_9_34.wav|lecs|[KO] 그럼 이제 컨테이너라는 부분에서[KO]
./segmented_character_voice/lecs/lecs_9_35.wav|lecs|[KO] 저희가 컨테이너의 사이즈가 어떤 사이즈로 만들어져 제약이 있느냐[KO]
./segmented_character_voice/lecs/lecs_9_36.wav|lecs|[KO] 사실은 굉장히 큰 컨테이너를 만들 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_37.wav|lecs|[KO] 버추얼 머신을 다 집어넣는 상태로 해서[KO]
./segmented_character_voice/lecs/lecs_9_38.wav|lecs|[KO] 뭐지, 보좌기를 크게 만들어서 만들어내는 컨테이너도 만들 수 있는 거예요.[KO]
./segmented_character_voice/lecs/lecs_9_39.wav|lecs|[KO] 사실은 그렇게 원래 하라고는 되어 있지는 않지만 만들 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_40.wav|lecs|[KO] 그리고 동작할 수도 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_41.wav|lecs|[KO] 잘만 맞춰주면 저희가 붓자귀를 쌌다고 해서[KO]
./segmented_character_voice/lecs/lecs_9_42.wav|lecs|[KO] 큰 집을 가서 붓자귀를 산다고 하면 집이 안 도는 건 아니잖아요.[KO]
./segmented_character_voice/lecs/lecs_9_43.wav|lecs|[KO] 그런 식으로 할 수 있지만 기술적인 오버웨이드가 사실은 별로 레코멘드 방법은 아니고요.[KO]
./segmented_character_voice/lecs/lecs_9_44.wav|lecs|[KO] 그런 식으로 하는, 저희가 이제 그냥 농담으로 하는 게 몬스터, 괴물을 만들었다고 해서[KO]
./segmented_character_voice/lecs/lecs_9_45.wav|lecs|[KO] 실제로는 그런 몬스터 컨테이너라고 부르기도 하고요.[KO]
./segmented_character_voice/lecs/lecs_9_46.wav|lecs|[KO] 그런 식의 다양한 컨테이너의 활용법이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_47.wav|lecs|[KO] 컨테이너라는 거는 근데 잘 여기서 한 가지 하면[KO]
./segmented_character_voice/lecs/lecs_9_48.wav|lecs|[KO] 어떤 순간에 필요한 일을 해주고[KO]
./segmented_character_voice/lecs/lecs_9_49.wav|lecs|[KO] 그다음에 그 일에 필요가 없으면 사라지는 개념을 많이 갖고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_50.wav|lecs|[KO] 그러니까 집은 계속 있는 거고요.[KO]
./segmented_character_voice/lecs/lecs_9_51.wav|lecs|[KO] 계속 스테이 하는 개념이고요.[KO]
./segmented_character_voice/lecs/lecs_9_52.wav|lecs|[KO] 그래서 리솔을 할당받고 계속 있으니까 리솔을 고정적으로 할당받고[KO]
./segmented_character_voice/lecs/lecs_9_53.wav|lecs|[KO] 자기가 원하는 상태를 쓸 수 있을 거라고 리솔을 확보하는데[KO]
./segmented_character_voice/lecs/lecs_9_54.wav|lecs|[KO] 컨테이너는 그렇지 않고요.[KO]
./segmented_character_voice/lecs/lecs_9_55.wav|lecs|[KO] 순간적으로 생산했다가 일이 소모되면 그냥 사라져야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_9_56.wav|lecs|[KO] 사라져야 되니까 가벼워야 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_57.wav|lecs|[KO] 그렇지만 꼭 사라진다고 해서[KO]
./segmented_character_voice/lecs/lecs_9_58.wav|lecs|[KO] 그러니까 어떤 일을 잠깐 하고 뭐지 사라지고 이런 것만 얘기하는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_9_59.wav|lecs|[KO] 조금 다른 컨테이너를 쓰면서도[KO]
./segmented_character_voice/lecs/lecs_9_60.wav|lecs|[KO] 좀 더 인텐시브하고 조금 지속적으로 하는 거에 대한 수요도 점점 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_61.wav|lecs|[KO] 컨테이너 기술이 발전하면서 되니까[KO]
./segmented_character_voice/lecs/lecs_9_62.wav|lecs|[KO] 저희가 지금 대표적으로 예로 잡는 게[KO]
./segmented_character_voice/lecs/lecs_9_63.wav|lecs|[KO] HCC 하이퍼프스 컴퓨팅 쪽에서는[KO]
./segmented_character_voice/lecs/lecs_9_64.wav|lecs|[KO] 어떤 굉장히 큰 어떤 계산을 여러 대의 컴퓨터들이[KO]
./segmented_character_voice/lecs/lecs_9_65.wav|lecs|[KO] 동시에 힘을 모아가지고 전체가 같이[KO]
./segmented_character_voice/lecs/lecs_9_66.wav|lecs|[KO] 개주를 하는 식으로 호흡을 맞춰서 가야 되는 그런 식의 컨테이너 사용이 되죠.[KO]
./segmented_character_voice/lecs/lecs_9_67.wav|lecs|[KO] 그럼 여긴 컨테이너들은 서로 호흡을 맞춰서[KO]
./segmented_character_voice/lecs/lecs_9_68.wav|lecs|[KO] 쭉쭉 가줘야 되고 계속 같이 지속을 하면서[KO]
./segmented_character_voice/lecs/lecs_9_69.wav|lecs|[KO] 어느 하나가 사라지면 빨리 메꿔서 가야 되나 이런 식의 형태죠.[KO]
./segmented_character_voice/lecs/lecs_9_70.wav|lecs|[KO] 그러니까 약간은 다른 어떤 기술적인 수요가 있고요.[KO]
./segmented_character_voice/lecs/lecs_9_71.wav|lecs|[KO] 그게 특화되는 컨테인도 만들어져서 가고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_72.wav|lecs|[KO] 싱글래디틴 이름으로 계속 지금 버전 3.0까지 올라가면서[KO]
./segmented_character_voice/lecs/lecs_9_73.wav|lecs|[KO] 계속 조금씩 진화를 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_74.wav|lecs|[KO] 한 가지 더 다른 형태의 컨테이너를 하나만 더 예를 말씀을 드리면[KO]
./segmented_character_voice/lecs/lecs_9_75.wav|lecs|[KO] 컨테이너들이 기본적으로 칸막이가 얇아서[KO]
./segmented_character_voice/lecs/lecs_9_76.wav|lecs|[KO] 뭐지 주변에서 감염이나 아까 그런 말씀을 드렸는데[KO]
./segmented_character_voice/lecs/lecs_9_77.wav|lecs|[KO] 그런 부분에 조금 보완학을 하기 위해서[KO]
./segmented_character_voice/lecs/lecs_9_78.wav|lecs|[KO] 컨테이너를 만들지만 가상머신 기술을 살짝 비틀어서[KO]
./segmented_character_voice/lecs/lecs_9_79.wav|lecs|[KO] 컨테이너지만 약간 가상화 부분으로 약간 프로텍션하는[KO]
./segmented_character_voice/lecs/lecs_9_80.wav|lecs|[KO] 칸막이는 조금 더 하고 그런 식으로 만들어내는[KO]
./segmented_character_voice/lecs/lecs_9_81.wav|lecs|[KO] 카타 컨테이너라고 하는 좀 더 세이프하게 활용할 수 있는 컨테이너들입니다.[KO]
./segmented_character_voice/lecs/lecs_9_82.wav|lecs|[KO] 그래서 기술적으로 샌드박스 아이솔레이트드라고 하는데[KO]
./segmented_character_voice/lecs/lecs_9_83.wav|lecs|[KO] 저희가 뭔가 샌드박스를 아이솔레이트해가지고[KO]
./segmented_character_voice/lecs/lecs_9_84.wav|lecs|[KO] 그 안쪽에서 조금 보호가 되도록 만들어내서[KO]
./segmented_character_voice/lecs/lecs_9_85.wav|lecs|[KO] 안전하게 쓸 수 있는 컨테이너들[KO]
./segmented_character_voice/lecs/lecs_9_86.wav|lecs|[KO] 이런 부분에 여성하게 다양한 형태의 컨테이너가[KO]
./segmented_character_voice/lecs/lecs_9_87.wav|lecs|[KO] 지금 발전되고 있다 말씀드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_9_88.wav|lecs|[KO] 말씀드린 것처럼 컨테이너들이 지금 현재[KO]
./segmented_character_voice/lecs/lecs_9_89.wav|lecs|[KO] 다양한 브랜드의 옷처럼 지금 돼 있는데[KO]
./segmented_character_voice/lecs/lecs_9_90.wav|lecs|[KO] 기본적으로 그럼 A라는 컨테이너 B라는 컨테이너를 갖다가[KO]
./segmented_character_voice/lecs/lecs_9_91.wav|lecs|[KO] 저희가 뭐지 바꿔서 입을 수 있어야 되고[KO]
./segmented_character_voice/lecs/lecs_9_92.wav|lecs|[KO] 표준적으로 사용할 수 있어야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_9_93.wav|lecs|[KO] 그래서 컨테이너 자체를 갖다가 표준적으로 만들어서[KO]
./segmented_character_voice/lecs/lecs_9_94.wav|lecs|[KO] A, B, C, D의 옷을 저희가 다 마음대로 원하는 대로[KO]
./segmented_character_voice/lecs/lecs_9_95.wav|lecs|[KO] 뭐지 목적에 따라서 바꿔 입을 수 있는[KO]
./segmented_character_voice/lecs/lecs_9_96.wav|lecs|[KO] 그런 식의 표준 노력이 필요하고요.[KO]
./segmented_character_voice/lecs/lecs_9_97.wav|lecs|[KO] 그걸 저희가 오픈 컨테이너 이니셔티브[KO]
./segmented_character_voice/lecs/lecs_9_98.wav|lecs|[KO] 이니셔티브의 어떤 뭐죠? 활동이라는 얘기죠.[KO]
./segmented_character_voice/lecs/lecs_9_99.wav|lecs|[KO] 그래서 컨테이너를 표준적인 컨테이너를 만드는 활동이[KO]
./segmented_character_voice/lecs/lecs_9_100.wav|lecs|[KO] 아까 다커라고 하는 어떤 중심적인 어떤 브랜드가 하나 있으면[KO]
./segmented_character_voice/lecs/lecs_9_101.wav|lecs|[KO] 다른 뭐지 로켓이라고 하는 다른 어떤 컨테이너 브랜드랑[KO]
./segmented_character_voice/lecs/lecs_9_102.wav|lecs|[KO] 여러 쪽에서 협력을 해서 그 뭐지 합의를 만들어서 만들었고요.[KO]
./segmented_character_voice/lecs/lecs_9_103.wav|lecs|[KO] 여기서 핵심은 이렇습니다.[KO]
./segmented_character_voice/lecs/lecs_9_104.wav|lecs|[KO] 어떤 이미지가 있는데 사실 컨테이너가 돈다는 말은[KO]
./segmented_character_voice/lecs/lecs_9_105.wav|lecs|[KO] 사실은 이 컨테이너 이미지를[KO]
./segmented_character_voice/lecs/lecs_9_106.wav|lecs|[KO] 서포트하는 런타임이라는 개념이 중요합니다.[KO]
./segmented_character_voice/lecs/lecs_9_107.wav|lecs|[KO] 런타임이라고 해서 그림을 잘 보시면[KO]
./segmented_character_voice/lecs/lecs_9_108.wav|lecs|[KO] 아래쪽 하단에 있는 그림에서 보면[KO]
./segmented_character_voice/lecs/lecs_9_109.wav|lecs|[KO] 다람쥐가 다람쥐 통 안에 열심히 런을 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_110.wav|lecs|[KO] 이게 런을 한다는 얘기거든요.[KO]
./segmented_character_voice/lecs/lecs_9_111.wav|lecs|[KO] 그래서 컨테이너를 계속 돌려주는 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_112.wav|lecs|[KO] 굴러서 저희가 회전하는 다람베이 쳇바퀴 돌듯이[KO]
./segmented_character_voice/lecs/lecs_9_113.wav|lecs|[KO] 굴러가는 이 런을 해주는 부분의 엔진[KO]
./segmented_character_voice/lecs/lecs_9_114.wav|lecs|[KO] 엔진 자체가 어떤 OCI 컴팩터블한 컨테이너 이미지를[KO]
./segmented_character_voice/lecs/lecs_9_115.wav|lecs|[KO] 다 수용을 해서 돌려줄 수 있도록 만들자.[KO]
./segmented_character_voice/lecs/lecs_9_116.wav|lecs|[KO] 그렇게 해서 어떤 표준적인 부분을 유지하자.[KO]
./segmented_character_voice/lecs/lecs_9_117.wav|lecs|[KO] 이런 노력이 세력을 얻으면서[KO]
./segmented_character_voice/lecs/lecs_9_118.wav|lecs|[KO] 컨테이너가 서로 호환성을 갖도록 만들고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_119.wav|lecs|[KO] 호환성을 가져야 훨씬 더 유용하게[KO]
./segmented_character_voice/lecs/lecs_9_120.wav|lecs|[KO] 사람들이 편리하게 쓸 수 있으니까요.[KO]
./segmented_character_voice/lecs/lecs_9_121.wav|lecs|[KO] 거기까지는 OCI라는 액티베이터가 있을 거예요.[KO]
./segmented_character_voice/lecs/lecs_9_122.wav|lecs|[KO] 이 부분에서 조금 더 런타임 입장에서[KO]
./segmented_character_voice/lecs/lecs_9_123.wav|lecs|[KO] 금방 말씀드렸던 런타임을 하는 부분에서[KO]
./segmented_character_voice/lecs/lecs_9_124.wav|lecs|[KO] 구현체가 여러 가지 에포트가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_125.wav|lecs|[KO] 그렇지만 런타임이 내 런타임이 더 좋아[KO]
./segmented_character_voice/lecs/lecs_9_126.wav|lecs|[KO] 내 런타임이 더 좋아.[KO]
./segmented_character_voice/lecs/lecs_9_127.wav|lecs|[KO] 이건 또 경쟁이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_128.wav|lecs|[KO] 그래서 원래 만들었던 도커를 만들었기 중에서는[KO]
./segmented_character_voice/lecs/lecs_9_129.wav|lecs|[KO] 컨테이너 D라는 입장에서 어떤 오픈활동에서[KO]
./segmented_character_voice/lecs/lecs_9_130.wav|lecs|[KO] 자기의 런타임이 호환적이고 더 좋다고[KO]
./segmented_character_voice/lecs/lecs_9_131.wav|lecs|[KO] 프로모션하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_9_132.wav|lecs|[KO] 로켓이라고 하는 다른 쪽에서는[KO]
./segmented_character_voice/lecs/lecs_9_133.wav|lecs|[KO] 다른 런타임을 홍보하고 있고[KO]
./segmented_character_voice/lecs/lecs_9_134.wav|lecs|[KO] 크리오라고 하는 또 다른 여러 가지 런타임들이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_135.wav|lecs|[KO] 그래서 여러 가지 다양한 런타임들이[KO]
./segmented_character_voice/lecs/lecs_9_136.wav|lecs|[KO] 기본적으로 경쟁을 하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_9_137.wav|lecs|[KO] 제가 이 자료에서는 말씀을 안 드렸지만[KO]
./segmented_character_voice/lecs/lecs_9_138.wav|lecs|[KO] 아까 안전하게 돌리는 런타임들[KO]
./segmented_character_voice/lecs/lecs_9_139.wav|lecs|[KO] 실제로 컨테이너 쪽에서[KO]
./segmented_character_voice/lecs/lecs_9_140.wav|lecs|[KO] 컨테이너 자체가 반대에서 가져와서[KO]
./segmented_character_voice/lecs/lecs_9_141.wav|lecs|[KO] 내가 쉽게 투입하는 이런 겁니다.[KO]
./segmented_character_voice/lecs/lecs_9_142.wav|lecs|[KO] 앱을 그냥 가져와서 저희가 투입해서 돌릴 때 어떻게 하죠?[KO]
./segmented_character_voice/lecs/lecs_9_143.wav|lecs|[KO] 앱에 대해서 검사를 하고 확인을 해야 되잖아요.[KO]
./segmented_character_voice/lecs/lecs_9_144.wav|lecs|[KO] 근데 저희가 지금 스마트폰 앱을 설치할 때 어떻게 하죠?[KO]
./segmented_character_voice/lecs/lecs_9_145.wav|lecs|[KO] 그냥 저희가 하는 구글 쪽에서[KO]
./segmented_character_voice/lecs/lecs_9_146.wav|lecs|[KO] 구글 플레이 쪽에서 그걸 갖다가 검사해줬을 거라 믿고[KO]
./segmented_character_voice/lecs/lecs_9_147.wav|lecs|[KO] 저희는 그냥 다운받아서 하는 부분이죠.[KO]
./segmented_character_voice/lecs/lecs_9_148.wav|lecs|[KO] 어딘가 검사를 해준다는 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_149.wav|lecs|[KO] 그리고 마찬가지로 컨테이너 입장에서[KO]
./segmented_character_voice/lecs/lecs_9_150.wav|lecs|[KO] 그런 검사를 해주는 어떤 메커니즘 들이 존재해야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_9_151.wav|lecs|[KO] 그리고 그렇지 않다면[KO]
./segmented_character_voice/lecs/lecs_9_152.wav|lecs|[KO] 아무거나 돌릴 수 없게 제한할 수 있는 부분이 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_9_153.wav|lecs|[KO] 그래서 런타임 중에서 아까 시큐리티를 위해서[KO]
./segmented_character_voice/lecs/lecs_9_154.wav|lecs|[KO] 특별하게 고안되는 요새 런타임들이[KO]
./segmented_character_voice/lecs/lecs_9_155.wav|lecs|[KO] 많이 활성화돼서 지금 나타나고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_156.wav|lecs|[KO] 그래서 일반적인 컨테이너 런타임이 있고[KO]
./segmented_character_voice/lecs/lecs_9_157.wav|lecs|[KO] 안전이나 이런 것에 보강을 해가지고[KO]
./segmented_character_voice/lecs/lecs_9_158.wav|lecs|[KO] 훨씬 더 특화된 런타임들이 지금 계속 나가면서[KO]
./segmented_character_voice/lecs/lecs_9_159.wav|lecs|[KO] 런타임의 영역들이 넓어지면서[KO]
./segmented_character_voice/lecs/lecs_9_160.wav|lecs|[KO] 컨테이너를 안전하고도 효율적으로 쓸 수 있는 방법들이[KO]
./segmented_character_voice/lecs/lecs_9_161.wav|lecs|[KO] 많이 강구가 되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_162.wav|lecs|[KO] 그럼 이제 전체적으로 한번 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_9_163.wav|lecs|[KO] 지금 말씀드렸던 것처럼[KO]
./segmented_character_voice/lecs/lecs_9_164.wav|lecs|[KO] 버추얼라이전 기술을 통해 하면[KO]
./segmented_character_voice/lecs/lecs_9_165.wav|lecs|[KO] 저희가 어떤 피지컬 머신을 여러 개의 머신으로 나눠서 쓸 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_9_166.wav|lecs|[KO] 그래서 그걸 연결하기 위해서[KO]
./segmented_character_voice/lecs/lecs_9_167.wav|lecs|[KO] 네트워킹 버추얼 스위치를 중심으로 해서[KO]
./segmented_character_voice/lecs/lecs_9_168.wav|lecs|[KO] 네트워킹에서 뽑아낸다고 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_9_169.wav|lecs|[KO] 그럼 컨테이너들은 옆에 있는 컨테이너랑 어떻게 대화를 하느냐[KO]
./segmented_character_voice/lecs/lecs_9_170.wav|lecs|[KO] 이렇게 많은 질문을 드릴 수 있죠.[KO]
./segmented_character_voice/lecs/lecs_9_171.wav|lecs|[KO] 마찬가지로 아까 저희가 살펴봤던[KO]
./segmented_character_voice/lecs/lecs_9_172.wav|lecs|[KO] 버추얼 스위치를 이용해가지고[KO]
./segmented_character_voice/lecs/lecs_9_173.wav|lecs|[KO] 컨테이너를 서포트를 할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_174.wav|lecs|[KO] 버추얼 스위치가 서포트하던 것처럼[KO]
./segmented_character_voice/lecs/lecs_9_175.wav|lecs|[KO] 컨테이너를 버추얼 스위치가 똑같이 서포트해서[KO]
./segmented_character_voice/lecs/lecs_9_176.wav|lecs|[KO] 네트워킹을 하도록 만들어내는 방법이 하나일 거예요.[KO]
./segmented_character_voice/lecs/lecs_9_177.wav|lecs|[KO] 또 다른 방법은 컨테이너를 저희가 피지컬 머신에 바로 투입하는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_9_178.wav|lecs|[KO] 피지컬 머신에 있는 버추얼 머신 안에 투입할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_179.wav|lecs|[KO] 그러면 그 피지컬 머신 안에 있는 버추얼 머신 속에서[KO]
./segmented_character_voice/lecs/lecs_9_180.wav|lecs|[KO] 다시 컨테이너들이 여러 개 존재하고[KO]
./segmented_character_voice/lecs/lecs_9_181.wav|lecs|[KO] 그것들이 다시 그 안에 있는 버추얼 머신 안에 있는 버추얼 스위치를 통해서[KO]
./segmented_character_voice/lecs/lecs_9_182.wav|lecs|[KO] 아니면 다른 컨테이너를 서포트하는 네트워킹 방법을 통해서[KO]
./segmented_character_voice/lecs/lecs_9_183.wav|lecs|[KO] 다시 밖으로 연결될 수 있게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_9_184.wav|lecs|[KO] 그래서 이 얘기를 다시[KO]
./segmented_character_voice/lecs/lecs_9_185.wav|lecs|[KO] 다음번에는 좀 더 클라우드 네이티브 입장에서[KO]
./segmented_character_voice/lecs/lecs_9_186.wav|lecs|[KO] 저희가 좀 더 확대해서 설명을 드릴 건데[KO]
./segmented_character_voice/lecs/lecs_9_187.wav|lecs|[KO] 다시 말씀을 드리면 이렇습니다.[KO]
./segmented_character_voice/lecs/lecs_9_188.wav|lecs|[KO] 컨테이너를 위한 전형적인 네트워킹 방법이[KO]
./segmented_character_voice/lecs/lecs_9_189.wav|lecs|[KO] 표준적인 부분의 흐름들을 가지고[KO]
./segmented_character_voice/lecs/lecs_9_190.wav|lecs|[KO] 이것도 세력 경쟁을 해서 나름대로 표준적인 흐름이 생기고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_9_191.wav|lecs|[KO] 그걸 통해서 컨테이너들이[KO]
./segmented_character_voice/lecs/lecs_9_192.wav|lecs|[KO] 기본적으로 어떤 머신 안에서 그 다음에 머신을 통해서[KO]
./segmented_character_voice/lecs/lecs_9_193.wav|lecs|[KO] 다시 밖으로 나가는 이런 네트워킹의 원리를[KO]
./segmented_character_voice/lecs/lecs_9_194.wav|lecs|[KO] 적용하는 솔루션들이 지금 나오고 있고[KO]
./segmented_character_voice/lecs/lecs_9_195.wav|lecs|[KO] 그것들이 결국은 서서히 시장을 통해서[KO]
./segmented_character_voice/lecs/lecs_9_196.wav|lecs|[KO] 좋은 대세를 얻으면서 자리를 잡고 있는 단계다.[KO]
./segmented_character_voice/lecs/lecs_9_197.wav|lecs|[KO] 이렇게 말씀드렸고요.[KO]
./segmented_character_voice/lecs/lecs_9_198.wav|lecs|[KO] 한 가지 정리하는 차원에서 한번 돌아보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_9_199.wav|lecs|[KO] 저희가 살펴본 것들을 다시 결론적으로 살펴보면[KO]
./segmented_character_voice/lecs/lecs_9_200.wav|lecs|[KO] 피지컬 머신에 버추얼 머신 그 다음에 컨테이너[KO]
./segmented_character_voice/lecs/lecs_9_201.wav|lecs|[KO] 그 다음에 그 위에 어플리케이션 대한 전체 스페이스가 있는데[KO]
./segmented_character_voice/lecs/lecs_9_202.wav|lecs|[KO] 그걸 갖다가 피지컬, 버추얼, 컨테이너[KO]
./segmented_character_voice/lecs/lecs_9_203.wav|lecs|[KO] 이것들이 다 용도가 다른 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_204.wav|lecs|[KO] 지금 말씀드렸던 피지컬은 전체를 쓰면서[KO]
./segmented_character_voice/lecs/lecs_9_205.wav|lecs|[KO] 피지컬의 리소스를 가지고 굉장히 큰 일을[KO]
./segmented_character_voice/lecs/lecs_9_206.wav|lecs|[KO] 독점적으로 바로 할 때는 피지컬 머신을 써야지[KO]
./segmented_character_voice/lecs/lecs_9_207.wav|lecs|[KO] 괜히 집을 나눠가지고 복잡하게 만들어 쓰지 말자.[KO]
./segmented_character_voice/lecs/lecs_9_208.wav|lecs|[KO] 다 오버웨드가 있네요.[KO]
./segmented_character_voice/lecs/lecs_9_209.wav|lecs|[KO] 그러니까 이렇게 쓰는 방식일 거예요.[KO]
./segmented_character_voice/lecs/lecs_9_210.wav|lecs|[KO] 버추얼 머신은 리소스가 하나에는 너무 클 때는[KO]
./segmented_character_voice/lecs/lecs_9_211.wav|lecs|[KO] 자기가 나눠서 여러 명이 잘 나눠 쓰도록 하는 게[KO]
./segmented_character_voice/lecs/lecs_9_212.wav|lecs|[KO] 훨씬 더 효율적이니까 나눠서 쓴다.[KO]
./segmented_character_voice/lecs/lecs_9_213.wav|lecs|[KO] 다만 항상 잘 나눠서 쓰는 부분에서[KO]
./segmented_character_voice/lecs/lecs_9_214.wav|lecs|[KO] 실제로 나눠만 주고 잘 안 쓰는 효율성이 생기는[KO]
./segmented_character_voice/lecs/lecs_9_215.wav|lecs|[KO] 비효율성이 생기는 것은 자기가 피하기 위해서[KO]
./segmented_character_voice/lecs/lecs_9_216.wav|lecs|[KO] 컨테이너같이 훨씬 더 유연하게 나눠주고[KO]
./segmented_character_voice/lecs/lecs_9_217.wav|lecs|[KO] 동적으로 할 수 있는 기술까지도 가는 거죠.[KO]
./segmented_character_voice/lecs/lecs_9_218.wav|lecs|[KO] 그래서 컴퓨터를 쓰느냐, 활용한 방법에서[KO]
./segmented_character_voice/lecs/lecs_9_219.wav|lecs|[KO] 피지컬 상태로 그대로, 베어메탈 상태로 그대로 쓰는 거[KO]
./segmented_character_voice/lecs/lecs_9_220.wav|lecs|[KO] 버추얼 머신 상태로 쓰는 거, 컨테이너 상태로[KO]
./segmented_character_voice/lecs/lecs_9_221.wav|lecs|[KO] 이런 것들의 다양한 유스케이스가 나오고[KO]
./segmented_character_voice/lecs/lecs_9_222.wav|lecs|[KO] 그걸 통해서 컴퓨터를 훨씬 더 효율적으로 쓸 수 있는 방법으로[KO]
./segmented_character_voice/lecs/lecs_9_223.wav|lecs|[KO] 기술적인 진화가 계속 지내고 있다.[KO]
./segmented_character_voice/lecs/lecs_9_224.wav|lecs|[KO] 이 부분이 저희가 하는 챕터 3의 결론이랄 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_9_225.wav|lecs|[KO] 이상으로 챕터 3 강의를 마치겠습니다.[KO]
./segmented_character_voice/lecs/lecs_9_226.wav|lecs|[KO] 고맙습니다.[KO]
./segmented_character_voice/lecs/lecs_10_0.wav|lecs|[KO] 안녕하십니까. 챕터 4 컴퓨터 시스템 클라우드 컴퓨팅이라는 주제를 가지고 강연을 시작해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_1.wav|lecs|[KO] 컴퓨터 시스템 클라우드 네이티브 컴퓨팅이라는 부분은 저희가 일단 클라우드라는 부분에 어떤 새로운 컴퓨팅을 활용하는 방법을 저희가 지금 다루게 되는 주제가 됐고요.[KO]
./segmented_character_voice/lecs/lecs_10_2.wav|lecs|[KO] 클라우티브의 네이티브, 자연스러운 컴퓨팅 방법론을 저희가 지금 챕터 3에서 배웠던 컨테이너를 기법을 중심으로 풀어가겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_3.wav|lecs|[KO] 다시 전체적으로 저희가 그동안 배웠던 것을 한번 다시 리뷰해보면 컴퓨터 시스템은 어떤 것이냐, 그거를 활용해서 노프레인 시스템을 중심으로 하는 것을 저희가 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_10_4.wav|lecs|[KO] 그 다음에 저희가 본 것이 컴퓨터를 베어메탈 그 상태로 피지컬, 그 다음에 가상화를 통해서 하는 버추얼, 컨테이너를 중심으로 사용하는 어떤 세 가지 컨테이너를 중심으로 사용하는 방법,[KO]
./segmented_character_voice/lecs/lecs_10_5.wav|lecs|[KO] 이 세 가지를 봤습니다. 그 중에서 컨테이너를 사용하는 방법으로 점점 컴퓨팅 사용의 트렌드가 바뀌어가고 있는데 그 주제를 대변하는 키워드가 클라우드 네이티브 컴퓨팅입니다.[KO]
./segmented_character_voice/lecs/lecs_10_6.wav|lecs|[KO] 그래서 클라우드 네이티브 컴퓨팅이 어떤 모습을 갖고 현재 사람들의 주목을 가지면서 성장을 하고 있는지 살펴보는 시간을 갖도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_7.wav|lecs|[KO] 지금 클라우드 네이티브 컴퓨팅을 하는 서비스의 결국 현재까지 어떻게 진화를 해왔는지 한번 좀 히스토리적으로 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_8.wav|lecs|[KO] 변화의 흐름으로 살펴보겠습니다. 초기 단계에서는 저희가 했던 피지컬 머신을 그대로 써서 그 안에 어플리케이션을 큰 덩어리로 만들어내는[KO]
./segmented_character_voice/lecs/lecs_10_9.wav|lecs|[KO] 모노토닉한, 죄송합니다. 모노릴리틱한 상태로 큰 덩어리를 계속 바로 내는 서비스를, 어플리케이션을 집어넣어서 서비스를 돌리는 형태였습니다.[KO]
./segmented_character_voice/lecs/lecs_10_10.wav|lecs|[KO] 이 서비스 형태가 이 가상화, 그 다음에 클라우드를 활용한 가상화 서비스로 넘어가면서 가상적인 어떤 서버발로 어떤 기능을 나눠주고요.[KO]
./segmented_character_voice/lecs/lecs_10_11.wav|lecs|[KO] 그걸 나눠서 저희가 3티어 아니면 n티어라고 하는 서비스로 서비스를 나눕니다. 대표적으로 저희가 하는 3티어 중에서 웹, 앱, db, 3티어 개념이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_12.wav|lecs|[KO] 그래서 웹서버가 기본적으로 어떤 서비스를 갖다가 기본적으로 호스팅하면 그게 한 버추얼 머신이 담당을 하고요.[KO]
./segmented_character_voice/lecs/lecs_10_13.wav|lecs|[KO] 두번째 버추얼 머신은 앱 버추얼 머신이 그거에 대해서 개인 변환, 일단 리셉션 이스가 해서 어떤 일을 할 사람한테 앱 서버한테 넘겨주면 그걸 담당하는[KO]
./segmented_character_voice/lecs/lecs_10_14.wav|lecs|[KO] 전용 앱 서버가 이제 어떤 클라이언트에 대응되는 앱 서버가 그걸 맞는 일을 처리해주고 중요한 일들은 데이터베이스 서버에 저장을 해서 기록을 남기면서 같이 일을 해주는[KO]
./segmented_character_voice/lecs/lecs_10_15.wav|lecs|[KO] 그래서 앱 어플리케이션 서버하고 이 데이터베이스 서버가 연결돼서 하는 이런 식의 전형적인 어떤 뭐죠 서비스 기반, n티어 서비스 기반의 하는 형태가[KO]
./segmented_character_voice/lecs/lecs_10_16.wav|lecs|[KO] 확장해야 되고 성숙을 했습니다. 이런 단계에서 점점 더 서비스가 더 고도화되고 재사용성 이라는 이런 것을 갖다가 하기 위해서 훨씬 더 좀[KO]
./segmented_character_voice/lecs/lecs_10_17.wav|lecs|[KO] 서비스를 더 가볍게 만들고 더 여기저기서 쉽게 불러 쓸 수 있게 만들자. 그래서 재사용성을 좋게 만들자.[KO]
./segmented_character_voice/lecs/lecs_10_18.wav|lecs|[KO] 마이크로 서비스라는 개념으로 진화를 하고 있습니다. 마이크로 서비스라는 개념은 어떤 개념이냐면 훨씬 더 서비스 자체가 하나하나의 단위로[KO]
./segmented_character_voice/lecs/lecs_10_19.wav|lecs|[KO] 셀프 서스테인드라고 할까요? 아니면 셀프 컨테인트 해가지고 서비스 자체로 완벽하게 준비돼서 그 하나 자체가 어떤 유저가 부르더라도 그걸 서비스를 할 수 있도록 개발되는[KO]
./segmented_character_voice/lecs/lecs_10_20.wav|lecs|[KO] 그런 서비스입니다. 이 서비스를 가지고 필요에 따라서 자기의 맞는 마이크로 서비스를 찾아서 연결하고 연동시켜서 하는 형태[KO]
./segmented_character_voice/lecs/lecs_10_21.wav|lecs|[KO] 이렇게 사는 마이크로 서비스를 그런데 러닝할 때 가장 좋은 엔터티가 바로 컨테이너를 기반으로 한 이 동적으로 서비스를 지원할 수 있는 엔터티가[KO]
./segmented_character_voice/lecs/lecs_10_22.wav|lecs|[KO] 굉장히 유연합니다. 그래서 저희가 지금 이전에서 배웠던 이 컨테이너 방식을 중심으로 해서 이 마이크로 서비스를 태우고 마이크로 서비스들을 갖다가[KO]
./segmented_character_voice/lecs/lecs_10_23.wav|lecs|[KO] A 마이크로 서비스, B 마이크로 서비스 이거를 계속 쭉쭉 붙여서 기술적으로는 저희가 체이닝 한다고 표현하기도 하고요.[KO]
./segmented_character_voice/lecs/lecs_10_24.wav|lecs|[KO] 아니면 서비스 마이크로 서비스를 합성한다고 표현하기도 하는 그런 식으로 연결해서 여러 개의 서비스들이 서로 엮여져 가지고 전체적인 서비스를 완성해 주는[KO]
./segmented_character_voice/lecs/lecs_10_25.wav|lecs|[KO] 이런 상태로 구현되는 마이크로 서비스, 아키테이션 서비스로 현재 진화를 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_26.wav|lecs|[KO] 현재까지 진화된 모습은 이렇고 지금 현재 또 한쪽에서는 새로운 진화가 일어나고 있는데 이 부분은 서버리스 컴퓨팅 이라는 단어로 연결돼서[KO]
./segmented_character_voice/lecs/lecs_10_27.wav|lecs|[KO] 지금 진행하고 있습니다. 서버리스 컴퓨팅 이라는 것은 이걸 좀 더 극단적으로 해가지고 어떤 서비스 기능, 마이크로 서비스 기능이 아니라[KO]
./segmented_character_voice/lecs/lecs_10_28.wav|lecs|[KO] 훨씬 더 동적으로 만들어지는 어떤 기능이 순간적으로 실제로 머신을 갖다가 내가 받았다는 컨테이너라는 것, 잠깐 정리해보겠다. 컨테이너라는 것은 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_10_29.wav|lecs|[KO] 어떤 머신에서 내가 컨테이너를 투입을 해가지고 뭔가 돌리고 있다는 것을 저희가 인식을 하고 쓰는데 컨테이너라는 것까지도 잊어버리고[KO]
./segmented_character_voice/lecs/lecs_10_30.wav|lecs|[KO] 내가 지금 어떤 펑션이 필요한데 그게 잠깐 누가 돌려줘. 근데 그게 어디서 도는지 모르겠어. 서버가 있는지 없는지 모르겠어.[KO]
./segmented_character_voice/lecs/lecs_10_31.wav|lecs|[KO] 이렇게 생각하도록 만들어내는 게 서버리스 컴퓨팅 패러다입니다. 그래서 저희가 지금 컨테이너 방식은 아까 클라우드 네이티브 컴퓨팅 이라는 방식이고[KO]
./segmented_character_voice/lecs/lecs_10_32.wav|lecs|[KO] 클라우드 네이티브 컴퓨팅의 방식이 더 진화를 하게 되면 서버리스 컴퓨팅 방식으로 저희가 진화를 할 거라고 지금 보고 있는 거고요.[KO]
./segmented_character_voice/lecs/lecs_10_33.wav|lecs|[KO] 그 입장에서 훨씬 더 동적인 부분은 서버리스 형태로 가고 조금 더 정적인 부분은 정적이면서 한 것은 컨테이너가 되고 또 훨씬 더 정적이면서 무거운 것들은[KO]
./segmented_character_voice/lecs/lecs_10_34.wav|lecs|[KO] 다시 버추얼 머신을 쓰는 버추얼 머신을 쓰는 방식, 컨테이너를 쓰는 방식, 서버리스 방식이 공유되면서 가는 이런 형태의 진화가 이루어집니다.[KO]
./segmented_character_voice/lecs/lecs_10_35.wav|lecs|[KO] 한 가지 더 추가로 말씀드리면 컨테이너를 중심으로 하는 방식은 마이크로 서비스 아키텍처라고 하는데 서버리스는 그보다 훨씬 더 작은 거니까[KO]
./segmented_character_voice/lecs/lecs_10_36.wav|lecs|[KO] 어떤 사람들은 이걸 나노 서비스 아키텍처 이런 식의 개념으로도 더 보고 있고요. 여기 보면 꼬리표가 하나 더 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_37.wav|lecs|[KO] 이런 것이 기술적으로 해서 컨테이너를 만드는 기술하고 서버리스를 만드는 기술인데 그게 유니컨이라고 해서 훨씬 더 가벼운 커널을[KO]
./segmented_character_voice/lecs/lecs_10_38.wav|lecs|[KO] 제가 OSI 때 배웠던 핵심적인 부분들 뿐만 커널인데 커널이 굉장히 단순화된 커널을 가지고 만들어내는[KO]
./segmented_character_voice/lecs/lecs_10_39.wav|lecs|[KO] 그러니까 좀 미래지향적인 훨씬 더 가벼운 어떤 엔터티가 만들어지는 것도 좀 탐구가 되고 있습니다. 유니커널이라는 부분은 자꾸 짚고 넘어가겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_40.wav|lecs|[KO] 그래서 유니커널이라고 하는 부분을 다른 말로 할 때는 요새는 라이브러리 오퍼링 시스템이라고도 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_10_41.wav|lecs|[KO] 라이브러리 오퍼링 시스템이란 뭐냐면 기본적으로 오퍼링 시스템을 하는 부분에서 오퍼링 시스템에는 원래 이것저것 뭐죠 이거 할 때 저거 할지 모르니까[KO]
./segmented_character_voice/lecs/lecs_10_42.wav|lecs|[KO] 다양한 기능을 다 담아 가지고 원래부터 서비스를 해야 됩니다. 그런데 라이브러리 오퍼링 시스템에서는 어떤 식으로 하냐면 꼭 필요한 라이브러리만[KO]
./segmented_character_voice/lecs/lecs_10_43.wav|lecs|[KO] 셀렉션해서 담아놓고 나머지 들은 다 조금 빼버리는 스타일이라고 볼까요.[KO]
./segmented_character_voice/lecs/lecs_10_44.wav|lecs|[KO] 저희가 하는 오퍼링 시스템도 훨씬 더 컴팩트하게 딱 필요한 것만 남겨놓고 나머지는 털어내는 식으로 해서 굉장히 유니폼하고 좀 작은 커널이[KO]
./segmented_character_voice/lecs/lecs_10_45.wav|lecs|[KO] 담겨있는 오퍼링 시스템 이렇게 보실 수 있고요. 그렇게 되면 훨씬 더 가볍게 어떤 특화된 계산을 할 때는 굉장히 유용하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_10_46.wav|lecs|[KO] 그래서 이런 유니콘의 방식도 지금 조금씩 점점 이렇게 접안을 넓혀가면서 기술적으로 진행하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_10_47.wav|lecs|[KO] 유니콘이라는 것을 한번 추가하고 나면 하나 숙제가 생깁니다. 저희가 그동안 배웠던 버츄얼 머신하고 컨테이너를 비교하는 것은 저희가 이전에 공부를 해서 살았는데[KO]
./segmented_character_voice/lecs/lecs_10_48.wav|lecs|[KO] 유니콘이라는 것은 그럼 다시 뭐가 또 다른 거야라고 하는 이런 질문을 또 하시게 되겠죠. 그래서 컨테이너도 크면서도 컨테이너보다는 조금 다르고[KO]
./segmented_character_voice/lecs/lecs_10_49.wav|lecs|[KO] 훨씬 더 가볍다고 얘기하는데 이런 얘기가 될 수도 있고요. 그래서 그걸 비교하는 지금 슬라이드가 있기 때문에 컨테이너를 쓰는 방식하고 유니콘을 쓰는 방식을 조금 비교를 하시면서[KO]
./segmented_character_voice/lecs/lecs_10_50.wav|lecs|[KO] 구분해 보실 필요가 있습니다. 또 한 가지는 예 그래서 예 그리고 또 한가지 말씀을 드리는 것은 컨테이너를 쓰는 방식에는 어떻게 말씀드렸냐면[KO]
./segmented_character_voice/lecs/lecs_10_51.wav|lecs|[KO] 컨테이너를 실제 어떤 머신에서 그대로 쓸 수 있고 버츄얼 머신 안에서 컨테이너를 쓸 수도 있고 그런 이 방식 그래서 4가지 어떤 지금 사용하는 모드를[KO]
./segmented_character_voice/lecs/lecs_10_52.wav|lecs|[KO] 갖다가 다 비교하면서 유니컨을 이라는게 어떤 부분의 장점을 갖고 있는지도 파악하시면서 공부하시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_10_53.wav|lecs|[KO] 요 방법을 조금 영향을 가지고 한쪽에 숨어 있고요. 그래서 저희가 서버리스 컴퓨팅 이라는것을 기술적으로 설명을 좀 드려야 되겠어서 좀 도입하는 설명만 좀 드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_54.wav|lecs|[KO] 요즘 굉장히 나름대로 뭐지 서서히 이머징 하는 어떤 방법론이라고 보시면 되고요.[KO]
./segmented_character_voice/lecs/lecs_10_55.wav|lecs|[KO] 대표적으로 여러가지 클라우드 서비스 프로바이더리 이쪽 방법론을 굉장히 프로모션을 많이 하고 접연을 열평하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_56.wav|lecs|[KO] 대표적으로 아마존에서는 아마존 웹 서비스 클라우드 쪽에서는 람다라는 이름으로 부르고 있고요.[KO]
./segmented_character_voice/lecs/lecs_10_57.wav|lecs|[KO] 마이크로소프트 아저 클라우드 쪽에서는 펑션 아저 펑션이라고 부르고 있고요. 구글에서는 구글 클라우드 펑션스라고 부르고 있고[KO]
./segmented_character_voice/lecs/lecs_10_58.wav|lecs|[KO] 그 다음에 이 오픈소스 진행해서 오픈 히스크 방식으로 하는 버전이 있고 이게 IBM도 밀고 있는 걸로 알고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_59.wav|lecs|[KO] 그 다음에 이 클라우드 네이티브 로직에서 쿠버네이티브 컨테인 오케스트레이션 오늘 많이 다룰 겁니다. 그걸 방식으로 해가지고 하는 어떤 다른 버전의 서버리스 컴퓨팅 방법론도[KO]
./segmented_character_voice/lecs/lecs_10_60.wav|lecs|[KO] 지금 현재 춘추 전국 시내가 많이 각축을 하고 있는 상태고요. 핵심 이벤트션은 이렇습니다.[KO]
./segmented_character_voice/lecs/lecs_10_61.wav|lecs|[KO] 어떤 이벤트가 일어나면 그거에 대해서 펑션이 잠깐 돌아서 뭐지 순간적으로 있다가 필요가 없어지면 사라져버리고 나는[KO]
./segmented_character_voice/lecs/lecs_10_62.wav|lecs|[KO] 서버가 리스이기 때문에 내가 어떤 일을 해줄 필요가 있으면 그냥 순간적으로 그게 생성이 돼서 동적으로 커버해 주고 사라져버려서 나는 서버가 있었는지 없었는지 모르게 되는게[KO]
./segmented_character_voice/lecs/lecs_10_63.wav|lecs|[KO] 서버리스 컴퓨팅입니다. 그래서 요 방점까지도 같이 생각을 해서 꼭 이해를 해주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_64.wav|lecs|[KO] 그러면 이것들은 연결해서 이제 다시 돌아가서 보겠습니다. 저희가 지금 핵심적으로 보는 것은 클라우드 네이티브에서는 마이크로 서비스라고 하는 방식을 통해 가지고[KO]
./segmented_character_voice/lecs/lecs_10_65.wav|lecs|[KO] 마이크로 서비스로 가는 덩어리들을 가지고 그 덩어리들을 쭉쭉 연결해서 어떤 서비스를 실시하는 부분이 되고요.[KO]
./segmented_character_voice/lecs/lecs_10_66.wav|lecs|[KO] 마이크로 서비스라는게 여러가지 기능들을 갖다가 미리 갖고 있는 뭐지 잘 정리되어 있는 서비스들의 어떤[KO]
./segmented_character_voice/lecs/lecs_10_67.wav|lecs|[KO] 준비된 어떤 뭐지 모임이라고 하면 그에서 골라내는 거죠. 요거는 이 마이크로 서비스 쓰고 저거는 저 마이크로 서비스 쓰고 이렇게 되는 거죠. 그걸 갖다가[KO]
./segmented_character_voice/lecs/lecs_10_68.wav|lecs|[KO] 엮어서 엮는다는 걸 저희가 체인링 한다고 말씀을 드렸고요. 체인링 해서 붙여서 활용하는 이런 상태가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_10_69.wav|lecs|[KO] 그럼 이것들을 하는 쪽에서 가장 중요한 것은 이 부분이 계속 체인링을 해서 쓰고 그 다음에 반복하고 이걸 반복적으로 계속 붙이고[KO]
./segmented_character_voice/lecs/lecs_10_70.wav|lecs|[KO] 연결하고 그 다음에 그게 잘 도는지 관리하는 이런 식의 굉장히 문제가 생기겠죠. 그래서 마이크로 서비스를 가지고 서비스를 실현하는 부분에서는 기존에 있는[KO]
./segmented_character_voice/lecs/lecs_10_71.wav|lecs|[KO] 마이크로 서비스를 가지고 탁탁탁 묻혀가지고 만들어내기 때문에 굉장히 뭐지 순식간에 새로운 서비스를 창출할 수 있는 가장 큰 장점이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_72.wav|lecs|[KO] 그래서 그걸 저희가 애질러티라고 부르는 굉장히 빠르게 새로운 서비스를 뭐죠? 만들어낼 수 있는 이 힘이 가장 요즘 하는 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_10_73.wav|lecs|[KO] 서비스 우선 시대죠. 저희가 요즘 좋은 서비스 아이디가 있으면 빠르게 만들어서 그 사람들을 퍼뜨려서 그 서비스가 사람들의 관심을 끌면은 바로[KO]
./segmented_character_voice/lecs/lecs_10_74.wav|lecs|[KO] 그거에 대한 어떤 페이먼트로 이어지고 페이먼트가 이어지면 그 돈을 모아서 다시 개발을 해서 빠르게 어떤 서비스를 만들어서 시장을 진입해서[KO]
./segmented_character_voice/lecs/lecs_10_75.wav|lecs|[KO] 키워 판을 키워내는 사람이 다 성공한다. 이 판에서는 애질러티가 굉장히 중요합니다. 그래서 애질러티를 살려는 방법에서는 이 컨테이너 부분의 방법이[KO]
./segmented_character_voice/lecs/lecs_10_76.wav|lecs|[KO] 굉장히 효과적이다. 이렇게 되는 거죠. 이 애질러티를 살려내기 위해서는 결국 뒤에 있는 숨어있는 부분이 있습니다. 숨어있는 것은 자동화를 이루지 않는 상태에서[KO]
./segmented_character_voice/lecs/lecs_10_77.wav|lecs|[KO] 애질러티는 의미가 없습니다. 빠르게 만들었는데 뒷처리가 되고 자꾸 뭐죠? 문제가 생기는 거죠. 문제가 생기지 않으려면 자동학적으로 서비스를 만들고[KO]
./segmented_character_voice/lecs/lecs_10_78.wav|lecs|[KO] 새로 고치는 것도 자정으로 되고 그래서 저희가 얘기하는 걸 이걸 다른 말로는 CICD라는 말이에요. 컨티뉴스하게 계속적으로 지속적으로 인테그레이션이 서비스 아까[KO]
./segmented_character_voice/lecs/lecs_10_79.wav|lecs|[KO] 마이클서비스를 갖다가 통합해서 체인해서 뭐지? 통합하는 개념이 있고요. 통합하면서 통합된 걸 계속 계속적으로 다시 디플로이 하면서 확인하고 문제가 없는지[KO]
./segmented_character_voice/lecs/lecs_10_80.wav|lecs|[KO] 확인해서 정리하는 걸 이 전체적인 자동화 프로세스에 집어넣어서 해결하는 판을 만들고 그 상태에서 신속하게 서비스를 투입해야지만 지금 얘기했던 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제성 경제[KO]
./segmented_character_voice/lecs/lecs_10_81.wav|lecs|[KO] 많이 나오는 이 CICD라는 어떤 자동화의 원리를 갈 때 사람들이 어떤 얘기를 하면 디벨로퍼하고 오퍼레이터가 한몸이 돼서 서로 싸우지 않고[KO]
./segmented_character_voice/lecs/lecs_10_82.wav|lecs|[KO] 어떤 문제가 생겼어요? 이거는 뭐지? 저쪽도 문제야. 내가 나는 문제없어. 서로 책임을 미루는 게 아니라 서로 협력을 해서 한몸처럼 일을 해서 협력을 하고[KO]
./segmented_character_voice/lecs/lecs_10_83.wav|lecs|[KO] 개발자하고 운영자가 협력해서 일하는 이 체제 문제도 같이 가는 패러다입니다. 이것들을 같이 해가지고 진화된 것을 만들어 놓고[KO]
./segmented_character_voice/lecs/lecs_10_84.wav|lecs|[KO] 이거에서 새로운 서비스를 창출할 수 있는 힘을 가진 회사들은 새로운 서비스를 순간적으로 치고 나갈 수 있는 힘이 생겨서[KO]
./segmented_character_voice/lecs/lecs_10_85.wav|lecs|[KO] 시장에서 좋은 아이디어를 가지고 생산할 수 있다. 여기 이제 한 가지 가겠습니다. 그럼 마이크로서비스 아이디어가 실제로 시장에서 많이 확산이 되고 있는데[KO]
./segmented_character_voice/lecs/lecs_10_86.wav|lecs|[KO] 이유는 뭔가요? 클라우드 네이티브 컴퓨팅 또는 이 클라우드 베이스라는 인프라가 지금 현재 전 세계적으로 펄쳐지면서 어디서나 클라우드를 이용해서 원하는 리소스를 얻을 수 있는 상태로 준비가 돼 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_10_87.wav|lecs|[KO] 그걸 그냥 이용할 수 있는 내가 아이디어에서도 이 마이크로서비스 베이스로 서비스할 수 있는 상태가 되면 그 인프라는 얼마든지 빌려 쓸 수 있고[KO]
./segmented_character_voice/lecs/lecs_10_88.wav|lecs|[KO] 사람들이 쓰면서 페이를 해주기 때문에 그걸 통해서 다시 인프라에 빌려쓴 비용을 상세하고 나는 더 추가적인 개발을 해서 진행할 수 있는 판이 나온 거죠.[KO]
./segmented_character_voice/lecs/lecs_10_89.wav|lecs|[KO] 그래서 이 판으로 지금 선순환 구조를 서서히 타고 있는 전환들이 일어나고 있습니다. 물론 아직은 기존에 있는 서비스들이 클라우드 네이티브 또는 마이크로서비스 하는 구조로 지금 전환이 되고 있지만[KO]
./segmented_character_voice/lecs/lecs_10_90.wav|lecs|[KO] 새로운 어떤 개발 쪽에서는 점점 이쪽으로 서서히 마이그레이션 하는 걸로 될 거예요. 지금 그거는 대세적인 흐름으로 알려져 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_91.wav|lecs|[KO] 근데 지금 현재 이거를 좀 더 다시 보도록 하겠습니다. 컨테일하는 부분은 어떤 식이었냐면 어떤 리소스에 동적으로 투입되어 가지고 어떤 리소스가 있으면 그게 자기가 필요한 만큼 활용하면서 쓴다고 말씀드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_10_92.wav|lecs|[KO] 근데 어떤 문제점이 있냐면 만약에 어떤 리소스가 있는데 많은 컨테인들이 들어와 가지고 나도 이걸 사용해야 되겠다 하면 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_10_93.wav|lecs|[KO] 서로 낑긴다 그럴 거죠. 그렇게 되면 문제가 생깁니다. 그래서 그걸 해설하기 위해서 컨테인을 활용하는 기술에서 중요한 기술 요소가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_10_94.wav|lecs|[KO] 뒤에서 이런 컨테이너들이 뭐지? 평화롭게 잘 서로 쓰고 있는지를 정리해주는 그래서 컨테이너를 갖다가 오케스트라의 주의자처럼 오케스트레이션을 쓰는 그런 기능.[KO]
./segmented_character_voice/lecs/lecs_10_95.wav|lecs|[KO] 이게 굉장히 중요한 기능이 됩니다. 그래서 그걸 하기 위해서 도커 쪽에서는 도커 컨테이너라는 수감이라는 어떤 기술을 밀었었고요.[KO]
./segmented_character_voice/lecs/lecs_10_96.wav|lecs|[KO] 또 메이소스라고 하는 다른 어떤 스케줄링 방법을 쓰는 기술도 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_10_97.wav|lecs|[KO] 그리고 쿠버네이티라는 어떤 구글에서 오픈소스로 만든 어떤 기술이 참파전을 벌였었고요.[KO]
./segmented_character_voice/lecs/lecs_10_98.wav|lecs|[KO] 참파전을 벌린 게 한 2015년부터 참파전을 벌여서 한 2년 정도 지나서 게임이 끝났습니다.[KO]
./segmented_character_voice/lecs/lecs_10_99.wav|lecs|[KO] 승자는 쿠버네이티가 될 거예요. 그동안 도커 수감도 일부를 쓰지만, 메이소스 일부를 쓰지만 굉장히 비중이 점점 줄고 대세론 한쪽으로 모이는 상태로 갔다.[KO]
./segmented_character_voice/lecs/lecs_10_100.wav|lecs|[KO] 그래서 컨테이너 오케스트레이션이 하나로 갈 수밖에 없는 게 시장에서는 오케스트레이터 방법을 여러 가지 써가지고는 여전히 다시 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_10_101.wav|lecs|[KO] 한쪽에서 개발한 부분은 오케스트레이터의 역할이 굉장히 중요합니다.[KO]
./segmented_character_voice/lecs/lecs_10_102.wav|lecs|[KO] 오케스트레이터가 내가 개발한 걸 지원하고 한 상태에서 서비스가 개발되어야 되는데 만약에 그게 동떨어지면 다른 환경에 가면 또 다시 개발이 돼야 되는 문제가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_10_103.wav|lecs|[KO] 그래서 이 대세 싸움에서는 한쪽으로 지금 승자가 빨리 모인 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_10_104.wav|lecs|[KO] 그 모임 방법을 가지고 서포트하는 쪽에서 가게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_10_105.wav|lecs|[KO] 그럼 지금 승자가 됐다고 하는 쿠버네이티라고 하는 컨테이너 오케스트레이션에 대해서 조금은 살펴볼 필요가 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_10_106.wav|lecs|[KO] 그래서 기술적으로 재산 측 들어가는 것은 굉장히 어렵고요.[KO]
./segmented_character_voice/lecs/lecs_10_107.wav|lecs|[KO] 지금 컨테이너를 쓰는 거에 대해서 어떤 앱스트랙션을 조금 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_10_108.wav|lecs|[KO] 제가 컨테이너를 써야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_10_109.wav|lecs|[KO] 지휘자는 어떤 쪽에서?[KO]
./segmented_character_voice/lecs/lecs_10_110.wav|lecs|[KO] 쿠버네이티마스터라는 쪽에서 지휘자가 있다고 생각하시면 되고요.[KO]
./segmented_character_voice/lecs/lecs_10_111.wav|lecs|[KO] 그 지휘자가 그 쪽에 있는데 지휘자가 내가 지금 이런 ABCD라는 어떤 머신들에 내가 컨테이너를 투입해서 지금 쓸 수 있다.[KO]
./segmented_character_voice/lecs/lecs_10_112.wav|lecs|[KO] 이렇게 알 수 있게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_10_113.wav|lecs|[KO] 그럼 내가 어디에 쓸 수 있느냐?[KO]
./segmented_character_voice/lecs/lecs_10_114.wav|lecs|[KO] 쓸 수 있는 후보들을 갖다가 저희가 이 쿠버네이티라는 자기가 노드라고 생각합니다.[KO]
./segmented_character_voice/lecs/lecs_10_115.wav|lecs|[KO] 그러니까 노드들이 있고 노드들의 풀이 있다.[KO]
./segmented_character_voice/lecs/lecs_10_116.wav|lecs|[KO] 노드가 노드 하나 둘 셋 넷 해서 노드가 전체 풀이 있고 이 풀에다가 내가 원하는 컨테이너를 집어 넣겠다.[KO]
./segmented_character_voice/lecs/lecs_10_117.wav|lecs|[KO] 이렇게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_10_118.wav|lecs|[KO] 그런데 집어 넣을 때, 쿠버네이티가 지금 집어 넣을 때 컨테이너를 하나하나를 집어 넣는 단위로 집어 넣는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_10_119.wav|lecs|[KO] 내가 이 어떤 특정한 일을 하는 컨테이너들 포드라고 하는 어떤 약간 셋을 만들어서 그 셋을 이 어떤 노드에 집어 넣는 개념입니다.[KO]
./segmented_character_voice/lecs/lecs_10_120.wav|lecs|[KO] 그래서 그러니까 노드 안에다가 포드라는 어떤 개념을 가지고 컨테이너들을 하나가 들어갈 수도 있고 여러 개가 들어갈 수도 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_10_121.wav|lecs|[KO] 그래서 포드별로 내가 가서 이 노드에 있는 리소스를 가지고 이 포드가 내가 어떤 뭐지?[KO]
./segmented_character_voice/lecs/lecs_10_122.wav|lecs|[KO] 지금 여기 그림에서 보시면은 청색하고 녹색의 어떤 이 두 가지 포드가 있는 걸 보실 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_10_123.wav|lecs|[KO] 그래서 청색 포드를 저희가 좌측에 있는 노드에 하나 집어 넣고[KO]
./segmented_character_voice/lecs/lecs_10_124.wav|lecs|[KO] 그래서 이런 서비스를 하도록 그냥 활동을 하는 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_0.wav|lecs|[KO] 그 다음에 지금 적색은 보면은 니가 리소스를 많이 필요하니까 왼쪽 노드에도 퍼드가 만들어지고 오른쪽에도 만들어지는 상태[KO]
./segmented_character_voice/lecs/lecs_11_1.wav|lecs|[KO] 이런 식으로 돼서 오케스트레이터가 기본적으로 어? 지금 얘는 좀 놀고 있고 좀 여유가 있는 것 같아 여기가서 돌리면 괜찮을 거야 이렇게 조정해 주는 거죠[KO]
./segmented_character_voice/lecs/lecs_11_2.wav|lecs|[KO] 그걸 원리를 가지고 컨테이너가 오케스트레이션이 되고 오케스트레이션이 되는 방식에서[KO]
./segmented_character_voice/lecs/lecs_11_3.wav|lecs|[KO] 이게 저로 조율이 돼서 리소스를 잘 쓰게 하고 서로 충돌이 피하도록 정보가이드 하면서 하는 역할.[KO]
./segmented_character_voice/lecs/lecs_11_4.wav|lecs|[KO] 이걸 책임지는 애가 쿠버네이션 마스터라고 하는 이 기본적인 머신에서 존재하고 동작하고 있는 지금 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_11_5.wav|lecs|[KO] 쿠버네이션 마스터라는 엔터티죠. 그래서 그 마스터가 지금 컨테이너 오케스트레이션을 진행하는 갱심으로 완성이 되는 게[KO]
./segmented_character_voice/lecs/lecs_11_6.wav|lecs|[KO] 쿠버네이션 컨테이너 오케스트레이션입니다. 기본적으로 개념적으로 설명을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_11_7.wav|lecs|[KO] 이 내용에 대해서 조금 더 살펴보겠습니다. 지금 말씀드렸던 개념을 실제적으로 어떻게 적용되는 건지 조금 보는 케이스라서[KO]
./segmented_character_voice/lecs/lecs_11_8.wav|lecs|[KO] 이거는 저희가 복잡한 조금 더 디테일을 들어가는 측면에서 전체적인 개념을 말씀드립니다. 마스터가 어떤 노드들에 내가 원하는 퍼드들을 적당하게 뿌리고[KO]
./segmented_character_voice/lecs/lecs_11_9.wav|lecs|[KO] 걔가 이런저런 하도로 서로 엮어낸다. 이렇게 말씀을 드리는 게 맞을 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_11_10.wav|lecs|[KO] 그런데 이걸 할 때 사실 기술적으로 숨어있는 이슈들이 여러 가지가 조금씩 숨어있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_11.wav|lecs|[KO] 그러니까 내가 어떤 서비스를 위한 컨테이너 오케스트레이션이다. 내가 지금 오케스트레이션 주의자가 교양곡을 할지 아니면 협주곡을 할지[KO]
./segmented_character_voice/lecs/lecs_11_12.wav|lecs|[KO] 뭔가 다른 방식이 여러 가지 방식이겠죠. 그리고 이런 타입의 좀 잔잔하게 한다. 이런 것들 여러 가지 있죠.[KO]
./segmented_character_voice/lecs/lecs_11_13.wav|lecs|[KO] 그런 것들을 하는 약간 가이드라인의 어떤 비슷한 기술들이 오케스트레이터가 가지고 있는 기술입니다.[KO]
./segmented_character_voice/lecs/lecs_11_14.wav|lecs|[KO] 그래서 오퍼레이션을 할 수 있는 여러 가지 기술들의 가이드라인을 가지고 체계를 할 수 있는 기술이 개발돼서 진화하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_15.wav|lecs|[KO] 그래서 컨테이너 오케스트레이션 부분하고 오퍼레이터 이런 개념에 대해서 조금 설명을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_11_16.wav|lecs|[KO] 다시 이제 결론적으로 가보겠습니다. 말씀드렸듯이 컨테이너 오케스트레이션이 굉장히 중요한 역할을 하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_11_17.wav|lecs|[KO] 그 오케스트레이션에서는 근본적으로 저희가 하는 Kubernetes 방법이 기본적으로 전체적인 대세를 얻어서 여기저기 저변을 가지고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_18.wav|lecs|[KO] 그럼 컨테이너 오케스트레이션 기술은 여러 가지 기술을 저희가 쓰고 있었고요.[KO]
./segmented_character_voice/lecs/lecs_11_19.wav|lecs|[KO] 아까 말씀드렸던 Mesos, Kubernetes, Docker Swarm 이런 방법 말고도 지금 그 동네 클라우드 사업자들은 자기가 갖고 있는 플랫폼 에저 서비스 파스라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_11_20.wav|lecs|[KO] 그거마다 사실은 오케스트레이션 하는 기술을 가지고 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_11_21.wav|lecs|[KO] 그렇지만 비공개 기술인 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_22.wav|lecs|[KO] 그런데 지금 현재는 오픈된 기술을 가지고 어떤 한 흐름이 대세가 돼서 사람들이 유저 엔드 유저들이[KO]
./segmented_character_voice/lecs/lecs_11_23.wav|lecs|[KO] 내가 이런 오케스트레이션을 서포트해주면 좋겠어 라고 다들 얘기하기 시작했고요.[KO]
./segmented_character_voice/lecs/lecs_11_24.wav|lecs|[KO] 그 버전에서 지금 컨테이너 부분을 가지고 하는 지금 Kubernetes라는 오케스트레이션을 하는 방법이 대세가 돼서 이게 점점 회사역이 확산이 됐습니다.[KO]
./segmented_character_voice/lecs/lecs_11_25.wav|lecs|[KO] 그래서 아마존이 ECS라고 하는 자신이 갖고 있는 컨테이너 오케스트레이션 서비스를 EKS라는 버전으로 확장을 해서 추가로 지원하고[KO]
./segmented_character_voice/lecs/lecs_11_26.wav|lecs|[KO] 마이크로소프트의 ACS가 AKS, C자가 K자로 바뀌는 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_27.wav|lecs|[KO] 컨테이너의 C자가 Kubernetes의 K자로 바뀌는 이런 흐름으로 지금 대세가 전환되면서[KO]
./segmented_character_voice/lecs/lecs_11_28.wav|lecs|[KO] Kubernetes가 굉장히 전체를 천하를 평정하는 느낌으로 진화가 되는게 작년부터 금년까지 계속 일어나고 있는 일입니다.[KO]
./segmented_character_voice/lecs/lecs_11_29.wav|lecs|[KO] 말씀을 드렸다면 Kubernetes가 전체적인 부분의 컨테이너 오케스트레이션의 어떤 전체적인 천하 평정을 했다.[KO]
./segmented_character_voice/lecs/lecs_11_30.wav|lecs|[KO] 그래서 자료를 보시면 왕관을 쓰고 있는 모습을 보시고요.[KO]
./segmented_character_voice/lecs/lecs_11_31.wav|lecs|[KO] 왕관을 쓰는 부분에서 하기 위해서는 뭔가 이 액티비티를 하는 엔터티가 있어야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_11_32.wav|lecs|[KO] 그 액티비티를 클라우드 네이티브 컴퓨팅 파운데이션의 엔터티가 나와서 이 엔터티가 여러 사람들을 갖다 모아서[KO]
./segmented_character_voice/lecs/lecs_11_33.wav|lecs|[KO] 그거에 대한 표준적인 아이디어도 만들어내고 진행하는 걸 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_34.wav|lecs|[KO] 그래서 요즘 굉장히 액티브하게 성장을 하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_11_35.wav|lecs|[KO] 폭발적으로 성장하고 있다고 말씀을 드릴 수 있고 많은 업체들이 기본적으로 플래티넘 레벨의 스폰서십을 합니다.[KO]
./segmented_character_voice/lecs/lecs_11_36.wav|lecs|[KO] 플래티넘 레벨의 스폰서십을 가장 비싸게 후원하는 데서 굉장히 많은 돈을 들고 연예비를 내면서[KO]
./segmented_character_voice/lecs/lecs_11_37.wav|lecs|[KO] 이걸 활동을 후원하면서 성장을 시키고 있는 판이 만들어졌다.[KO]
./segmented_character_voice/lecs/lecs_11_38.wav|lecs|[KO] 이게 그걸 실정으로 보여주는 거고요.[KO]
./segmented_character_voice/lecs/lecs_11_39.wav|lecs|[KO] 그래서 이 CNCF라는 어떤 조직이 이 부분의 활동을 많이 리딩하고 있는데[KO]
./segmented_character_voice/lecs/lecs_11_40.wav|lecs|[KO] 리딩하는 상황에서 다음 자료를 보도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_11_41.wav|lecs|[KO] 말씀드렸던 클라우드 네이티브 컴퓨팅 파운데이션에서 이런 활동을 하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_11_42.wav|lecs|[KO] 지금 자료를 보시면 이 클라우드 컴퓨팅 활동이 어떤 시기적으로 어떤 흐름을 가지고 있었는지 정리한 부분이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_43.wav|lecs|[KO] 결국은 기본적으로 가상화 기술, 컨테이너 기술, 클라우드 기술,[KO]
./segmented_character_voice/lecs/lecs_11_44.wav|lecs|[KO] 그 다음에 컨테이너 기술을 말씀드린 컨테이너 기술이 보편화된 더커 전에 다른 원래 컨테이너 기술이 있었다고 말씀을 드렸었고요.[KO]
./segmented_character_voice/lecs/lecs_11_45.wav|lecs|[KO] 더커가 그걸 갖다가 대중화를 이끌었다 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_11_46.wav|lecs|[KO] 그리고 클라우드 네이티브 컴퓨팅이라는 게 흐름을 가는 2015년부터 해서 이 흐름을 주도하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_47.wav|lecs|[KO] 이 흐름에서 주도하는 기본적인 가치가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_48.wav|lecs|[KO] 어떤 가치를 추구하냐면 마이크로 서비스를 가지고 자동화된 서비스를 만들고[KO]
./segmented_character_voice/lecs/lecs_11_49.wav|lecs|[KO] 그 자동화된 서비스를 디벨로퍼와 오퍼레이터가 협심해서 만들고[KO]
./segmented_character_voice/lecs/lecs_11_50.wav|lecs|[KO] 그걸 통해서 새로운 서비스가 빨리빨리 시장에 들어가서 가치를 창조하고[KO]
./segmented_character_voice/lecs/lecs_11_51.wav|lecs|[KO] 시장에서 요구되는 만큼 먼저 팍팍팍 키워서 스케일링하고 퍼져나가는 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_52.wav|lecs|[KO] 또 그 다음에 실제로 보면 안전하고 견실하게 돌 수 있게 만들어지는 그 가치를 가지고요.[KO]
./segmented_character_voice/lecs/lecs_11_53.wav|lecs|[KO] 그거를 공통의 어떤 표준적인 부분을 가지고 아니면 재사용할 수 있는 소프트를 가지고 같이 쓰면서[KO]
./segmented_character_voice/lecs/lecs_11_54.wav|lecs|[KO] 따로따로 소프트를 개발하는 게 아니라 같은 소프트를 가자 이런 식으로 하는 활동을 프로모션하는 CNCF가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_55.wav|lecs|[KO] 여기서 실제적으로 기술적인 액티비티를 어떻게 해서 그걸 만들려고 하느냐.[KO]
./segmented_character_voice/lecs/lecs_11_56.wav|lecs|[KO] 첫 번째는 컨테이너를 쓰는데 OCI적인 컨테이너를 가지고 활용해서 하자.[KO]
./segmented_character_voice/lecs/lecs_11_57.wav|lecs|[KO] 저희가 말하는 다양한 컨테이너를 표준적으로 호환되게 할 수 있는 상태로 쓰면서 하는 컨테이너를 하자.[KO]
./segmented_character_voice/lecs/lecs_11_58.wav|lecs|[KO] 요게 한 가지 주제고요. 두 번째는 오케스트레이션을 하는 것에서 말씀드렸던 Kubernetes 오케스트레이션을 통해 가지고[KO]
./segmented_character_voice/lecs/lecs_11_59.wav|lecs|[KO] 조율을 될 때 컨테이너 조율이 한 어떤 필라서피나 하나 어떤 방식으로 여러가지 하면 여기서 가면 이렇게 조율되고[KO]
./segmented_character_voice/lecs/lecs_11_60.wav|lecs|[KO] 저렇게 해서 잡음이 생기는 게 아니라 효과적으로 어떤 일체감 있는 조율이 여기서도 되고 저기서도 돼서 내가 옮겨다녀도[KO]
./segmented_character_voice/lecs/lecs_11_61.wav|lecs|[KO] 자연스럽게 할 수 있는 조율. 중요한 포인트입니다. 클라우드 네이티브라는 클라우드 리소스가 여러 개 있는데 내가 A라는 클라우드에서 쓰다가[KO]
./segmented_character_voice/lecs/lecs_11_62.wav|lecs|[KO] B라는 클라우드가 더 좋으면은 넘어갈 수 있어야 되는데 그걸 못하게 되는 거 굉장히 위험하죠. 사용자 입장에서는 나쁜 거 거든요.[KO]
./segmented_character_voice/lecs/lecs_11_63.wav|lecs|[KO] 그래서 사용자들이 원하는 아이디어란 것은 내 오케스트레이션 원리를 지용하면 어디가서도 뭐지 내가 가장 좋고 최적인 리소스를 찾아서[KO]
./segmented_character_voice/lecs/lecs_11_64.wav|lecs|[KO] 그냥 돈 주고 필요한 만큼 써서 활용하는 이런 개념. 그래서 다이내믹 오케스트레이션이 표준적으로 되는 부분이 중요합니다.[KO]
./segmented_character_voice/lecs/lecs_11_65.wav|lecs|[KO] 하나 더 추가하겠습니다. 지금 말씀드렸던 컨테이너들이 지금 기본적으로 이런 말씀드렸던 어떤 서비스를 창출하는 것에 대해서는 대화를 해야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_11_66.wav|lecs|[KO] 대화를 하는 부분에서 공통적인 호환적인 방식으로 대화를 하는 걸로 개발이 돼야지만 기본적으로 개발자들이 계속적으로 어떤 어플리케이션들을[KO]
./segmented_character_voice/lecs/lecs_11_67.wav|lecs|[KO] 다양한 형태에서 쓸 수가 있겠죠. 그래서 이걸 지원할 수 있는 CNI라고 하는 컨테이너네트워킹 인터페이스가 정의가 되어 있고요.[KO]
./segmented_character_voice/lecs/lecs_11_68.wav|lecs|[KO] 이 상태의 네트워킹 인터페이스 원리에 따라서 대화를 하도록 프로그램을 짜주면 서로 호환적인 대화를 할 수 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_69.wav|lecs|[KO] 이 대화에는 컨테이너끼리 하는 대화, 컨테이너가 버추얼 머신하고 하는 대화, 컨테이너가 다시 피지컬 머신하고 하는 대화, 컨테이너가 외부하고 하는 대화,[KO]
./segmented_character_voice/lecs/lecs_11_70.wav|lecs|[KO] 이 전체적인 부분을 다 포함하는 대화로 생각하시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_11_71.wav|lecs|[KO] 여기에 추가적으로 남아있는 중요한 이슈가 있습니다. 컨테이너가 작업을 하고요. 작업을 하는 부분에서 자기가 하는 일에 대해서 결과를 세이브를 했다가[KO]
./segmented_character_voice/lecs/lecs_11_72.wav|lecs|[KO] 결국은 최종적으로 어떻게 사라지는 존재입니다. 저희가 하는 가상 머신 집처럼 계속 남아서 어떤 일을 유지하는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_11_73.wav|lecs|[KO] 자기가 할 일이 나고 나면 정리하고 사라진다. 그러면 중간적으로 하는 부분에서 계속 자기가 하는 일에 기록을 남기듯이 정리하고 세이브해 놓은 이 스토리지하고 연결성도 굉장히 중요합니다.[KO]
./segmented_character_voice/lecs/lecs_11_74.wav|lecs|[KO] 특히 컨테이너가 하는 일이 연속성이 필요할 때는 더 중요하고요.[KO]
./segmented_character_voice/lecs/lecs_11_75.wav|lecs|[KO] 아니면 그렇지 않고 잠깐 손님을 안내하는 것처럼 잠깐 안내했다가 끝나고 다음 손님을 다시 안내하는 것은 원타임이겠죠.[KO]
./segmented_character_voice/lecs/lecs_11_76.wav|lecs|[KO] 그걸 갖다가 저희가 스테이트리스한 서비스라고 하는데 컨테이너를 쓸 때는 저장의 부분의 중요성이 상대적으로 줄어듭니다.[KO]
./segmented_character_voice/lecs/lecs_11_77.wav|lecs|[KO] 그렇지만 그렇지 않고 계속 이 서비스가 연속성을 가지고 갈 때는 굉장히 중요한 문제가 되죠.[KO]
./segmented_character_voice/lecs/lecs_11_78.wav|lecs|[KO] 이 저장하는 문제를 스토리지와 인터페이스를 똑같이 표준적으로 만들어서 CSL은 인터페이스를 통해서 컨테이너 스토리지 인터페이스를 통해서 표준적으로 만들고[KO]
./segmented_character_voice/lecs/lecs_11_79.wav|lecs|[KO] 이 방법에 따라서 표준적으로 저장되도록 하는 개발을 만들어 놓으면 다양한 컨테이너 스토리지 지원 체계하고 호환되어 있을 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_80.wav|lecs|[KO] 그래서 말씀드렸던 CSI, CNI 그리고 앞에서 말씀드렸던 OCI라는 세 가지 방법을 전체로 엮어서 하나로 만들고[KO]
./segmented_character_voice/lecs/lecs_11_81.wav|lecs|[KO] 그거를 활용하는 컨테이너 활용하는 이 방식을 갖다가 점점 표준적으로 만들어내고[KO]
./segmented_character_voice/lecs/lecs_11_82.wav|lecs|[KO] 이거를 지원하도록 만드는 일이 클라우드 네트컴퓨팅, 그 다음에 클라우드 네트컴퓨팅을 하는 CNCF라는 쪽에서 진행을 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_83.wav|lecs|[KO] 이 내용에서 금방 살펴봤던 CNI, 그 다음에 CSI에 대해서 조금 기술적으로 조금만 더 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_11_84.wav|lecs|[KO] CNI가 말씀드렸던 것처럼 기본적으로 대화라고 하는 말씀을 드렸고요. 대화라는 것을 저희가 네트워킹을 한다고 다시 바꿔서 말을 드릴 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_11_85.wav|lecs|[KO] 네트워킹을 할 때는 내가 지금 이쪽이랑 연결이 되고 연결이 돼서 이런 메시지를 내가 전할 수 있다.[KO]
./segmented_character_voice/lecs/lecs_11_86.wav|lecs|[KO] 연결이 돼서 이런 메시지가 내가 말하는 게 저에게 전해진다. 이 두 가지 개념을 가지고 있고요.[KO]
./segmented_character_voice/lecs/lecs_11_87.wav|lecs|[KO] 그래서 실제로 컨테이너가 얘기하는데 실제로 보면 다른 쪽에선 이 컨테이너하고 대화할 수 있게 만들어줘야 되죠.[KO]
./segmented_character_voice/lecs/lecs_11_88.wav|lecs|[KO] 그래서 이런 문제가 숨어 있습니다. 컨테이너가 하는 부분에서 어떤 내가 주소를 받아서 이 고유한 주소를 받아서 밖에 있는 거랑 내가 어떤 이 주소랑 나한테 연락하면 나랑 찾아올 수 있을 거야.[KO]
./segmented_character_voice/lecs/lecs_11_89.wav|lecs|[KO] 이런 문제가 있겠죠. 이 문제를 갖다가 해결하기 위해서 인터넷 쓰고 있는 어떤 주소 할당하는 방법론을 이 컨테이너 버전으로 만들어서 그 안에 집어넣고[KO]
./segmented_character_voice/lecs/lecs_11_90.wav|lecs|[KO] 그래서 나를 내 컨테이너를 찾아올 수 있게 하고 있습니다. 그래서 지금 말씀드리는 게 어떤 ip 주소를 ip 주소를 포드라고 하는 컨테이너를 아까 노드 안에다가 하는 어떤 엔터티크 덩어리가 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_11_91.wav|lecs|[KO] 거기에다가 ip 주소를 부여하고 그게 유니크한 ip 주소를 통해서 찾아오게 하는 이 방법론을 베이스로 하고 여기에 추가적으로 네트워크 대화를 하는 인터페이스를 정의해서 만들어놓은 게 cni입니다.[KO]
./segmented_character_voice/lecs/lecs_11_92.wav|lecs|[KO] cni가 다양한 어떤 기술적인 네트워킹 방법론에 따라서 cni를 서포트할 수 있게 만든다. 하나 추가하면 cni라는 게 있고 내가 지금 네트워킹을 하는 네트워크 서포트 방법이 있고[KO]
./segmented_character_voice/lecs/lecs_11_93.wav|lecs|[KO] cni를 갖다가 다 다른 여러가지 다른 네트워크 방법론이 cni를 서포트하게 만든다. 이 개념이 cni 플러그인 하는 컨셉이 하나 더 붙습니다.[KO]
./segmented_character_voice/lecs/lecs_11_94.wav|lecs|[KO] cni 플러그인을 만들어서 어떤 방식으로 네트워킹을 하는데 이 네트워크 방식이 cni를 지원하도록 만들고 또 다른 b라는 네트워크 방식을 미는 사회적 개선은 그게 또 cni를 지원하도록 만들어내면[KO]
./segmented_character_voice/lecs/lecs_11_95.wav|lecs|[KO] 더 호환적인. 그래서 cni는 다양한 플러그인을 서포트할 수 있는 기초적인 체제를 제공하고 그 네트워킹 방법마다 이 cni를 갖다가[KO]
./segmented_character_voice/lecs/lecs_11_96.wav|lecs|[KO] 만족시키는 어떤 구현체를 만들어서 제공해서 전체적으로 표준적으로 나는 cni 상태로 하는 프로그램을 짜면 되는 이런 문제를 바꾸고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_97.wav|lecs|[KO] 여기 동일한 입장으로 csi라는 문제를 동일하게 찾아보겠습니다. csi라는 것이 문제적으로 보면 다양한 스토리지 장치들이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_98.wav|lecs|[KO] 저희가 봤던 파일 스토리지도 있었고, 옵젝 스토리지도 있고, 볼륨 스토리지도 있었고, 또 다른 어떤 특정한 형식의 클라우드에 있는 아마존이 갖고 있는 스토리지도 있고 여러가지 방식의 다양한 스토리지가 있기 때문에[KO]
./segmented_character_voice/lecs/lecs_11_99.wav|lecs|[KO] 이 스토리지에 대해서도 csi라는 표준적인 부분으로 구현체를 만들어 놓고 그걸 통해서 하면 저는 프로그램을 별도로 짜지 않고 이 똑같은 프로그램이[KO]
./segmented_character_voice/lecs/lecs_11_100.wav|lecs|[KO] 여기서 이 플러그인을 쓰는 어떤 스토리가 붙었다는 것만 확인하고 셋업을 해주면 그냥 csi 프로그램을 동일하게 동작할 수 있게 만들 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_101.wav|lecs|[KO] 이렇게 해서 표준적으로 csi를 서포트할 수 있는 것을 지원하게 됩니다. 이 두개를 합쳐서 정리해보면 cni, csi가 만약에 이런 방식이 통일형 되고 이걸 베이스로 하는 어떤 컨테이너[KO]
./segmented_character_voice/lecs/lecs_11_102.wav|lecs|[KO] 기술을 통해서 기본적으로 활용하는 클라우드 네이티브 컴퓨팅 방법론이 개발된다면 여기저기 호환될 수 있는 어떤 컨테이너 방법이 나오게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_103.wav|lecs|[KO] 추가적으로 몇가지 이런 부분의 컨테이너가 하는 원리에서 조금 더 보면 사실은 컨테이너가 이렇게 돕니다. 생성됐다가 사라졌다가 여기저기 남의 집에 가서 뭐죠.[KO]
./segmented_character_voice/lecs/lecs_11_104.wav|lecs|[KO] 남의 리소스에 가서 여기서 크리에이팅 됐다가 어디서 크리에이팅 하는 것도 내가 결정하고 들어가는 것보다는 오케스트라에 있다가 지금 저기 가서 도는 게 좋겠어라고 하는 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_105.wav|lecs|[KO] 물론 제 선언을 얘기할 수 있습니다. 나는 이렇게 돌려주는게 이 정도는 되는 데서 돌아 아니면 나는 곤란해 이 얘기는 합니다.[KO]
./segmented_character_voice/lecs/lecs_11_106.wav|lecs|[KO] 그렇지만 나머지 부분은 다 그냥 오케스트라가 해주는 대로 따라가지고 다 이렇게 조정을 받아서 가는 게 되어야죠.[KO]
./segmented_character_voice/lecs/lecs_11_107.wav|lecs|[KO] 그러면 결국 여기저기 흩어져 있는 컨테이너로 돌리는 애들이 뭐죠. 컨테이너들이 서로 연결하고 대여하고 엮여져 가지고 서비스를 완성해서 돌아줘야 되는데[KO]
./segmented_character_voice/lecs/lecs_11_108.wav|lecs|[KO] 그게 어떤 식으로 잘 돌고 있는지 확인해야 되지 않겠습니까. 확인하기 위해서 지금 모니터링이라고 하는 이 비자빌리티를 저희가 진행을 해야 되고요.[KO]
./segmented_character_voice/lecs/lecs_11_109.wav|lecs|[KO] 이 비자빌리티를 진행하기 위해서 저희가 어떤 수단을 사용하면 비자빌리티를 컨테이너를 사용하는 부분에 비자빌리티를 사용하는 다양한 도구들이 개발되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_110.wav|lecs|[KO] 그래서 남의 집에서 새들어 사는 이런 식을 하는 쪽에서 하는 컨테이너들이 있는데 걔네들이 현재 이렇게 이렇게 연결되고 있고 잘 연결되고 있는지[KO]
./segmented_character_voice/lecs/lecs_11_111.wav|lecs|[KO] 그 다음에 연결되는 상태에서 문제가 생기면 그걸 갖다가 나중에 추적을 해서 쫓아갈 수 있는 저희가 트레이싱이라고 하는 어떤 기법이 계속 발전이 되고 있고요.[KO]
./segmented_character_voice/lecs/lecs_11_112.wav|lecs|[KO] 그래서 트레이싱을 하는 기법이 되는데 트레이싱을 하는 것도 표준적으로 트레이싱을 할 수 있게 만드는 오픈 트레이싱 그 다음에 그 추적자 이런 얘기되고요.[KO]
./segmented_character_voice/lecs/lecs_11_113.wav|lecs|[KO] 그 다음에 상태를 계속 확인받으면서 쫓아갈 수 있게 해야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_11_114.wav|lecs|[KO] 그래서 중요한 주제는 이렇습니다.[KO]
./segmented_character_voice/lecs/lecs_11_115.wav|lecs|[KO] 어떤 상태인지 빨리 파악하는 것들이 굉장히 다양한 도구가 개발되고 있어서 남의 공간에서 돈까지 빌렸지만 마치 어떤 속속들이 파악할 수 있는 그런 서포트 체계가 뒤쪽에 항상 깔려있는 상태.[KO]
./segmented_character_voice/lecs/lecs_11_116.wav|lecs|[KO] 이걸 만들어줘서 유저가 생기는 문제를 갖다가 쉽게 교정할 수 있는 이런 상태로 만들어줘야지만 저희가 하는 릴라이브라는 서비스를 만들 수 있는 판이 납니다.[KO]
./segmented_character_voice/lecs/lecs_11_117.wav|lecs|[KO] 그래서 그런 쪽의 기술들도 굉장히 많이 투자돼서 개발되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_118.wav|lecs|[KO] 한 가지 더 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_11_119.wav|lecs|[KO] 금방 말씀드렸던 것은 상태를 파악하는 주제까지 갈 거예요.[KO]
./segmented_character_voice/lecs/lecs_11_120.wav|lecs|[KO] 파악이 되고 나면 파악이 된 걸 갖다가 뭔가 조정을 좀 더 해줘야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_11_121.wav|lecs|[KO] 파악하는 게 멈추는 게 아니라 파악된 걸 갖다가 조정을 해줍니다.[KO]
./segmented_character_voice/lecs/lecs_11_122.wav|lecs|[KO] 여기서 한 가지 다시 또 기술적인 이슈가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_123.wav|lecs|[KO] 지금 남의 집에 들어가서 빌려서 사는 것을 파악을 했습니다.[KO]
./segmented_character_voice/lecs/lecs_11_124.wav|lecs|[KO] 조정을 합니다.[KO]
./segmented_character_voice/lecs/lecs_11_125.wav|lecs|[KO] 조정을 하는데 문제는 내가 조정을 하는 게 유저가 알아서 다 조정을 해야 된다 그러면 굉장히 힘들거든요.[KO]
./segmented_character_voice/lecs/lecs_11_126.wav|lecs|[KO] 왜냐하면 내가 서비스를 개발하는 입장에서는 내가 지금 만드는 서비스가 있고 서비스가 있고 이게 여기 어디 들어가더라도 잘 돌도록 만들어서 연결 주도록 하는데 집중을 해서 만들어놨는데[KO]
./segmented_character_voice/lecs/lecs_11_127.wav|lecs|[KO] 어떤 문제가 생기냐면 실제로 저기 가서 타는 부분에서는 상황이 자꾸 달라지고 달라져요.[KO]
./segmented_character_voice/lecs/lecs_11_128.wav|lecs|[KO] 그럼 그거에 대해서 개발자는 자기가 생각했던 어떤 상황에서 돌지 모르고 개발하고 있었고요.[KO]
./segmented_character_voice/lecs/lecs_11_129.wav|lecs|[KO] 그러면 개발자가 그것까지 다시 생각하면서 프로그램을 뭐지 하는 식으로 부담을 주게 하면 굉장히 개발이 어려워지고 힘들어지는 문제가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_11_130.wav|lecs|[KO] 그래서 개발자는 그거를 신경을 안 써도 실제로 개발자가 생각했던 어떤 취지만 전달하면은 그거를 좀 챙겨주는 어떤 중간자적인 어떤 서포트 조직이 만들어야 된다.[KO]
./segmented_character_voice/lecs/lecs_11_131.wav|lecs|[KO] 이걸 갖다가 기술적으로 다루는 게 서비스 메시라고 하는 기술 개념입니다.[KO]
./segmented_character_voice/lecs/lecs_11_132.wav|lecs|[KO] 그래서 요즘 Istio라고 하는 서비스 메시 아니면 Envoy, Linkerd이라고 하는 서비스 메시가 Kubernetes에서 컨테이너, 오케스트라에서 짝을 이뤄가지고[KO]
./segmented_character_voice/lecs/lecs_11_133.wav|lecs|[KO] 개발자들은 원래 하는 그냥 이거 이거 합쳐지고 합쳐지고 연결되는 체인링에만 집중하고 있고[KO]
./segmented_character_voice/lecs/lecs_11_134.wav|lecs|[KO] 그 개발하는 부분에서 체인이 되는 부분에서 연결되는 품질이나 이런 것들에 대해서 생기는 문제는 뒷단에서 알아서 잘 조율해서[KO]
./segmented_character_voice/lecs/lecs_11_135.wav|lecs|[KO] Kubernetes랑 얘기하고 Istio라는 서비스 메시가 협심을 해가지고 뒤에서 안보이게 조화주는 이런 상태의 기술을 만들어내면 좋겠다.[KO]
./segmented_character_voice/lecs/lecs_11_136.wav|lecs|[KO] 그래서 이 서비스라는 메시라는 기술이 뒤쪽에서 점점 올라서 훨씬 더 뭐죠, 서비스 개발자들은 부담이 없는 상태에서도 실제로 서비스는 안정화를 할 수 있는 그런 기술로 진화를 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_11_137.wav|lecs|[KO] 이런 정도 상태로 보면 이제 컨테이너 클라우드 네이티브 컴퓨팅 방법에 대해서 하는 전체적인 어떤 기술이 어떤 식으로 성숙하고 있고 접연 확대하는지 한번 봤습니다.[KO]
./segmented_character_voice/lecs/lecs_11_138.wav|lecs|[KO] 한번 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_11_139.wav|lecs|[KO] 클라우드 네이티브 컴퓨팅은 지금 컨테이너를 중심으로 하는 어떤 훨씬 더 마이크로 서비스를 중심으로 하는 그 다음에 그걸 통해서[KO]
./segmented_character_voice/lecs/lecs_11_140.wav|lecs|[KO] 애자일하고 오토메이트 서비스를 자동적으로 퍼뜨리는 이 방법론에서 굉장히 지지를 얻으면서 세력을 확산하고 있다.[KO]
./segmented_character_voice/lecs/lecs_11_141.wav|lecs|[KO] 결국은 효율적이고 어떤 새로운 가치를 빨리 뭐지, 서포트할 수 있는 부분이 가장 중요한 장점인 거죠.[KO]
./segmented_character_voice/lecs/lecs_11_142.wav|lecs|[KO] 그런데 장점이 있는 반면에 실제로 보면 아직은 이 기술을 쓰기에는 굉장히 뭐죠, 다양하게 남의 집을 빌려서 내가 내 집처럼 편하게 사는 정도로까지 기술이 성숙을 해야 되는데[KO]
./segmented_character_voice/lecs/lecs_11_143.wav|lecs|[KO] 기술은 아직은 성숙하고 있는 중입니다.[KO]
./segmented_character_voice/lecs/lecs_11_144.wav|lecs|[KO] 그래서 오케스트라의 기술도 점점 더 좋아지고 있고 그걸 아까는 가시성을 확보해 가지고 어떤 상태인지 확인하는 기술도 성숙하고[KO]
./segmented_character_voice/lecs/lecs_11_145.wav|lecs|[KO] 뒤쪽에서 모르게 잘 도와서 잘 되게 하는 서비스 매쉬 기술도 올라오고 이런 것들이 다 올라오면서[KO]
./segmented_character_voice/lecs/lecs_11_146.wav|lecs|[KO] 컨테이너를 중심으로 하는 클라우드 네이티브 컴퓨팅이 실제적인 품질 있는 서비스를 하는 대체로 계속 진화를 하면서 만들어지고 있고[KO]
./segmented_character_voice/lecs/lecs_11_147.wav|lecs|[KO] 그게 세력이 확산되면서 점점점 발전을 하고 있다.[KO]
./segmented_character_voice/lecs/lecs_11_148.wav|lecs|[KO] 이 전체의 흐름을 파악하시면 굉장히 현재 앞으로 하는 어떤 서비스를 개발하는 입장에서 어떤 각도에서 어떤 식으로 미래의 서비스를 준비하는지 고민하시면 좋겠다.[KO]
./segmented_character_voice/lecs/lecs_11_149.wav|lecs|[KO] 이런 정도로 발표를 마치겠습니다.[KO]
./segmented_character_voice/lecs/lecs_11_150.wav|lecs|[KO] 네, 감사합니다.[KO]
./segmented_character_voice/lecs/lecs_12_0.wav|lecs|[KO] 이번 시간에는 컴퓨터 시스템에 대한 클러스터링 주제를 한번 다뤄보기로 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_1.wav|lecs|[KO] 클러스터링 주제를 가지고 High Performance Computing, Big Data Cluster, AI Cluster, 이런 주제로 하나씩 하나 풀어가는 그런 시간이 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_2.wav|lecs|[KO] 클러스터링에 대한 걸 다루기 전에 일단 클러스터링을 왜 하느냐. 클러스터링이라는 것은 저희가 하는 컴퓨터 시스템들, 하나하나의 어떤 박스 아니면 단위 시스템들을 갖다가[KO]
./segmented_character_voice/lecs/lecs_12_3.wav|lecs|[KO] 여러 개로 묶어서 계속 규모를 키우는 그런 방식을 처리할 때 사용을 합니다. 이 방식을 처리할 때 두 가지 방식을 대표적으로 사용하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_4.wav|lecs|[KO] 하나는 어떤 동일한 박스를 갖다가 동일한 형태를 개수를 계속 늘리는 형태, 저희가 스케일 아웃 방식이라고 부르고 있는 방식을 사용하면[KO]
./segmented_character_voice/lecs/lecs_12_5.wav|lecs|[KO] 기본적으로 효율적으로 동일한 걸 계속 늘려가면서 쓸 수 있는 그런 효율적인 스케일 아웃이 가능합니다.[KO]
./segmented_character_voice/lecs/lecs_12_6.wav|lecs|[KO] 또 다른 방법은 어떤 하나의 시스템을 사실은 사이즈를 키우는 거죠. 더 큰 규모를 키워서 스케일 업이라고 하는 방식을 쓰고요.[KO]
./segmented_character_voice/lecs/lecs_12_7.wav|lecs|[KO] 훨씬 더 파워풀한 시스템으로 키우고 키우는 이런 방식, 실제적으로 컴퓨터 시스템들을 갖다가 규모를 키우고 더 파워풀하게 만들 때는 이 두 가지 방식을 적절하게 믹스해서 쓰는 형태가 되고요.[KO]
./segmented_character_voice/lecs/lecs_12_8.wav|lecs|[KO] 최근의 트렌드는 스케일 아웃 방식이 좀 더 기본적으로 단위 구성을 가지고 계속 규모를 키워서 하는 방식으로 조금 더 주목받고 있는 상태입니다.[KO]
./segmented_character_voice/lecs/lecs_12_9.wav|lecs|[KO] 그럼 이런 원리에 대해서 스케일링에 대한 기본적인 개념을 배우셨고, 이걸 가지고 클러스터 컴퓨팅 이슈로 넘어가 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_10.wav|lecs|[KO] 그럼 클러스터 컴퓨팅이라고 해서 컴퓨터들을 묶어서 여러 가지 파워풀한 컴퓨터로 만드는 그런 방식을 다뤄보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_11.wav|lecs|[KO] 클러스터들을 가지고 컴퓨팅을 한다, 클러스터 컴퓨팅이라고 전체적으로 부르고 있고요.[KO]
./segmented_character_voice/lecs/lecs_12_12.wav|lecs|[KO] 클러스터 컴퓨팅에서 기본적으로 컴퓨터들을 갖다가 함께 묶기 위해서 쓰는 방법, 묶는 기본적인 방법론으로 네트워크를 사용합니다.[KO]
./segmented_character_voice/lecs/lecs_12_13.wav|lecs|[KO] 네트워크를 이용해서 클러스터 머신들을 한 덩어리처럼 묶어버리고, 그 다음에 이것들을 통합적으로 관리할 수 있는 부분을 다시 마스터 개념으로 올려 태워서 하는 이런 상태로 구성하는 방식을 클러스터 컴퓨팅 방식으로 부르고 있고요.[KO]
./segmented_character_voice/lecs/lecs_12_14.wav|lecs|[KO] 대표적으로 저희가 보이는 비올프 클러스터라는 1994년에 시작된 클러스터가 이런 방식의 가장 효율적인 경제적인 버전이라고 할까요?[KO]
./segmented_character_voice/lecs/lecs_12_15.wav|lecs|[KO] 이런 버전으로 만들어졌습니다.[KO]
./segmented_character_voice/lecs/lecs_12_16.wav|lecs|[KO] 조금 더 설명드리면 사용하는 컴퓨터들을, 박스들을 굉장히 코모드티, 저희가 일반적으로 쓰는 컴퓨터, PC랑 비슷한 컴퓨터들을 갖다가 묶어서 그것들을 파워풀하게 네트워크로 묶고[KO]
./segmented_character_voice/lecs/lecs_12_17.wav|lecs|[KO] 대장을 세우고 마스터를 세우고 그걸 관리할 수 있도록 묶어냈다.[KO]
./segmented_character_voice/lecs/lecs_12_18.wav|lecs|[KO] 이런 방식으로 해서 굉장히 비용 경제적인 클러스터 컴퓨팅을 할 수 있는 기술을 시작했다.[KO]
./segmented_character_voice/lecs/lecs_12_19.wav|lecs|[KO] 이렇게 봐주시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_20.wav|lecs|[KO] 이런 컴퓨팅 부분에서 금방 말씀드렸던 게 클러스터를 어떤 지역에 한정되어 있는 굉장히 호모지니어스라는 유사한 컴퓨터를 묶는 기술이[KO]
./segmented_character_voice/lecs/lecs_12_21.wav|lecs|[KO] 조금 더 가서 이제 여기가 네트워크 같은 게 활성화되면서 그리드 컴퓨팅이라는 어떤 기술로 사실 변화를 좀 했습니다.[KO]
./segmented_character_voice/lecs/lecs_12_22.wav|lecs|[KO] 발전을 좀 했는데 그걸 조금만 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_23.wav|lecs|[KO] 여기서는 기존에 있던 어떤 제한된 지역에 있던 이런 컴퓨터들을 엮는 기술을 조금 더 확장해서[KO]
./segmented_character_voice/lecs/lecs_12_24.wav|lecs|[KO] 여기도 컴퓨터들이 있고 저기도 컴퓨터들이 있는데 얘네를 전체적으로 한꺼번에 묶으면 좋지 않을까 이렇게 말하고 있는 거고요.[KO]
./segmented_character_voice/lecs/lecs_12_25.wav|lecs|[KO] 그래서 저희가 그리드라는 원리를 통해서 그리드처럼 쭉 연겨낸다는 개념을 갖는데[KO]
./segmented_character_voice/lecs/lecs_12_26.wav|lecs|[KO] 한 가지 아까 말씀드렸던 클러스터 컴퓨팅하고 차별점이라고 부를 수 있는 것은 기본적으로 약간 더 이질적입니다.[KO]
./segmented_character_voice/lecs/lecs_12_27.wav|lecs|[KO] A 지역에 있는 컴퓨터랑 B 지역에 있는 게 동일할 수가 없기 때문에 이질성이 더 많은 상태의 컴퓨터를 묶어서[KO]
./segmented_character_voice/lecs/lecs_12_28.wav|lecs|[KO] 한 번에 쓸 수 있는 어떤 기술을 갖다가 탐색해본 시도가 그리드 컴퓨팅이라고 보시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_29.wav|lecs|[KO] 이런 기술의 흐름에서 어떤 구성이 되냐면 A 지역에 있는 컴퓨터와 B 지역에 있는 컴퓨터의 이질성을 좀 더 하기 위해서[KO]
./segmented_character_voice/lecs/lecs_12_30.wav|lecs|[KO] 아까 말씀드렸던 클러스터 컴퓨팅보다는 좀 더 복잡하면서 그 다음에 이 둘 사이에 떨어져 있기 때문에[KO]
./segmented_character_voice/lecs/lecs_12_31.wav|lecs|[KO] 네트워크 입장에서 훨씬 더 어렵습니다.[KO]
./segmented_character_voice/lecs/lecs_12_32.wav|lecs|[KO] 저희가 가까운 곳에 묶는 네트워크보다 멀린 곳에 있는 네트워크를 묶는 게 훨씬 더 어렵기 때문에[KO]
./segmented_character_voice/lecs/lecs_12_33.wav|lecs|[KO] 그걸 갖다가 또 보완을 해서 하는 상태의 기술로 진행될 거예요.[KO]
./segmented_character_voice/lecs/lecs_12_34.wav|lecs|[KO] 이게 이런 부분을 개선하기 위해서 개발하고 만들기 위해서 여러 가지 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_12_35.wav|lecs|[KO] 카모난 미들웨어라는 단어가 나와서 그리드 미들웨어.[KO]
./segmented_character_voice/lecs/lecs_12_36.wav|lecs|[KO] 지금 대표적인 글러버스 같은 그리드 미들웨어를 통해서 묶어져 있는 컴퓨터들의 자원을 한 덩어리로 만들어내고[KO]
./segmented_character_voice/lecs/lecs_12_37.wav|lecs|[KO] 그 사이에 데이터를 이동시키고 그 다음에 여기 있는 데이터들을 통합적으로 관리할 수 있게 하고[KO]
./segmented_character_voice/lecs/lecs_12_38.wav|lecs|[KO] 안전하게 만들고 이런 다양한 수단을 써서 만들어내서 그렇게 해서 발전됐던 기술이 그리드 컴퓨팅이고[KO]
./segmented_character_voice/lecs/lecs_12_39.wav|lecs|[KO] 이런 그리드 컴퓨팅은 2000년대 초반부터 나름대로 계속 모색하면서 발전이 진행됐습니다.[KO]
./segmented_character_voice/lecs/lecs_12_40.wav|lecs|[KO] 말씀드렸던 그리드 컴퓨팅 부분을 좀 더 확대해서 요즘 나오는 클라우드 컴퓨팅이 사실은 넘어갔다고 말씀을 드릴 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_12_41.wav|lecs|[KO] 그래서 전체적으로 한번 쭉 다시 돌아보면 클라우드 컴퓨팅이 있었고요.[KO]
./segmented_character_voice/lecs/lecs_12_42.wav|lecs|[KO] 클라우드 컴퓨팅은 굉장히 홈원이 지역적으로 한정되어 있는, 물론 분산되어 있으면 지역적으로 한정되어 있는 것.[KO]
./segmented_character_voice/lecs/lecs_12_43.wav|lecs|[KO] 이걸 좀 더 흩어져 있으면서 이질적인 상태로 묶어낼 수 있는 그리드 컴퓨팅 기술로 넘어갔고요.[KO]
./segmented_character_voice/lecs/lecs_12_44.wav|lecs|[KO] 그렇죠? 2000년대 초반에 넘어갔고.[KO]
./segmented_character_voice/lecs/lecs_12_45.wav|lecs|[KO] 2000년대, 2010년대에 들어가면서 저희가 요즘 많이 얘기하고 있는 클라우드 컴퓨팅이라고 하는[KO]
./segmented_character_voice/lecs/lecs_12_46.wav|lecs|[KO] 더 일반화되고 사실은 어떻게 묶여져 있는지 자체도 사실은 좀 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_12_47.wav|lecs|[KO] 숨겨질 수 있는 그냥 구름 뒤에 있는 자원들이 묶여가지고 내가 쓸 수 있는 상태가 됐다.[KO]
./segmented_character_voice/lecs/lecs_12_48.wav|lecs|[KO] 이런 식의 어떤 발전된 모습으로 계속 진화를 해왔습니다.[KO]
./segmented_character_voice/lecs/lecs_12_49.wav|lecs|[KO] 그래서 클러스터, 그리드, 클라우드 이런 식으로 컴퓨팅을 클러싱하는 기술이 변화하고 발전하면서[KO]
./segmented_character_voice/lecs/lecs_12_50.wav|lecs|[KO] 나름대로 계속 개발적으로 여전히 진화를 또 하고 있고[KO]
./segmented_character_voice/lecs/lecs_12_51.wav|lecs|[KO] 전체적으로도 크게는 대세적으로는 클러스터, 그리드, 클라우드 쪽으로 바뀌었다.[KO]
./segmented_character_voice/lecs/lecs_12_52.wav|lecs|[KO] 이렇게 생각해 주시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_53.wav|lecs|[KO] 이런 부분에 대해서, 그런데 한 가지 다시 돌려보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_54.wav|lecs|[KO] 그럼 사실은 어떻게 해서 지금 흩어져 있는 머신, 그렇죠?[KO]
./segmented_character_voice/lecs/lecs_12_55.wav|lecs|[KO] 한 지역에서도 흩어져 있고, 한 지역에서 흩어져 있고요.[KO]
./segmented_character_voice/lecs/lecs_12_56.wav|lecs|[KO] 여러 지역에 흩어져 있고, 아니면 어디 있는지도 모르는 흩어져 있는 머신을 저희가 같이 쓸 수 있는 상태가 됐는데[KO]
./segmented_character_voice/lecs/lecs_12_57.wav|lecs|[KO] 그것이 무엇 때문에 가능해졌느냐?[KO]
./segmented_character_voice/lecs/lecs_12_58.wav|lecs|[KO] 사실은 잘 살펴보면 그것들을 빠르게 연결해 줄 수 있는 네트워킹 기술이 올라왔기 때문에[KO]
./segmented_character_voice/lecs/lecs_12_59.wav|lecs|[KO] 그게 실현이 됐기 때문에 가능했다고 보실 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_12_60.wav|lecs|[KO] 굉장히 빠른 고속의 네트워킹이 가능하게 된 근본적인 기술은 광 네트워킹입니다.[KO]
./segmented_character_voice/lecs/lecs_12_61.wav|lecs|[KO] 저희가 얘기하는 옵티컬 네트워킹의 어떤 원리에서 초고속의 네트워킹이 가능해졌고[KO]
./segmented_character_voice/lecs/lecs_12_62.wav|lecs|[KO] 그걸 통해서 지금 같은 점점 엮는, 클러스터링하는 방식의 클러스터링, 그리드,[KO]
./segmented_character_voice/lecs/lecs_12_63.wav|lecs|[KO] 그 다음에 클라우드 같은 기술로 계속 넘어갈 수 있었다.[KO]
./segmented_character_voice/lecs/lecs_12_64.wav|lecs|[KO] 이렇게 봐주시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_65.wav|lecs|[KO] 그럼 여기서 기본 원리가 되는 광 네트워킹이라는 부분에서 조금만 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_66.wav|lecs|[KO] 저희가 알고 있는 광섬, 옵티컬 파이버라는 부분에서 광신호가 들어가면[KO]
./segmented_character_voice/lecs/lecs_12_67.wav|lecs|[KO] 이 신호를 가지고 신호가 전달되고요.[KO]
./segmented_character_voice/lecs/lecs_12_68.wav|lecs|[KO] 신호들이 전달될 때 어떤 광의 어떤 파장을 가지고 어떤 다른 나름대로의 어떤 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_12_69.wav|lecs|[KO] 여러 가지 파장별로 다른 광이, 빛이 간다. 이렇게 생각하실 수 있겠죠?[KO]
./segmented_character_voice/lecs/lecs_12_70.wav|lecs|[KO] 이거 하나하나를 나눠서 할 때 하나하나 파장별로 하는 걸 남다.[KO]
./segmented_character_voice/lecs/lecs_12_71.wav|lecs|[KO] 이런 말을 표기하게 돼요. 아니면 라이트패스, 빛이 가는 걸 통해서 어떤 경로가 형성된다.[KO]
./segmented_character_voice/lecs/lecs_12_72.wav|lecs|[KO] 그래 라이트패스, 이런 것들이 만들어질 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_73.wav|lecs|[KO] 이 라이트패스 기술을 갖다가 기본적으로 이용해서 이걸 커버할 수 있는 광 네트워크 장치를 만드는 거죠.[KO]
./segmented_character_voice/lecs/lecs_12_74.wav|lecs|[KO] 광 네트워크 장치를 갖다가 다시 만들어서 광은 사실은 아날로그 원리 부분을 갖다가 다시 디지털로 바꾸는 원리로 가지고[KO]
./segmented_character_voice/lecs/lecs_12_75.wav|lecs|[KO] 광 옵티컬 커뮤니케이션을 네트워킹을 만드는 것에서 결국은[KO]
./segmented_character_voice/lecs/lecs_12_76.wav|lecs|[KO] 종단 간의 광 전송이 가능한 상태로 만들면 초고속의 네트워킹이 가능해요.[KO]
./segmented_character_voice/lecs/lecs_12_77.wav|lecs|[KO] 그게 요즘 얘기하는 초기에는 10Gbps, 100Gbps가, 최근에는 400Gbps가 이 정도 상태로 올라가는 네트워킹이 가능해진 상태가 됐습니다.[KO]
./segmented_character_voice/lecs/lecs_12_78.wav|lecs|[KO] 이런 광 네트워크가 가능했고요. 광 네트워크는 광파이버라는 것은 전 세계를 연결하는 해적 케이블들이 다 광파이버로 연결되면서[KO]
./segmented_character_voice/lecs/lecs_12_79.wav|lecs|[KO] 이 연결되는 케이블들이 연결되고 확장이 되면서 전 세계를 연결해서 광 네트워크가 가능해졌다.[KO]
./segmented_character_voice/lecs/lecs_12_80.wav|lecs|[KO] 이것들을 시사하는 게 굉장히 빠른 속도로 초고속의 네트워킹이 가능해졌고[KO]
./segmented_character_voice/lecs/lecs_12_81.wav|lecs|[KO] 그게 점점 지구의 스케일로 가는 쪽으로 점점 가까이 가는 것이 가능해지는 걸로 변화됐다.[KO]
./segmented_character_voice/lecs/lecs_12_82.wav|lecs|[KO] 이렇게 생각하실 수 있겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_83.wav|lecs|[KO] 이 부분을 설명하는 것의 대표적으로 글로벌 람다 인테그리드 퍼실레트라는 개념은[KO]
./segmented_character_voice/lecs/lecs_12_84.wav|lecs|[KO] 전 세계를 연결하는 람다를 광 네트워킹으로 해서 통합적으로 서로 연결할 수 있는 상태가 그려진다.[KO]
./segmented_character_voice/lecs/lecs_12_85.wav|lecs|[KO] 이렇게 보시면 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_12_86.wav|lecs|[KO] 이런 개념과 연결해서 어떤 개념이 2000년대 후반에 저희가 추구했던 개념이 옵티퓨터라는 개념도 사실은 추구했었습니다.[KO]
./segmented_character_voice/lecs/lecs_12_87.wav|lecs|[KO] 실험적인 시도고요.[KO]
./segmented_character_voice/lecs/lecs_12_88.wav|lecs|[KO] 옵티컬 네트워킹의 원리랑 인터넷의 IP라는 어떤 개념하고 컴퓨터라는 단어를 합친 단어고요.[KO]
./segmented_character_voice/lecs/lecs_12_89.wav|lecs|[KO] 이 단어를 합쳐서 광 네트워킹을 서포트테인을 통해서 흩어져 있는 머신을 마치 진짜 한 대의 머신처럼 쓴다.[KO]
./segmented_character_voice/lecs/lecs_12_90.wav|lecs|[KO] 이런 개념을 추구한 것이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_91.wav|lecs|[KO] 그래서 다시 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_92.wav|lecs|[KO] 클러스터 컴퓨팅이 결국 가능해진 것은 네트워킹의 그것들을 묶어주기 수단이 가능해졌고[KO]
./segmented_character_voice/lecs/lecs_12_93.wav|lecs|[KO] 묶어주는 것도 범위가 지역적인 범위에서 먼 거리 그 다음에 글로벌 스케일로 넘어갈 수 있게 됐다.[KO]
./segmented_character_voice/lecs/lecs_12_94.wav|lecs|[KO] 이런 식으로 생각하시면서 문제를 찾아보면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_95.wav|lecs|[KO] 그럼 이제 다시 한번은 그럼 어떤 목적으로 하는 클러스트링이 될 수 있는지 여러가지 방법이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_96.wav|lecs|[KO] 첫번째 케이스 한번 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_97.wav|lecs|[KO] 하이퍼포먼스 컴퓨팅. 굉장히 빠른 초고속의 계산들을 많이 해야 되기 때문에[KO]
./segmented_character_voice/lecs/lecs_12_98.wav|lecs|[KO] 한 대로는 안되기 때문에 여러 대를 써서 계산을 한번 해 보자.[KO]
./segmented_character_voice/lecs/lecs_12_99.wav|lecs|[KO] 이게 바로 그 HPC를 위한 클러스터리가 되어있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_100.wav|lecs|[KO] 그래서 저희가 HPC 클러스터를 구성하고요.[KO]
./segmented_character_voice/lecs/lecs_12_101.wav|lecs|[KO] 그래서 한 대가 아니라 여러 대.[KO]
./segmented_character_voice/lecs/lecs_12_102.wav|lecs|[KO] 또 한 대 안에서도 사실은 CPU들이 요새 멀티코어라고 해서 여러 개의 코어가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_103.wav|lecs|[KO] 여러 개의 코어들이 따로따로 다른 계산을 하는 게 아니라 하나의 계산을 위해서 총력전을 같이 하는 거죠.[KO]
./segmented_character_voice/lecs/lecs_12_104.wav|lecs|[KO] 이런 방식을 하는 패럴렉 컴퓨팅 관리를 적용해서 활용할 수 있는 클러스터링을 저희가 HPC 클러스터링이라고 부르게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_105.wav|lecs|[KO] 이 HPC 클러스터링을 활용하는 실제적인 방법론에서 쓰는게 저희가 MPI라고 하는 프로그램 방법론도 쓰고요.[KO]
./segmented_character_voice/lecs/lecs_12_106.wav|lecs|[KO] OpenMP라고 하는 프로그램 방법론을 씁니다.[KO]
./segmented_character_voice/lecs/lecs_12_107.wav|lecs|[KO] MPI 방법론은 기본적으로 프로세스들을 여러 개의 프로세스를 같이 대화하면서 쓸 수 있는 방법이 될 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_12_108.wav|lecs|[KO] OpenMP는 여러 개의 스레드를 할 수 있는 방법이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_109.wav|lecs|[KO] 그래서 이 두 가지 방법을 잘 믹스하면서 활용할 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_12_110.wav|lecs|[KO] 한 가지 더 부연해 드리면 MPI는 프로세스를 여러 개를 쓸 수 있기 때문에 사실은 프로세스가 다른 머신에서 돌 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_111.wav|lecs|[KO] 그런데 스레드는 사실은 한 프로세스에 연결되어 한 코어에서 들기 때문에 머신을 넘어갈 수는 없고요.[KO]
./segmented_character_voice/lecs/lecs_12_112.wav|lecs|[KO] 이런 부분에 차이점이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_113.wav|lecs|[KO] 그래서 MPI를 방식으로 여러 개의 머신에 여러 프로세스를 코어를 가지고 활용하는 것은 패럴렉 컴퓨팅이 가능하고[KO]
./segmented_character_voice/lecs/lecs_12_114.wav|lecs|[KO] OpenMP는 한 대 안에 있는 머신 안에서 스레드를 복합적으로 쓰는 패럴렉 컴퓨팅이 가능한 상태가 된다.[KO]
./segmented_character_voice/lecs/lecs_12_115.wav|lecs|[KO] 이렇게 봐주시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_116.wav|lecs|[KO] 이렇게 HPC 클러스터를 구성하는 케이스를 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_12_117.wav|lecs|[KO] 이 HPC 클러스터를 실제로 진행하는 부분에서 계산을 하기 위해서는 여러 개의 CPU가 패럴렉을 같이 한다는 부분이었지만[KO]
./segmented_character_voice/lecs/lecs_12_118.wav|lecs|[KO] CPU한테 일감을 줘야 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_12_119.wav|lecs|[KO] 일감을 주기 위해서는 기본적으로 동작할 프로그램은 CPU한테 미리 로드됐다고 생각할 수 있지만 데이터를 줘야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_120.wav|lecs|[KO] 데이터를 공급하기 위해서는 스토리지를 붙여줘야 되고 스토리지를 이 클러스터에 붙여줘서 완성을 해줘야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_121.wav|lecs|[KO] 그래서 HP 클러스터를 최종적으로 완성하기 위해서는 패럴렉에 동작할 수 있는 클러스터에 대응되는 이런 노트들이 있으면[KO]
./segmented_character_voice/lecs/lecs_12_122.wav|lecs|[KO] 노트들에 대해서 데이터를 공급을 해주고 스토리지를 통해서 그것들이 같은 데이터를 공급받거나[KO]
./segmented_character_voice/lecs/lecs_12_123.wav|lecs|[KO] 아니면 별도의 데이터를 가지고 여러 가지 계산을 할 수 있도록 정리되어야 되는 상태가 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_124.wav|lecs|[KO] 그래서 HP 클러스터가 구성되는 원리에 대해서 한번 확인해 주시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_125.wav|lecs|[KO] 말씀드렸던 HP 클러스터를 가장 크게 하는 개념으로 가는 슈퍼컴퓨터를 위한 클러스터링이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_126.wav|lecs|[KO] 슈퍼컴퓨터를 위한 클러스터링은 어떤 식으로 하냐면 지금 말씀드렸던 클러스터링 원리를 굉장히 하이엔드로 써서[KO]
./segmented_character_voice/lecs/lecs_12_127.wav|lecs|[KO] 굉장히 큰 파워를 갖는 굉장히 방대하고 어려운 계산을 할 수 있는 특별한 머신으로 만든다 이렇게 보시면 될 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_12_128.wav|lecs|[KO] 기본적으로 내용적으로 보시면 결국은 클러스터링의 원리가 큰 사이즈를 내고 훨씬 더 좋은 재료를 가져가는 클러스터링이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_129.wav|lecs|[KO] 그래서 슈퍼컴퓨터를 어떻게 생각하시면 굉장히 고품질의 아니면 굉장히 고성능의 어떤 버전의 클러스터링을 사용해서 HPC를 하는 케이스라고 보시면 되고요.[KO]
./segmented_character_voice/lecs/lecs_12_130.wav|lecs|[KO] 안쪽에서 보면 굉장히 복합적인 기술을 써서 훨씬 더 파워풀하고 훨씬 더 빠른 계산을 그리고 어쨌든 많은 데이터를 빨리 처리할 수 있게 하는 그런 머신을 만듭니다.[KO]
./segmented_character_voice/lecs/lecs_12_131.wav|lecs|[KO] 비유를 한다면 F1 경주차를 생각하시면 될 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_12_132.wav|lecs|[KO] F1 경주차가 어떤 속도를 위해서 딱 튜닝이 되어 있는 것처럼 슈퍼컴퓨터도 어떤 특정한 계산에서 튜닝이 돼서 만들어져 있는 이런 클러스터 장치, 특별한 클러스터 장치로 보시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_12_133.wav|lecs|[KO] 그럼 이제 두 번째 케이스를 한번 다뤄보겠습니다. 저희가 지금 다뤄보는 케이스는 아까 HPC 클러스터를 다뤄봤고요.[KO]
./segmented_character_voice/lecs/lecs_12_134.wav|lecs|[KO] 지금은 현재 스토리지 클러스터라는 개념을 가기 위해서 조금 잠깐 스토리지에 대해서 한번 리뷰를 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_12_135.wav|lecs|[KO] 저희가 이전에 스토리지 시스템에 대해서 조금은 공부를 했었습니다.[KO]
./segmented_character_voice/lecs/lecs_12_136.wav|lecs|[KO] 그때 여러 가지 방식의 스토리지 개념이 있다, 파일 스토리지도 있고, 블록 스토리지도 있고, 옵젝트 스토리지도 있고 이런 부분까지 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_12_137.wav|lecs|[KO] 스토리지의 근본적인 역할은 이렇습니다. 저희가 원하는 데이터를 저장했다가 필요할 때 공급을 해줘야 되는 일을 해야 되고요.[KO]
./segmented_character_voice/lecs/lecs_12_138.wav|lecs|[KO] 공급을 하기 위해서 가장 중요해진 것은 공급을 읽어오는 시간하고, 빨리 빨리 읽어와서 바로 바로 내가 활용할 수 있게 하고,[KO]
./segmented_character_voice/lecs/lecs_12_139.wav|lecs|[KO] 그 다음에 저장을 할 때 빨리 저장을 해서 안전하게 저장해서 나중에 필요할 때 쓸 수 있도록 지원해야 되죠.[KO]
./segmented_character_voice/lecs/lecs_12_140.wav|lecs|[KO] 이 저장을 하는 부분에서 가장 중요한 부분이 하나는 첫 번째는 레이턴시입니다.[KO]
./segmented_character_voice/lecs/lecs_12_141.wav|lecs|[KO] 시간을 줄이면서 데이터를 가지고 와서 처리해야 되죠. 저희가 점점 빠른 처리를 해야 되고요.[KO]
./segmented_character_voice/lecs/lecs_12_142.wav|lecs|[KO] 많은 데이터를 처리해야 되기 때문에 기본적으로 스토리지가 시간을 줄일 수 있도록 굉장히 특화되면서 발전해왔습니다.[KO]
./segmented_character_voice/lecs/lecs_12_143.wav|lecs|[KO] 한 가지의 수문이 그렇고요. 스토리지는 결국은 시간을 줄이기 위해서 발전되었고, 또 비용도 싸게 하기 위해서 발전해왔다.[KO]
./segmented_character_voice/lecs/lecs_12_144.wav|lecs|[KO] 많은 것을 저장할 수 있게 발전해왔다는 거죠. 그래서 어떤 식으로 발전이 됐으면 간단한 스토리지 시스템부터[KO]
./segmented_character_voice/lecs/lecs_12_145.wav|lecs|[KO] 점점 시스템이 여러 가지 스토리지를 복합적으로 쓰고, 그 다음에 확장적으로 쓰고, 실제로 최근에는 클라우드에 있는 저장소도 내가 하나의 저장소 개념으로 통합적으로 쓰고,[KO]
./segmented_character_voice/lecs/lecs_12_146.wav|lecs|[KO] 이런 것처럼 스토리지가 어떤 전체적인 변화를 갖고 있습니다. 스토리지를 잠깐 한번 리뷰를 해봤고요.[KO]
./segmented_character_voice/lecs/lecs_12_147.wav|lecs|[KO] 그럼 이제 클러스터링 주제로 넘어가 보겠습니다. 클러스터링에서는 스토리지 클러스라는 단어를 한번 설명을 드리려고 합니다.[KO]
./segmented_character_voice/lecs/lecs_12_148.wav|lecs|[KO] 스토리지를 갖다가 하는 머신들이 한 대에서 스토리지가 아니니까 스토리지가 광대한 용량을 위해서는 사실은 한 대로 커버가 안되니까 여러 대의 스토리지 용량을 모아서 한 덩어리로 써야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_149.wav|lecs|[KO] 그렇기 때문에 스토리지를 묶어 가지고 전체적으로 여러 대의 스토리지를 묶어서 한 큰 스토리지로 만들어 준다. 이 개념을 갖고 있는 게 스토리지 클러스터입니다.[KO]
./segmented_character_voice/lecs/lecs_12_150.wav|lecs|[KO] 이런 스토리지 클러스터를 구성을 하고요. 이 스토리지 클러스터의 구성을 한 상태에서 여러 대가 있기 때문에 여러 대를 이용해서[KO]
./segmented_character_voice/lecs/lecs_12_151.wav|lecs|[KO] 그럼 여러 대가 있네. 그럼 여러 대가 한 번에 데이터를 읽어서 나한테 주면 훨씬 더 빠른 데이터 활용이 가능하겠다. 데이터 제공이 가능하겠다. 이렇게 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_12_152.wav|lecs|[KO] 이걸 처리하게 해서 저희가 하는 부분이 여러 대를 이용해서 기본적으로 데이터를 준다. 분산 파일 시스템의 원리가 하나 있고요.[KO]
./segmented_character_voice/lecs/lecs_12_153.wav|lecs|[KO] 또 패러렐, 동시에 어떤 데이터를 갖다가 하나의 데이터 조각을 나눠서 저장했다가 다른 여러 조각을 갖다 준다. 패러렐 파일 시스템, 이런 개념입니다.[KO]
./segmented_character_voice/lecs/lecs_12_154.wav|lecs|[KO] 분산 파일 시스템과 패러렐 파일 시스템을 조금 구분을 해보겠습니다. 분산 파일 시스템은 여러 개 있는 데이터를 분산해서 이렇게 나눠서 저장하고 뽑아온다.[KO]
./segmented_character_voice/lecs/lecs_12_155.wav|lecs|[KO] 이런 부분에만 집중하는 거고요. 저희가 대표적으로 요즘 얘기하는 빅데이터 쪽에 쓰는 하듭 파일 시스템이라는 부분이 있어요. 이게 분산 파일 시스템, 하듭에 있어서 하는 분산, 디스플레이 파일 시스템이라고 생각하시면 될 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_12_156.wav|lecs|[KO] 그 다음에 패러렐 파일 시스템은 조금 성격이 다릅니다. 아까 말했던 스피드에 굉장히 집중해야 합니다. 패러렐하기 위해서 어떤 데이터를 갖다가 조각을 해서 A라는 조각, B라는 조각을 갖다가 여러 개 다른 디스플레이에 넣고 그걸 뭉쳐서 한 번에 가져오게 되면 굉장히 빠른,[KO]
./segmented_character_voice/lecs/lecs_12_157.wav|lecs|[KO] 아까 말씀드렸던 슈퍼 컴퓨팅 클러스터들이 필요하는 그런 데이터 억세스도 지원할 수 있는 패러렐의 병렬 개념을 굉장히 강조해서 디자인되어 있는 게 패러렐 파일 시스템입니다.[KO]
./segmented_character_voice/lecs/lecs_12_158.wav|lecs|[KO] 그래서 스토리지 클러스터를 한 번 다시 정리해 보겠습니다. 스토리지는 쓰러질 한 대 한 대 쓰던 스토리지를 여러 대가 같이 쓰러지게 하는 개념을 만든 게 스토리지 클러스터다.[KO]
./segmented_character_voice/lecs/lecs_12_159.wav|lecs|[KO] 이런 스토리지 클러스터는 실제적으로 어떤 방식의 원리에 따라서 운영되냐면 분산 파일 시스템 또는 패러렐 파일 시스템의 개념을 많이 활용해서 운영이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_160.wav|lecs|[KO] 한 가지만 더 부연해 보겠습니다. 지금 오브젝트 스토리지라는 개념은 여기랑 조금 다르면서 확장된 개념이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_12_161.wav|lecs|[KO] 그래서 사실은 최근에는 오브젝트 파일 시스템을 통해서 스토리지 클러스터와 연결되는 구성도 굉장히 많이 파블리해지고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_12_162.wav|lecs|[KO] 네, 이상입니다.[KO]
./segmented_character_voice/lecs/lecs_13_0.wav|lecs|[KO] 다음 주제 한번 다루겠습니다. 지금 말씀드렸던 스토리지를 클러스터링 해가지고 훨씬 더 대용량의 스토리지를 하는 것까지는 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_13_1.wav|lecs|[KO] 그럼 이런 스토리지를 통해서 저희가 많은 데이터를 이제 담을 수 있게 될 거에요. 점점 더 많은 데이터를 저장해 놓고 담으면서 활용할 수 있게 됐습니다.[KO]
./segmented_character_voice/lecs/lecs_13_2.wav|lecs|[KO] 이 활용하게 될 수 있으니까 결국은 저희가 이제 변화가 된게 저희가 쓰는 빅데이터라는 개념, 많은 데이터를 저장할 수 있게 됐네?[KO]
./segmented_character_voice/lecs/lecs_13_3.wav|lecs|[KO] 그럼 이 데이터를 가지고 이런 저런 걸 뭐지? 내가 원하는 일을 좀 찾아보고 뒤져봐야 되겠네? 이런 거죠.[KO]
./segmented_character_voice/lecs/lecs_13_4.wav|lecs|[KO] 그래서 제가 지금 말씀드리는 뒤져본다는 말을 쓰게 돼요. 그래서 하드비라고 하는 어떤 이 지금 코끼리로 완전히 알고 있는 코끼리하는 빅데이터 상징 어떤 소프트웨어를 가지고[KO]
./segmented_character_voice/lecs/lecs_13_5.wav|lecs|[KO] 안에 흩어져 있는 데이터, 여러 머신에 흩어져 있는 데이터를 갖다가 뒤져서 원하는 걸 찾는 맵 리뷰를 하는 어떤 그런 어떤 원리에서 찾아내는 이런 기술이 굉장히 활성화될 거에요.[KO]
./segmented_character_voice/lecs/lecs_13_6.wav|lecs|[KO] 그래서 빅데이터 클러스터로 가는 게 되는 거죠. 이 부분에서는 근데 어떤 흐름이 생겼냐면 기본적으로 오픈소스를 활용해 가지고 하드 오픈소스 빅데이터 소프트웨어입니다.[KO]
./segmented_character_voice/lecs/lecs_13_7.wav|lecs|[KO] 빅데이터 플랫폼 소프트웨어라고 저희가 부르게 되고요. 다른 어떤 요즘 새로 나오는 스팍이니 플랭크니 어떤 좀 실시간성을 강조하는 이런 여러가지[KO]
./segmented_character_voice/lecs/lecs_13_8.wav|lecs|[KO] 다양한 오픈소스 빅데이터 플랫폼이 활성화되어서 지금 말씀드렸던 이 클러스터링 원리를 갖다가[KO]
./segmented_character_voice/lecs/lecs_13_9.wav|lecs|[KO] 이용하는 거죠. 그럼 조금 더 한번 다시 한번 빅데이터 플랫폼 클러스터라는 말을 써야 되는데 아까 말씀했던 HPC 클러스터를 한번 다뤘고요.[KO]
./segmented_character_voice/lecs/lecs_13_10.wav|lecs|[KO] 스토리지 클러스터를 다뤘습니다. 그럼 빅데이터 클러스터는 뭐냐? 빅데이터 클러스터 하나 더 말씀을 드리는게 빅데이터를 가지고 저장을 해 놓은 게 아니라 저장된 빅데이터를[KO]
./segmented_character_voice/lecs/lecs_13_11.wav|lecs|[KO] 저희가 처리를 해야 됩니다. 처리를 하는 것은 컴퓨팅을 하는 거고요. 그래서 지금 말씀드렸던 스토리지 부분하고 컴퓨팅이 연결돼서 많은 데이터를 저장된 많은 데이터를[KO]
./segmented_character_voice/lecs/lecs_13_12.wav|lecs|[KO] 처리할 수 있는 형태로 됐다. 저장하고 처리, 스토리지하고 컴퓨팅이 연결되는 상태로 쓰이는 클러스터가 바로 빅데이터 클러스터라고 생각하셔야 된다.[KO]
./segmented_character_voice/lecs/lecs_13_13.wav|lecs|[KO] 이렇게 말씀을 드리고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_14.wav|lecs|[KO] 그럼 지금 말씀드렸던 빅데이터 클러스터라는 부분에 대해서 조금 더 어떤 방식들이 있는지 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_15.wav|lecs|[KO] 여기서 한 가지 용어를 좀 더 설명을 드릴까 합니다. 빅데이터라는 말은 많은 데이터입니다. 많은 데이터를 가지고 빠르게 고성능으로 데이터를 분석하는 일을[KO]
./segmented_character_voice/lecs/lecs_13_16.wav|lecs|[KO] 이게 사실은 빅데이터의 기본적인 속성이고요. 많은 데이터, 저장된 많은 데이터를 가지고 와서 그걸 다 분석을 해서 하는 일이 빅데이터 클러스터를 사용하는 게 되는 게[KO]
./segmented_character_voice/lecs/lecs_13_17.wav|lecs|[KO] 그래서 그걸 다른 용어로는 HPDA, High Performance Data Analytics라고 부르고요. 이런 부분에서 저희가 했던 하듭 방식이 굉장히 파풀리하게 많이 사용이 되었습니다.[KO]
./segmented_character_voice/lecs/lecs_13_18.wav|lecs|[KO] 하드볼 쓰는 방식에서 Yarn이라고 하는 패키징을 통해서 하드볼 쓰는 방식이 파풀리하게 되어 있었고요.[KO]
./segmented_character_voice/lecs/lecs_13_19.wav|lecs|[KO] 또 다른 방식으로 해서 Apache Mesos라고 하는 어떤 다른 방식을 통해서 기본적으로 빅데이터 클러스터를 통합적으로 묶어서[KO]
./segmented_character_voice/lecs/lecs_13_20.wav|lecs|[KO] 빅데이터 일을 같이 하도록 하는 이런 방식도 쓰고 있습니다. 정리해 보면 빅데이터 클러스터가 있으면 클러스터를 관리하기 위한 어떤 소프트웨어가 필요하고요.[KO]
./segmented_character_voice/lecs/lecs_13_21.wav|lecs|[KO] 그 소프트웨어 부분을 하드볼, Yarn이라는 어떤 방식을 쓰기도 하고, Apache Mesos라는 방식을 쓰기도 하고, 다른 어떤 클러스터 매니징 방식을 써가지고 빅데이터 클러스터를 관리하고[KO]
./segmented_character_voice/lecs/lecs_13_22.wav|lecs|[KO] 그걸 활용해서 빅데이터 클러스터를 활용한 데이터 해석을 진행하는 그런 식으로 사용할 수가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_23.wav|lecs|[KO] 그러면 지금까지 살펴봤던 HPC 클러스터, 그 다음에 스토리지 클러스터, 빅데이터 클러스터 이런 것들을 활용해서[KO]
./segmented_character_voice/lecs/lecs_13_24.wav|lecs|[KO] 지금 현재 데이터 중심으로 어떤 데이터의 생태계를 만드는 어프로치가 어떻게 벌어지고 있는지 한번 설명을 해드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_25.wav|lecs|[KO] 데이터라고 하는 부분에서 시작되는 부분이 바로 기본적인 로우 데이터, 저희가 하는 부분입니다. 로우 데이터가 굉장히 많다.[KO]
./segmented_character_voice/lecs/lecs_13_26.wav|lecs|[KO] 그러니까 저희가 지금 로우 데이터가 굉장히 많이 있다. 이런 걸 표현하는 말이 빅데이터란 말이에요. 로우 데이터 중에서 저희가 사용하지 못하고 있고 뭐지 버려지는 데이터가 굉장히 많이 있다.[KO]
./segmented_character_voice/lecs/lecs_13_27.wav|lecs|[KO] 다크데이터라고도 표현합니다. 그래서 데이터라는 것들이 지금 경쟁이 뭐죠? 많이 흩어져 있지만 실제로 저희가 활용하고 처리해서 뭔가 써먹기[KO]
./segmented_character_voice/lecs/lecs_13_28.wav|lecs|[KO] 위해서는 아직도 정리가 많이 필요하다. 이렇게 지금 보시면 될 것 같고요. 그래서 이걸 강조하기 위해서 데이터들은 자기의 형태로 unstructured,[KO]
./segmented_character_voice/lecs/lecs_13_29.wav|lecs|[KO] 구조가 없이 다 자기 데이터 자체의 형태를 가지고 있습니다. 굉장히 뭐죠? 어수선한 거죠. 정돈이 안 되어 있는 거죠. 정돈이 안 되어 있는 것은 나름대로[KO]
./segmented_character_voice/lecs/lecs_13_30.wav|lecs|[KO] 어느 정도는 정돈하고 정리해서 활용할 수 있는 형태를 만드는 이런 작업이. 그래서 요즘 데이터가 굉장히 중요해져서 데이터를 갖다가 어떻게 좋은 데이터가 필요한데 데이터가 구하기 어려워요.[KO]
./segmented_character_voice/lecs/lecs_13_31.wav|lecs|[KO] 이런 부분에 얘기할 때 정리되고 조직화되는 데이터가 많이 필요합니다. 이런 데이터들이 많이 부족하다는 얘기고요.[KO]
./segmented_character_voice/lecs/lecs_13_32.wav|lecs|[KO] 그럼 이런 데이터들이 어느 정도 확보돼서 어느 정도 정리돼서 기본적으로 활용해서 처리할 수 있는 데이터가 준비되면 저희가 어떤 수단을 쓰냐면[KO]
./segmented_character_voice/lecs/lecs_13_33.wav|lecs|[KO] 아까 말씀드렸던 빅데이터 클러스터를 활용해서 이 데이터에서 정보들을 찾아 냅니다.[KO]
./segmented_character_voice/lecs/lecs_13_34.wav|lecs|[KO] 그래서 데이터에서 로우 데이터에서 정보를 찾아내고 이 정보를 찾아낸 것들을 갖다가 서서히 엮여서 점점 지식화하는 이 관계를 서포트하는 빅데이터 클러스터를 쓰고요.[KO]
./segmented_character_voice/lecs/lecs_13_35.wav|lecs|[KO] 빅데이터 클러스터라는 게 아까 말씀드렸다 어떻게 말씀드리면 HPC 처리하는, HPC라고 하는 처리 부분 그리고 또 스토리지 클러스터 이 두 개를 연결해서[KO]
./segmented_character_voice/lecs/lecs_13_36.wav|lecs|[KO] 빅데이터 클러스터 원리가 구성된다 말씀드렸고요. 그러니까 저장된 데이터를 가지고 처리해서 지식을 만드는 상태까지 갑니다.[KO]
./segmented_character_voice/lecs/lecs_13_37.wav|lecs|[KO] 그런데 지식이 어느 정도 뭔가 알듯하고 정보를 갖고 알듯한 정도로 됐는데 사람들이 판단하고 저희가 지능이라고 부르는 단계까지 가는 건 또 다시 한 번의 허드를 가야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_13_38.wav|lecs|[KO] 그래서 이걸 지능화 시키기 위해서 하는 어프로치로 요즘 굉장히 가고 있습니다. 요즘 얘기하는 소위 AI죠.[KO]
./segmented_character_voice/lecs/lecs_13_39.wav|lecs|[KO] Artificial Intelligence 라고 하는 부분에 가서 이 데이터를 가지고 알아서 좀 더 이렇게 러닝을 하는 거죠. 아까는 찾아보는 정도 수준이 빅데이터라면 그걸 갖다가 어떤 집중된 주제에 대해서는 더 많은 데이터 가지고 계속 뒤져보고 뒤져봐 가지고 이제 알아내는 정도까지 깨우친다는 정도까지 가는 러닝.[KO]
./segmented_character_voice/lecs/lecs_13_40.wav|lecs|[KO] 그 다음에 깨우쳤으니까 그걸 가지고 이렇게 이렇게 하면 좋겠다. 다음번에 이렇게 하면 좋겠다. 인퍼런스, 추론이라고 하는 걸 연결하는 그래서 지능을 과정하는 완성을 하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_13_41.wav|lecs|[KO] 그래서 데이터라는 부분의 생태계가 지금 말씀드렸던 것처럼 로우 데이터를 가지고 어떤 정보와를 만들고 정보와를 만드는 걸 점점 엮어서 지식을 만들고 그걸 지능하는 이런 단계로 쭉 발전시켜줄 수 있는 데이터의 쭉 흐름, 에코 시스템이 필요하다는 부분이 굉장히 중요하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_42.wav|lecs|[KO] 지금 말씀드렸던 이 데이터 에코 시스템 부분하고 또 연결해서 저희가 바라봐야 될 게 그러면 이 데이터를 에코 시스템을 실제로 어떻게 해서 가능하게 할 거냐, 어떤 형태로 만들면 이 에코 시스템이 만들어져서 실제로 동작할 수 있을 거냐, 이거 한번 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_43.wav|lecs|[KO] 이 부분을 정리해서 데이터 많은 데이터를 저희가 가지고 담아놓을 수 있어야 됩니다. 데이터 허브라고 부르는 어떤 개념으로 한번 불러보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_44.wav|lecs|[KO] 많은 데이터를 모아놓을 수 있는 어떤 공간이 있어서 이런저런 데이터를 내가 담아줄 수 있어, 비용 경제적으로 담아줄 수 있어, 그릇입니다. 지금 말씀드렸던 그릇이 있어서 담을 수 있는 그릇이 있으면 그 그릇에 모으면 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_13_45.wav|lecs|[KO] 이렇게 모아야 되고요. 그 다음에 모아서 그 다음에 담기는 데이터들은 데이터에 이 호수에는 물이 많다, 아니면 이 창고에는 물건이 많다, 데이터 웨어하우스 데이터 레이크에 굉장히 데이터가 많이 있고 그걸 자름대로 조직적으로 해서 쓸 수 있다, 이런 개념으로 연결됩니다.[KO]
./segmented_character_voice/lecs/lecs_13_46.wav|lecs|[KO] 그래서 이 데이터 레이크라는 개념이 좀 더 그거 중에 유연한 개념이니까 제가 활용하게 보겠습니다. 데이터 허브의 저장소에 많은 물들이 있어서 그 물들을 갖다가 확보했으면 저희가 원하는 지금 빅데이터를 활용하는 그 다음에 러닝을 갈 수 있겠죠. 인텔리전스로 하는 걸 갈 수 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_13_47.wav|lecs|[KO] 그러면 인텔리전스로 가기 위해서 저희가 이 데이터들을 갖다가 엮어내서 뭐죠? 칵테일 하듯이 엮어내는 과정을 하게 됩니다. 데이터 패브릭이라는 어떤 수단을 통해서 이 데이터를 갖다가 가공하고 믹스해서 더 새로운 어떤 데이터로 가는 이 과정을 금방 말씀드렸던 이 인텔리전스를 위해서 지능을 위해서 러닝하고 인퍼런스 하는 부분으로 가는 과정을 하는 그걸 서포트하는 어떤 시스템적인 어떤 추상적인 개념을 데이터 패브릭이라는 개념으로 정리해 볼 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_48.wav|lecs|[KO] 정리해 보겠습니다. 말씀드렸던 데이터의 기본적인 저장소인 데이터 허브. 그기에다가 데이터를 갖다가 지금 담아놓고 많은 데이터가 있고 그 데이터를 갖다가 믹스할 수 있는, 칵테일 할 수 있는 그런 패브릭 기능을 연결하는 이 상태로 서로 그것들을 계속 활용해서 계속 생태계를 돌린다.[KO]
./segmented_character_voice/lecs/lecs_13_49.wav|lecs|[KO] 아니면 그 다음에 아니면 랜드스페이프를 만든다. 이렇게 해서 버튼판을 만든다. 이런 개념으로 지금 진행이 되고 있습니다. 그래서 이런 개념을 가지고 이 데이터 생태계 아니면 데이터 랜드스페이프를 살펴봐 주시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_13_50.wav|lecs|[KO] 말씀드렸던 이런 부분에 대해서 조금 더 실제적으로 지금 아까 지능을 찾기 위해서 지금 할 수 있는 클러스터 기능을 쓴다 그랬는데 어떻게 쓰느냐 조금 더 생각해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_51.wav|lecs|[KO] 실제로 하드웨어적으로 살펴보면 말씀드렸던 어떤 데이터를 가지고 많은 데이터를 가지고 그거에 대해서 계산도 해서 데이터에 대해서 어떤 변화를 어떤 것이 숨어있는지 찾아내야 되고요. 많은 데이터를 뒤져봐야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_13_52.wav|lecs|[KO] 그래서 말씀 그동안 나눴던 HPC 클러스터의 어떤 개념하고 그 다음에 빅데이터 개념이 두 개가 믹스가 돼서 복합적으로 쓰이는 상태. 그걸 통해서 사실은 저희가 얘기하는 어떤 러닝, 인텔리전스 러닝이 가능하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_13_53.wav|lecs|[KO] 그 개념을 봐주시면 되고요. 그런 걸 갖다가 두 개를 할 수 있는 시스템을 만들고 그걸 갖다가 한쪽에서 계산을 하다가 한쪽에서 빅데이터 처리하고 이렇게 왔다 갔다 할 수도 있고요. 아니면 두 개를 같이 유연하게 할 수 있는 형태로 조금 진화를 해서 그걸 같이 담을 수도 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_54.wav|lecs|[KO] 이 그림을 한 번 짜보면서 보시면 지금 기본적인 어떤 클러스터를 가지고 아까 말씀드렸던 데이터의 어떤 개념들을 가지고 와서 이 데이터 저장소에 있는 데이터 레이크를 패브릭이라고 하는 처리할 수 있는 것까지 연결하는 것을 지금 저희가 하는 환경, 플랫폼에 지금 담아가지고 실제로 처리하는 개념.[KO]
./segmented_character_voice/lecs/lecs_13_55.wav|lecs|[KO] 이런 식으로 처리된다 보니까 데이터를 덩어리를 가져가서 저희가 처리할 수 있는 인프라하고 플랫폼에 집어넣어서 만들어내는 이런 식으로 가는 클러스터링 개념이 진행되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_56.wav|lecs|[KO] 이 개념을 한번 최종적으로 정리해 보겠습니다. 정리해서 AI 컴퓨팅이라는 클러스터의 모습이 어떤 식으로 정리되고 나타나느냐 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_57.wav|lecs|[KO] HPC 클러스터 개념, 그 다음 빅데이터 클러스터 개념이 둘이 믹스가 돼서 AI를 위한 머신러닝, 딥러닝 이런 걸 처리한다고 말씀드렸죠.[KO]
./segmented_character_voice/lecs/lecs_13_58.wav|lecs|[KO] 이 클러스터는 어떤 것들을 강조해야 되냐면 머신러닝, 딥러닝을 같은 데이터 해석을 하고 그 다음에 인퍼런스, 러닝을 위한 딥뉴럴 네트워크의 기본적으로 복잡한 게 일단 계산도 처리해야 되고요.[KO]
./segmented_character_voice/lecs/lecs_13_59.wav|lecs|[KO] 컴퓨팅도 해줘야 되고요. 그걸 가지고 나중에 후추되면 그걸 활용하는 인퍼런스라고 하는 출원도 처리하는, 출원하는 계산도 처리해줘야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_13_60.wav|lecs|[KO] 이런 거 위해서 사실은 요즘 그런 출원을 하는 계산할 때 굉장히 좋은 프로세스인 GPU라는 게 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_61.wav|lecs|[KO] 그래서 CPU와 GPU를 복합적으로 잘 활용해서 지금 얘기했던 어떤 HPC하고 HPDA, 빅데이터 클러스터링 기능을 대응하도록 만들어내고[KO]
./segmented_character_voice/lecs/lecs_13_62.wav|lecs|[KO] 거기다가 그 데이터를 충분히 공급을 해줘야 되겠죠. 한쪽에서는 데이터를 끊임없이 공급해주는 시스템이 붙어서 뒤에서 후방 서포트 해주고[KO]
./segmented_character_voice/lecs/lecs_13_63.wav|lecs|[KO] 앞쪽에서는 열심히 계산하고 하는 이런 형태로 구성되는 AI 클러스터의 구성되는 형태가 이런 모습을 가지게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_13_64.wav|lecs|[KO] 그러니까 AI를 기본적으로 계산하는 CPU, GPU 페어가 열심히 협작해서 열심히 계산하면서 뒤쪽의 데이터를 공급받고[KO]
./segmented_character_voice/lecs/lecs_13_65.wav|lecs|[KO] 공급받는 걸 가지고 딥 뉴럴 네트워크 아니면 그런 부분, 머신 러닝, 딥 러닝을 하는 방법론을 계산을 한다.[KO]
./segmented_character_voice/lecs/lecs_13_66.wav|lecs|[KO] 이게 바로 AI 컴퓨팅의 기본적인 구성 원리고요. 실제로 이런 구성하는 시스템에서 굉장히 하이엔드 시스템을 구성하게 되면[KO]
./segmented_character_voice/lecs/lecs_13_67.wav|lecs|[KO] 엔비디아 DGX2라고 굉장히 GPU 베이스하는 AI 슈퍼 컴퓨팅이라고 부를 수 있을까요? 이런 식의 머신이 있지만 굉장히 고가 시스템입니다.[KO]
./segmented_character_voice/lecs/lecs_13_68.wav|lecs|[KO] 저희가 하는 수억짜리 시스템을 활용하면 굉장히 파워풀한 러닝을 쉽게, 굉장히 큰 규모의 러닝을 쉽게 하기 위해서는[KO]
./segmented_character_voice/lecs/lecs_13_69.wav|lecs|[KO] 단일 머신의 GPU를 쓰는 게 아니라 굉장히 많은 GPU를 한꺼번에 쓸 수 있는 기술이 필요합니다.[KO]
./segmented_character_voice/lecs/lecs_13_70.wav|lecs|[KO] 그래서 AI 클러스터 쪽에서 파워풀한 기술 역량은 많은 GPU가 동시에 한 러닝을 할 수 있도록 만들어주는 부분에 굉장히 초점을 맞추고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_71.wav|lecs|[KO] 또 이런 러닝이 굉장히 중요한데 굉장히 고가 시스템을 써야 하는 비용이 많이 들고 있기 때문에[KO]
./segmented_character_voice/lecs/lecs_13_72.wav|lecs|[KO] 이 비용을 낮추는 기술 경쟁이 지금 굉장히 활발하게 벌어지고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_73.wav|lecs|[KO] 이 정도로 AI 컴퓨팅 클러스터에 대해서 트렌드를 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_13_74.wav|lecs|[KO] 그럼 전체적으로 컴퓨터 시스템에 대해서 지금 봤던 저희가 클러스터링에 대해서 한번 조금 정리를 하는 입장에서 한번 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_75.wav|lecs|[KO] 저희가 클러스터링 관리를 강조해서 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_13_76.wav|lecs|[KO] 클러스터링 하기 위해서는 컴퓨터 시스템들이 어떤 하나의 박스를 여러 개 모아서 더 파워풀한 시스템으로 만드는 스케일아웃, 그 다음에 또 일부 스케일업을 합니다.[KO]
./segmented_character_voice/lecs/lecs_13_77.wav|lecs|[KO] 좀 더 큰 박스도 쓸 수 있겠죠. 필요에 따른. 이렇게 스케일아웃을 중심으로 하면서 스케일업을 믹스해서 좀 쓰게 되고요.[KO]
./segmented_character_voice/lecs/lecs_13_78.wav|lecs|[KO] 그래서 점점 더 큰 스케일의 컴퓨팅을 할 수 있고, 그 스케일의 빅데이터를 할 수 있고, 큰 스케일의 AI도 할 수 있게 만들어갑니다.[KO]
./segmented_character_voice/lecs/lecs_13_79.wav|lecs|[KO] 여기서 한 가지 주목할 만한 트렌드는 이 박스 자체를 갖다가 너무 다양하게 만들어가지고 여러 개를 섞어가지고 크게 만드는 어프로치를 하는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_13_80.wav|lecs|[KO] 좀 더 호머지니어스하면서 굉장히 스마트한, 그러니까 저희가 얘기하는 이렇게 말씀드리면 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_13_81.wav|lecs|[KO] 스마트폰이라는 개념, 옛날에 픽처폰, 스마트폰, 동일하지만 굉장히 다양한 일을 할 수 있는 그런 식의 스마트폰 개념을 보면 똑같이[KO]
./segmented_character_voice/lecs/lecs_13_82.wav|lecs|[KO] 스마트한 어떤 컴퓨터 박스를 넣고 그거를 스케일아웃해서 클러스터링을 하고 그걸 가지고 더 파워풀하게 만들게 하면 훨씬 더 효율적으로 클러스터링해서 스케일아웃을 할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_13_83.wav|lecs|[KO] 그래서 스마트한 박스, 소프트웨어에 따라서 굉장히 재구성이 가능한 박스를 넣고 그걸 클러스터링하고 그걸 통해서 다시 HPC도 하게 하고,[KO]
./segmented_character_voice/lecs/lecs_13_84.wav|lecs|[KO] 빅데이터도 하게 하고, AI도 하게 하고 이런 식으로 하는 버전으로 다양하게 쓸 수 있는 클러스터 기술로 전체의 발전이 이뤄지고 있는 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_13_85.wav|lecs|[KO] 그러면 지금까지 살펴본 클러스터링 챕터에 대해서 한번 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_13_86.wav|lecs|[KO] 저희가 어떤 내용을 살펴봤냐면, 첫 번째로 클러스터링이라는 것은 스케일아웃, 스케일업, 그러니까 어떤 단일한 박스를 여러 개 반복해서 사용해서 규모를 키우는 것,[KO]
./segmented_character_voice/lecs/lecs_13_87.wav|lecs|[KO] 또 어떤 박스를 하나를 좀 더 크게 만들어 키우는 것, 스케일아웃을 중심으로 스케일업을 부분적으로 써서 전체를 키우는 방식이 대표적으로 활용된다, 이렇게 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_13_88.wav|lecs|[KO] 실제로 어떤 상태로 구성되어 있는 클러스터를 모으느냐, 어떤 지역에 한정된 클러스터를 모으는 것,[KO]
./segmented_character_voice/lecs/lecs_13_89.wav|lecs|[KO] 그 다음에 지역을 좀 넘쳐서 분산되어 있는 클러스터를 모으는 것, 더 크게 있는 지구상에 있는 어떤 클러스터를 모은다, 이런 개념으로 해서 클러스터 컴퓨팅, 그리드 컴퓨팅, 클라우드 컴퓨팅, 이렇게 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_13_90.wav|lecs|[KO] 그리고 이 클러스터가 쓰이는 사용 목적인 HPC를 위한 클러스터냐, 스토리지 빅데이터를 위한 클러스터냐, 아니면 데이터를 가지고 AI를 서포트할 수 있는 클러스터냐, 이런 다양한 목적으로 클러스터가 활용될 수 있다는 것도 함께 살펴보았습니다.[KO]
./segmented_character_voice/lecs/lecs_13_91.wav|lecs|[KO] 이상으로 저희 챕터를 마치겠습니다. 감사합니다.[KO]
./segmented_character_voice/lecs/lecs_14_0.wav|lecs|[KO] 안녕하십니까. 이번 시간에는 컴퓨터 시스템을 클라우드 데이터 센터하고 저희가 소프트웨어 정의 인프라라고 부르고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_1.wav|lecs|[KO] 그래서 전반적인 뭐죠? 인프라라고 하는 전세계에 펼쳐있는 이게 넓은 이런 범위까지 하는 이 주제를 가지고 다뤄보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_2.wav|lecs|[KO] 첫 번째로 다뤄야 될 점은 컴퓨터 시스템을 갖다가 데이터 센터에 어떻게 쓰느냐, 데이터 센터에 어떻게 쓰느냐 이 문제에서 다시 클라우드 데이터 센터,[KO]
./segmented_character_voice/lecs/lecs_14_3.wav|lecs|[KO] 그 다음에 소프트웨어 디파인드 인프라 스트랙처, 소프트웨어 정의 인프라 이런 식으로 확장하는 속도로 말씀을 드릴 거고요.[KO]
./segmented_character_voice/lecs/lecs_14_4.wav|lecs|[KO] 첫 번째 잠깐 데이터 센터라는 주제를 들어가기 위해서 한번 어떤 데이터 센터라는 것에 대한 모습들을 갖다가 많이들 현실적으로 느끼지 못하셔서 좀 얘기를 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_5.wav|lecs|[KO] 데이터 센터라는 부분에서는 저희가 말씀드렸던 컴퓨터들이 클러싱이 돼서 렉이라는 시스템들이고 렉들이 뭐지? 수시계가 연결되어,[KO]
./segmented_character_voice/lecs/lecs_14_6.wav|lecs|[KO] 아냐 노예에 있고요. 노예에 있는 렉들이 숙 네트워크로 다시 연결돼서 다시 외부랑 연결되는 이런 모습을 갖고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_7.wav|lecs|[KO] 지금 말씀드렸던 부분은 컴퓨팅 서버들이 기본적으로 렉의 형상을 가지고 쭉 연결돼서 있고 서버를 관리하는 입장에서는 이 서버를 중심으로 해서 이게 네트워크의 뒤쪽에 연결되어 있다 이렇게 보고 있는 한쪽의 오퍼레이션 측면이 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_8.wav|lecs|[KO] 반대쪽에서는 네트워크라고 하는 측면에서 이걸 바라보면 내가 네트워크를 동급해서 저 뒤쪽에 있는 서버들한테까지 사람들의 어떤 연결이 전달되도록 만들어야 된다.[KO]
./segmented_character_voice/lecs/lecs_14_9.wav|lecs|[KO] 이 두 개의 다른 어떤 측면을 보게 됩니다. 데이터 센터를 오퍼레이션 하는 사람들이 있으면 그 사람들이 갖고 있는 것은 서버를 오퍼레이션 하는 사람들,[KO]
./segmented_character_voice/lecs/lecs_14_10.wav|lecs|[KO] 그 다음에 네트워크를 오퍼레이션 하는 사람들이 다른 측면을 보르면서 서로 다른 입장에서 일을 하기 때문에 그 두 개를 갖다가 하나의 어떤 측면에서 모아서[KO]
./segmented_character_voice/lecs/lecs_14_11.wav|lecs|[KO] 데이터 센터 전체를 효과적으로 관리하고 운영하는 이 부분이 결국 기술적인 이슈가 굉장히 숙제로 되었습니다.[KO]
./segmented_character_voice/lecs/lecs_14_12.wav|lecs|[KO] 그래서 이런 문제를 해결하기 위해서 어떤 노력을 진행하고 있고 그 노력이 어떤 형식으로 지금 되느냐.[KO]
./segmented_character_voice/lecs/lecs_14_13.wav|lecs|[KO] 그 노력의 어떤 한 결정체가 클라우드라고 하는 클라우드를 위한 거대한 데이터 센터를 만들어내고 그걸 굉장히 효율적으로 운영할 수 있도록 만들어냈고요.[KO]
./segmented_character_voice/lecs/lecs_14_14.wav|lecs|[KO] 그 방법이 어떻게 해서 가능했는지 그 원리를 다시 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_15.wav|lecs|[KO] 그리고 이런 원리가 점점 이렇게 세상의 인프라, 세상에 있는 모든 컴퓨터를 네트워크하는 원리라 어떻게 연결되려고 하는지 보는 이것들이 저의 진체를 바라보는 내용이 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_14_16.wav|lecs|[KO] 데이터 센터에서 있는 클러스들이 결국은 사용자의 서비스를 지원하게 하는 부분을 저희가 데이터 센터 3티어 어플리케이션 패턴으로 기본 정리해서 그 형태를 살펴보고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_17.wav|lecs|[KO] 3티어라고 할 때 웹티어, 어플리케이션 티어, DB티어 이렇게 부르고 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_18.wav|lecs|[KO] 기본적으로 어플리케이션 웹티어라는 것은 저희가 사용자가 리퀘스트를 받는 안내, 안내소가 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_14_19.wav|lecs|[KO] 웹 서버가 안내 역할을 하면서 기본적으로 사용자를 받습니다.[KO]
./segmented_character_voice/lecs/lecs_14_20.wav|lecs|[KO] 사용자가 받고 나면 사용자의 리퀘스트에 따라서 담당 업무의 부서인 어플리케이션 서버로 가게 되고요.[KO]
./segmented_character_voice/lecs/lecs_14_21.wav|lecs|[KO] 어플리케이션 서버에서 어떤 업무에 따라서 자기가 일을 처리합니다.[KO]
./segmented_character_voice/lecs/lecs_14_22.wav|lecs|[KO] 그러면 주변 부서하고 아니면 기본적으로 저장해서 중요한 데이터를 저장하는 DB 서버 쪽이랑 협조를 하면서 전체적인 일을 해주면서[KO]
./segmented_character_voice/lecs/lecs_14_23.wav|lecs|[KO] 어떤 사용자의 리퀘스트에 대응하고 그가 리스펜스를 주는 상태가 전형적인 데이터 센터의 어플리케이션의 서비스 형태입니다.[KO]
./segmented_character_voice/lecs/lecs_14_24.wav|lecs|[KO] 이런 형태를 저희가 안전하게 하기 위해서 사실은 보조적인 수단을 쓰고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_25.wav|lecs|[KO] 보조적인 수단은 웹 서버, DB 서버 안전을 위해서 파이어 월드를 쓰고 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_26.wav|lecs|[KO] 그 다음에 IDS, IPS같이 침입을 방지하고 이런 부분들을 보완을 해서 저 여건에서 안전한 상태로 서비스를 할 수 있도록 기본적으로 만들고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_27.wav|lecs|[KO] 한 가지 추가적으로 보면은 이 상태에서 복잡한 다양한 보호하는 부분의 네트워크랑 다양한 부분의 연결해서 굉장히 복잡한 네트워크 구성이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_28.wav|lecs|[KO] 그렇지만 체계적으로 어떤 데이터 센터의 한장에 대해서도 되고요.[KO]
./segmented_character_voice/lecs/lecs_14_29.wav|lecs|[KO] 한 가지 더 추가적인 상황을 이런 상태에서 하나 더 변수가 되는 게 하나의 어떤 유저가 리퀘스트를 되면은[KO]
./segmented_character_voice/lecs/lecs_14_30.wav|lecs|[KO] 어플리케이션 서버, DB 서버들이 대화하는 것들이 하나의 리퀘스트에서 수십 배의 기본적인 대화가 있어야지만 그거에 답변을 할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_31.wav|lecs|[KO] 그러면 말씀드리는 것처럼 어떤 리퀘스트에 대해서 엄청나게 어떤 대화가 있어야지 리스판스가 된다.[KO]
./segmented_character_voice/lecs/lecs_14_32.wav|lecs|[KO] 그럼 네트워킹이 내부에서는 내부의 리퀘스트 하나에 대해서 내부에서 수십 배의 트래픽이 발생한 다음에 리스판스가 된다.[KO]
./segmented_character_voice/lecs/lecs_14_33.wav|lecs|[KO] 이런 모습을 보시면 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_34.wav|lecs|[KO] 이와 같다면 이걸 서포트할 수 있는 효율적인 데이터 센터를 위한 네트워킹이 굉장히 중요한 부분이 되고요.[KO]
./segmented_character_voice/lecs/lecs_14_35.wav|lecs|[KO] 그럼 데이터 센터 네트워킹을 효율적으로 하기 위해서 굉장히 효율적이고 굉장히 치밀한 방법론을 사용하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_36.wav|lecs|[KO] 이 방법론을 저희가 데이터 센터 네트워킹이라고 부르고요.[KO]
./segmented_character_voice/lecs/lecs_14_37.wav|lecs|[KO] 이 데이터 센터 네트워킹이라는 것은 지금 어떤 제한된 데이터 센터,[KO]
./segmented_character_voice/lecs/lecs_14_38.wav|lecs|[KO] 특별하게 미리 준비된 공간에서 미리 예측되는 가장 월스케이스에서 트래픽까지도 감당할 수 있게,[KO]
./segmented_character_voice/lecs/lecs_14_39.wav|lecs|[KO] 가장 차가 많이 몰릴 때까지도 감당할 수 있는 상태로 설계를 해서 준비되는 그런 특별한 네트워크가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_40.wav|lecs|[KO] 그런데 이 네트워크 구성하는 원리들 여러 가지가 있지만 근본 원리는 어떤 케이스가 돼도 트래픽이 많이 밀려들어도[KO]
./segmented_character_voice/lecs/lecs_14_41.wav|lecs|[KO] 항상 뭐죠? 이 센터에는 모든 서버들이 서로 서로 연결될 수 있게 유지해야 된다.[KO]
./segmented_character_voice/lecs/lecs_14_42.wav|lecs|[KO] 그 다음에 일부의 장애가 나더라도 유지해야 된다. 이런 기본적인 전제를 갖고 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_43.wav|lecs|[KO] 그걸 위해서 굉장히 구조적인 어프로치를 갑니다.[KO]
./segmented_character_voice/lecs/lecs_14_44.wav|lecs|[KO] 코어, 어그리게이션, 억세스라고 하는 어떤 계층을 통해서 나름대로 하이라케를 잡아서 연결을 하는 기본 형태에서[KO]
./segmented_character_voice/lecs/lecs_14_45.wav|lecs|[KO] 좀 더 발전시켜서 저희가 스파인, 그 다음에 리프라고 해서 척추하고 스파인하는 부분을 리프해서[KO]
./segmented_character_voice/lecs/lecs_14_46.wav|lecs|[KO] 그 상태에서 이 기본 구조를 더 하이라케를 좀 더 위를 더 치밀하게 연결한 다음에 아래쪽에 있는 랙들을[KO]
./segmented_character_voice/lecs/lecs_14_47.wav|lecs|[KO] 랙들에 있는 TOR 스위치랑 연결해서 다시 접속시키는 형태로 만듭니다.[KO]
./segmented_character_voice/lecs/lecs_14_48.wav|lecs|[KO] 이런 형태를 변형하면 여러 가지 다양한 옵션들이 나오고 그런 것들을 통해서 효과적이고 파워풀한 데이터 센터 네트워킹을 지원하도록 만들어내고[KO]
./segmented_character_voice/lecs/lecs_14_49.wav|lecs|[KO] 이걸 통해서 저희가 말씀드린 3D 어프로케이션 패턴에 따른 서비스들 그리고 기타 새로운 서비스들을 수용할 수 있도록 준비하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_50.wav|lecs|[KO] 그럼 이제 다음 주제로 보겠습니다. 그런데 이걸 실제적으로 구현하는 내부적인 모습을 한 번 조금 더 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_51.wav|lecs|[KO] 그래서 그 모습을 볼 때는 저희가 실제로 보면 어떤 비유를 많이 하냐면 패브릭이라는 비유를 많이 합니다.[KO]
./segmented_character_voice/lecs/lecs_14_52.wav|lecs|[KO] 데이터 센터 네트워킹이 최종적으로 해주는 것은 패브릭 스위칭 기능을 한다.[KO]
./segmented_character_voice/lecs/lecs_14_53.wav|lecs|[KO] 아니면 데이터 센터 네트워킹이 어떤 패브릭 역할을, 패브릭이 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_14_54.wav|lecs|[KO] 저희가 직물을 짤 때 가로 세로 해가지고 쭉 해가지고 촘촘하게 해서 모든 게 촘촘하게 연결되는 그런 개념이 있죠.[KO]
./segmented_character_voice/lecs/lecs_14_55.wav|lecs|[KO] 그런 개념을 할 수 있도록 기본적으로 네트워킹이 된다.[KO]
./segmented_character_voice/lecs/lecs_14_56.wav|lecs|[KO] 그래서 이걸 데이터 센터 패브릭이라는 용어로 부르고 그걸 기술적으로 서포트하게 해서 굉장히 구조적으로 입체적인 개념이 들 정도의 어떤 다양한 경로를 해서 항상 돌아갈 수 있도록 만들고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_57.wav|lecs|[KO] 이걸 축구장 넓이가 되는 큰 데이터 센터에 있는 수많은 넥들에 대해서 지원하도록 그런 스케일로 해야지 저희가 심하게 얘기하면 10만 대 정도 거대 규모 데이터 센터에 있는[KO]
./segmented_character_voice/lecs/lecs_14_58.wav|lecs|[KO] 머신들이 거로 충돌 없이 항상 모든 머신들하고 교통할 수 있는 그런 상태의 환경이 만들어진다.[KO]
./segmented_character_voice/lecs/lecs_14_59.wav|lecs|[KO] 이렇게 보시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_14_60.wav|lecs|[KO] 여기 안쪽으로 조금만 더 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_61.wav|lecs|[KO] 그냥 이거는 개념적으로 보시면 되는 부분이고요.[KO]
./segmented_character_voice/lecs/lecs_14_62.wav|lecs|[KO] 이런 옵션에 대해서 여러 개의 길, 그럼 여러 개의 길을 갖다 보기에 다른 색깔의 컬러가 많이 표시됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_63.wav|lecs|[KO] 컬러별로 있지만 이거는 멀티풀 옵션 중에 하나다.[KO]
./segmented_character_voice/lecs/lecs_14_64.wav|lecs|[KO] 이렇게 보시면 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_14_65.wav|lecs|[KO] 이렇게 멀티풀 옵션의 길들이 항상 존재해서 여러 가지 색깔, 지금 녹색 길, 파란색 길, 빨간색 길, 오렌지색 길들을 잘 믹스해서 항상 연결되도록 만들어내는 원리가 뒤에 숨어 있다고 생각하시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_14_66.wav|lecs|[KO] 이렇게 지금 이제 네트워킹을 통해서 데이터 센터의 부분에 모든 클러스터를 한 덩어리 해가지고 그거에서 나오는 트래픽들이 서로 연결되어서 만들어났다.[KO]
./segmented_character_voice/lecs/lecs_14_67.wav|lecs|[KO] 그러면 이제 그것들이 어떤 일을 해줄 수 있는지 한번 생각을 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_68.wav|lecs|[KO] 클러스터라고 하는 것들을 저희 보면 4개는 다양한 머신들이 지금 모여서 클러스터 형태로 모여있다.[KO]
./segmented_character_voice/lecs/lecs_14_69.wav|lecs|[KO] 이렇게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_14_70.wav|lecs|[KO] 그게 한 4개는 한 20대 정도의 머신들이 피지컬에 꽂혀 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_71.wav|lecs|[KO] 그러면 피지컬한 머신들에는 다 계산할 수 있는 컴퓨팅 리소스가 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_72.wav|lecs|[KO] 그게 이제 프로세스가 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_14_73.wav|lecs|[KO] 그 다음에 저장할 수 있는 스토리 리소스가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_74.wav|lecs|[KO] 기본적으로 저희 하는 플래시로 받는 SSD나 아니면 하드디스크 스토리지가 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_75.wav|lecs|[KO] 그 다음에 얘를 연결해서 하는 연결해주는 어떤 네트워킹 재료가 있죠.[KO]
./segmented_character_voice/lecs/lecs_14_76.wav|lecs|[KO] 이런 재료들을 지금 얘기하는 아주 타이트한 패브릭 수준의 네트워킹을 통하면[KO]
./segmented_character_voice/lecs/lecs_14_77.wav|lecs|[KO] 이 재료를 어느 박스에 있던지 어느 서버에 있던지 상관없이 한 덩이를 묶을 수 있는 기술적인 방법론이 생기고요.[KO]
./segmented_character_voice/lecs/lecs_14_78.wav|lecs|[KO] 그 방법론을 잘 활용해서 데이터 센터를 내가 원하는 상태로 정의해서 쓴다.[KO]
./segmented_character_voice/lecs/lecs_14_79.wav|lecs|[KO] 내가 원하는 상태로 소프트웨어적으로 정의해서 쓴다.[KO]
./segmented_character_voice/lecs/lecs_14_80.wav|lecs|[KO] 소프트웨어 디파인드 데이터 센터라는 개념으로 가게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_81.wav|lecs|[KO] 그래서 소프트웨어적으로 데이터 센터에 있는 재료들을 갖다가 어떤 하드에 있던지 상관없이[KO]
./segmented_character_voice/lecs/lecs_14_82.wav|lecs|[KO] 내가 원하는 대로 이만큼 모아내서 네트워킹의 힘을 통해서 모아내서 한 덩어리 만들어내고[KO]
./segmented_character_voice/lecs/lecs_14_83.wav|lecs|[KO] 그걸 갖다가 어떤 특정한 유저한테 할당을 한다.[KO]
./segmented_character_voice/lecs/lecs_14_84.wav|lecs|[KO] 특정한 유저의 할당을 할 때 하나의 더 개념이 추가됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_85.wav|lecs|[KO] 저희가 배웠던 가상화 개념이 여기서 활용이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_86.wav|lecs|[KO] 그래서 특정한 유저한테 이거는 유저를 위한 부분이라고[KO]
./segmented_character_voice/lecs/lecs_14_87.wav|lecs|[KO] 특별하게 아이솔레이션에서 버추얼라이저 하는 부분을 통해서[KO]
./segmented_character_voice/lecs/lecs_14_88.wav|lecs|[KO] 이 리소스는 이 유저의 거야. 이렇게 해서 나눠주게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_14_89.wav|lecs|[KO] 그래서 소프트웨어 디파인드 센터라면 어떤 특정한 유저한테[KO]
./segmented_character_voice/lecs/lecs_14_90.wav|lecs|[KO] 특정한 리소스의 일부를 잘라서 줄 수 있는 기능이 생겨서[KO]
./segmented_character_voice/lecs/lecs_14_91.wav|lecs|[KO] 데이터 센터에 있는 리소스를 효과적으로 쓸 수 있는 방법이 되죠.[KO]
./segmented_character_voice/lecs/lecs_14_92.wav|lecs|[KO] 이런 방법을 조금 더 확장을 하면 어떤 방법이 되는지 한번 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_93.wav|lecs|[KO] 중반에 말씀드렸던 개념을 좀 더 확장합니다.[KO]
./segmented_character_voice/lecs/lecs_14_94.wav|lecs|[KO] 그럼 어떤 개념으로 저희가 갈 수 있다면 데이터 센터는 크게 보면[KO]
./segmented_character_voice/lecs/lecs_14_95.wav|lecs|[KO] 이게 굉장히 하나의 굉장히 커다란 컴퓨터다라고 생각할 수 있는[KO]
./segmented_character_voice/lecs/lecs_14_96.wav|lecs|[KO] 그런 개념으로 바뀝니다. 데이터 센터 안에 제가 말씀드렸을 때[KO]
./segmented_character_voice/lecs/lecs_14_97.wav|lecs|[KO] 아주 거대한 데이터 센터에는 10만 대의 머신이 있는데[KO]
./segmented_character_voice/lecs/lecs_14_98.wav|lecs|[KO] 10만 대의 머신이 결국은 하나의 거대한 컴퓨터다.[KO]
./segmented_character_voice/lecs/lecs_14_99.wav|lecs|[KO] 이렇게 생각하는 게 가장 좋은 방법. 그래서 컴퓨터를 마음대로[KO]
./segmented_character_voice/lecs/lecs_14_100.wav|lecs|[KO] 여러 명이 원하는 대로 나눠서 사용할 수 있다.[KO]
./segmented_character_voice/lecs/lecs_14_101.wav|lecs|[KO] 이게 더 좋다는 거죠. 그럼 이 부분하고 저희가 얘기하는[KO]
./segmented_character_voice/lecs/lecs_14_102.wav|lecs|[KO] 단순한 가상화에 의존하는 방법을 한번 비교해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_103.wav|lecs|[KO] 가상화라는 건 이렇습니다. 저희가 데이터 센터에 한 머신이 있으면[KO]
./segmented_character_voice/lecs/lecs_14_104.wav|lecs|[KO] 버추얼라이제이션 기술은 어떤 걸 하냐면[KO]
./segmented_character_voice/lecs/lecs_14_105.wav|lecs|[KO] 하나의 머신을 여러 개의 머신으로 잘게 나눌 수 있다.[KO]
./segmented_character_voice/lecs/lecs_14_106.wav|lecs|[KO] 보통 하나의 머신을 한 20개 정도의 가상 머신으로 나눌 수 있다.[KO]
./segmented_character_voice/lecs/lecs_14_107.wav|lecs|[KO] 그렇지만 20개의 머신은 하나씩 하나씩 할당을 해서[KO]
./segmented_character_voice/lecs/lecs_14_108.wav|lecs|[KO] 누가 이걸 쓰는 거다. 이게 다 먼저 할당을 해서[KO]
./segmented_character_voice/lecs/lecs_14_109.wav|lecs|[KO] 누가 사용하는지 그때그때 약간 스태틱하게[KO]
./segmented_character_voice/lecs/lecs_14_110.wav|lecs|[KO] 할당을 해서 같이 쓰게 됩니다. 그래서 스태틱하게 나눠서 쓰는 형태.[KO]
./segmented_character_voice/lecs/lecs_14_111.wav|lecs|[KO] 이게 가상화 기술만을 가지고 활용하면 이렇게 나눠 써야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_112.wav|lecs|[KO] 그리고 그때그때 어떤 순간에 나눠 쓸 수는 있지만[KO]
./segmented_character_voice/lecs/lecs_14_113.wav|lecs|[KO] 순간순간에 어떤 사람한테 독점이 되는 구조가 되죠.[KO]
./segmented_character_voice/lecs/lecs_14_114.wav|lecs|[KO] 이런 구조를 탈피해서 조금 더 발전시키면[KO]
./segmented_character_voice/lecs/lecs_14_115.wav|lecs|[KO] 데이터 센터 천체의 머신들이 커다란 하나의 거대한 컴퓨터고[KO]
./segmented_character_voice/lecs/lecs_14_116.wav|lecs|[KO] 그게 이미 조각의 이미의 크기의 조각을 내가 필요한 만큼[KO]
./segmented_character_voice/lecs/lecs_14_117.wav|lecs|[KO] 나눠 쓸 수 있다는 개념이 되면 훨씬 더 발전된 유연한 리소스를[KO]
./segmented_character_voice/lecs/lecs_14_118.wav|lecs|[KO] 공동으로 사용하는 개념이 나올 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_119.wav|lecs|[KO] 그래서 데이터 센터의 빅 컴퓨터라고 하는 부분은[KO]
./segmented_character_voice/lecs/lecs_14_120.wav|lecs|[KO] 지금 얘기했던 어떤 스태틱하게 나눠져서 조각을 하나하나 할당하는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_14_121.wav|lecs|[KO] 실제로 동적으로 쓰는 상태만큼 할당을 받고[KO]
./segmented_character_voice/lecs/lecs_14_122.wav|lecs|[KO] 그 할당양이 전체 리소스의 크기를 넘지 않으면[KO]
./segmented_character_voice/lecs/lecs_14_123.wav|lecs|[KO] 효과적으로 활용할 수 있는 이런 상태를 만들었으면 더 발전된 기술이겠죠.[KO]
./segmented_character_voice/lecs/lecs_14_124.wav|lecs|[KO] 그래서 구글에서 얘기하는 오메가라는 어떤 솔루션이 있어요.[KO]
./segmented_character_voice/lecs/lecs_14_125.wav|lecs|[KO] 오메가의 솔루션은 결국은 리소스를 스케줄링합니다.[KO]
./segmented_character_voice/lecs/lecs_14_126.wav|lecs|[KO] 데이터 센터 안에 있는 리소스를 컴퓨터 안에 있는 리소스, 저장하는 리소스,[KO]
./segmented_character_voice/lecs/lecs_14_127.wav|lecs|[KO] 네트워킹하는 리소스를 전체를 하나로 풀로 모으고[KO]
./segmented_character_voice/lecs/lecs_14_128.wav|lecs|[KO] 이 리소스를 스케줄링을 해서 동적으로 스케줄링을 해서[KO]
./segmented_character_voice/lecs/lecs_14_129.wav|lecs|[KO] 효율적으로 쓰는 사람들만큼 해서 이만큼 이렇게 골고루 잘 나눠 쓸수록 만들어서[KO]
./segmented_character_voice/lecs/lecs_14_130.wav|lecs|[KO] 마치 많은 사람들이 다양한 일을 하고 있지만[KO]
./segmented_character_voice/lecs/lecs_14_131.wav|lecs|[KO] 하나의 리소스를 최적으로 나눠 쓸 수 있는,[KO]
./segmented_character_voice/lecs/lecs_14_132.wav|lecs|[KO] 그 점 중요한 것은 동적으로 나눠 쓸 수 있는 구조를 만들어냈다. 이렇게 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_133.wav|lecs|[KO] 다시 정리해서 보면 데이터 센터를 지금 하는 부분에서[KO]
./segmented_character_voice/lecs/lecs_14_134.wav|lecs|[KO] 클러스팅 원리를 데이터 센터 스케일로 보면 더 큰 클러스가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_14_135.wav|lecs|[KO] 이 거대한 클러스 자체도 큰 논리적으로 큰 하나의 컴퓨터처럼 쓰는 기술로 만들어놓고[KO]
./segmented_character_voice/lecs/lecs_14_136.wav|lecs|[KO] 굉장히 유연하게 리소스 활동해서 보는 이런 경제성을 추가하는 정도까지[KO]
./segmented_character_voice/lecs/lecs_14_137.wav|lecs|[KO] 기술이 현재 진화 되어있다고 생각하시면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_14_138.wav|lecs|[KO] 이 주제를 조금 연결해서 클라우드 컴퓨팅이라는 주제를 확대해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_139.wav|lecs|[KO] 저희가 많이 들은 클라우드 컴퓨팅 입장에서 금방 했던 방법을 한번 생각해 보면[KO]
./segmented_character_voice/lecs/lecs_14_140.wav|lecs|[KO] 데이터 센터들이 하나가 있습니다. 그게 하나의 어떤 크다야 뭐지?[KO]
./segmented_character_voice/lecs/lecs_14_141.wav|lecs|[KO] 필요에 따라서 동적으로 나눠 쓸 수 있는 어떤 리소스 자원의 집합이다.[KO]
./segmented_character_voice/lecs/lecs_14_142.wav|lecs|[KO] 자원이다. 자원의 집합이다. 이렇게 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_14_143.wav|lecs|[KO] 그럼 또 옆에 A라는 지역 말고 B라는 지역에 또 데이터 센터가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_144.wav|lecs|[KO] 근데 그것이 클라우드 이네빌 데이터 센터입니다.[KO]
./segmented_character_voice/lecs/lecs_14_145.wav|lecs|[KO] 그 다음에 또 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_146.wav|lecs|[KO] 크게 말해 보면 지금 지구상에 퍼져 있는 도처에 퍼져 있는[KO]
./segmented_character_voice/lecs/lecs_14_147.wav|lecs|[KO] 이 클라우드가 거대한 데이터 센터들을 갖다가 하나로 묶어 가지고 리소스 풀을 만들고[KO]
./segmented_character_voice/lecs/lecs_14_148.wav|lecs|[KO] 이 리소스 풀을 갖다가 효과적으로 다시 공유해서 나눌 수 있게 만들어내는[KO]
./segmented_character_voice/lecs/lecs_14_149.wav|lecs|[KO] 이런 패러다임으로 가는 게 바로 클라우드 컴퓨팅 패러다임이라고 보시면 됩니다.[KO]
./segmented_character_voice/lecs/lecs_14_150.wav|lecs|[KO] 그래서 굉장히 효율적으로 운영되는 자동화의 원리에 따라서[KO]
./segmented_character_voice/lecs/lecs_14_151.wav|lecs|[KO] 굉장히 효율적으로 운영되는 데이터 센터들을 갖다가[KO]
./segmented_character_voice/lecs/lecs_14_152.wav|lecs|[KO] 하나가 아니라 그걸 갖다가 전세계 스케일로 다시 엮어내고[KO]
./segmented_character_voice/lecs/lecs_14_153.wav|lecs|[KO] 그 엮어낸 스케일에 따라서 리소스가 필요해? CPU가 필요해? 아니면 스토리지가 필요해?[KO]
./segmented_character_voice/lecs/lecs_14_154.wav|lecs|[KO] 이런 거에 따라서 나눠주는 인프라스트럭스 엣저 서비스 형태의 클라우드 서비스가 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_155.wav|lecs|[KO] 이 자원을 가지고 올리는 데이터베이스 서버라든지 어떤 앱 서버라든지[KO]
./segmented_character_voice/lecs/lecs_14_156.wav|lecs|[KO] 여러 가지 서버 기능들을 갖다가 그걸 저희가 보면 약간 플랫폼 기능이라고 합니다.[KO]
./segmented_character_voice/lecs/lecs_14_157.wav|lecs|[KO] 도구 기능을 하는, 플랫폼 기능을 하는 서버 기능을 가지고 있으면 서버 기능을 활용해라.[KO]
./segmented_character_voice/lecs/lecs_14_158.wav|lecs|[KO] 그래서 파스라고 부릅니다. 플랫폼 엣저 서비스. 이런 형태로 서비스를 할 수도 있고요.[KO]
./segmented_character_voice/lecs/lecs_14_159.wav|lecs|[KO] 나는 이제 도구가 아니라 실제로 최종적으로 어떤 일이 바로 처리가 됐으면 좋겠어.[KO]
./segmented_character_voice/lecs/lecs_14_160.wav|lecs|[KO] 우리 회사에서 하는 ERP 서비스는 여기서 됐으면 좋겠어.[KO]
./segmented_character_voice/lecs/lecs_14_161.wav|lecs|[KO] 회사의 재정을 커버하는 이런 서비스가 바로 그냥 클라우드에 가면 바로 그냥 서비스가 다 됐으면 좋겠어.[KO]
./segmented_character_voice/lecs/lecs_14_162.wav|lecs|[KO] 클라우드를 이용하는 SaaS 서비스라고 봅니다. 소프트 엣저 서비스 형태로 해서 제공되는.[KO]
./segmented_character_voice/lecs/lecs_14_163.wav|lecs|[KO] 그래서 저희가 IaaS, PaaS, SaaS 이런 다양한 어떤 서비스 계층을 가지고[KO]
./segmented_character_voice/lecs/lecs_14_164.wav|lecs|[KO] 다양한 서비스를 뭐뭐뭐 엣저 서비스. 그렇죠.[KO]
./segmented_character_voice/lecs/lecs_14_165.wav|lecs|[KO] 이런 형태로 할 수 있게 만들어주는 게 클라우드 컴퓨팅이다.[KO]
./segmented_character_voice/lecs/lecs_14_166.wav|lecs|[KO] 그래서 클라우드 컴퓨팅의 시대가 지금 와서 클라우딩 방법 내에서 다시[KO]
./segmented_character_voice/lecs/lecs_14_167.wav|lecs|[KO] 가장 효율적으로 유틸라이저 시스템을 리솔스 유틸라이저하고 에너지를 가장 최적으로 쓸 수 있는[KO]
./segmented_character_voice/lecs/lecs_14_168.wav|lecs|[KO] 그런 경제적인 솔루션을 뒤에 깔고 그 다음에 규모의 경제를 깔고[KO]
./segmented_character_voice/lecs/lecs_14_169.wav|lecs|[KO] 전 세계 어떤 컴퓨팅 리드를 갖다가 커버하는 게 가장 효과적이다.[KO]
./segmented_character_voice/lecs/lecs_14_170.wav|lecs|[KO] 이렇게 얘기하고 있는 거죠. 그래서 이게 굉장히 지금 활성화되고[KO]
./segmented_character_voice/lecs/lecs_14_171.wav|lecs|[KO] 엄청난 속도로 지금 퍼져나가고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_172.wav|lecs|[KO] 이 퍼져나가는 부분에서 조금 보일 수 있는 자료가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_14_173.wav|lecs|[KO] 어느 정도의 스케일로 지금 퍼져나가느냐 이런 부분에 대한 거를[KO]
./segmented_character_voice/lecs/lecs_14_174.wav|lecs|[KO] 그 다음에 어떤 업체들이 이런 걸 갖다가 주도하느냐.[KO]
./segmented_character_voice/lecs/lecs_14_175.wav|lecs|[KO] 많이 알고 계시겠지만 아마존이라고 하는 쪽에서 AWS라는 클라우드 서비스를[KO]
./segmented_character_voice/lecs/lecs_14_176.wav|lecs|[KO] 하고 있어서 전 세계 마켓 쉬어의 뭐죠? 한 과반 이상을 아주 점유하면서[KO]
./segmented_character_voice/lecs/lecs_14_177.wav|lecs|[KO] 리딩을 하고 있고요. 이걸 갖다가 마이크로소프트, 구글, 알리바바,[KO]
./segmented_character_voice/lecs/lecs_14_178.wav|lecs|[KO] IBM 이런 회사들이 쫓아가면서 이 마켓에 경쟁하는 이 형태.[KO]
./segmented_character_voice/lecs/lecs_14_179.wav|lecs|[KO] 그렇지만 이 마켓이 굉장히 뭐죠? 급속하게 증가하면서 발전되고 있다.[KO]
./segmented_character_voice/lecs/lecs_14_180.wav|lecs|[KO] 이렇게 됩니다. 그걸 한번 살펴보는 자료를 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_0.wav|lecs|[KO] 자료를 살펴보시면 이렇습니다. 자료에서 그림을 보시면 기존의 어떤 데이터 센터는 점점점점 줄어들고[KO]
./segmented_character_voice/lecs/lecs_15_1.wav|lecs|[KO] 클라우드를 베이스하는 데이터 센터들이 더 늘어납니다.[KO]
./segmented_character_voice/lecs/lecs_15_2.wav|lecs|[KO] 여기서 한 가지 더 구분해서 말씀을 드려야 될 것은 아까 말씀드렸던 AWS, Microsoft, Azure라고 정식 명칭을 이릈습니다.[KO]
./segmented_character_voice/lecs/lecs_15_3.wav|lecs|[KO] 그 다음 구글, 클라우드, 플랫폼 이런 것들은 기본적으로 Public Cloud라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_15_4.wav|lecs|[KO] Public Cloud랑 내가 어떤 개인이 자기 어떤 공간 안에 한다.[KO]
./segmented_character_voice/lecs/lecs_15_5.wav|lecs|[KO] Private Cloud 아니면 On-Premise, 내 어떤 영역 안에서 구축한 클라우드다.[KO]
./segmented_character_voice/lecs/lecs_15_6.wav|lecs|[KO] On-Premise 클라우드, 이런 Private On-Premise 클라우드 부분을 가지고 하는 클라우드.[KO]
./segmented_character_voice/lecs/lecs_15_7.wav|lecs|[KO] 그래서 Private한 On-Premise한 클라우드하고 Public하게 남들하고 공정하게 선하는[KO]
./segmented_character_voice/lecs/lecs_15_8.wav|lecs|[KO] 상업적인 클라우드를 믹스해가지고 클라우드가 점점 과반을 넘는 인프라를 커버하는 상태로 지금 넘어가고 있다.[KO]
./segmented_character_voice/lecs/lecs_15_9.wav|lecs|[KO] 이렇게 말씀드렸죠.[KO]
./segmented_character_voice/lecs/lecs_15_10.wav|lecs|[KO] 그리고 점점 그 지분은 더 클라우드 중심으로 아니면 클라우드가 우선되는 상태로 지금 진화되고 있다.[KO]
./segmented_character_voice/lecs/lecs_15_11.wav|lecs|[KO] 요거를 보여주는 자료입니다.[KO]
./segmented_character_voice/lecs/lecs_15_12.wav|lecs|[KO] 클라우드의 확산이 굉장히 중요하고 클라우드가 갖고 있는 경제성이 굉장히 효과적이고[KO]
./segmented_character_voice/lecs/lecs_15_13.wav|lecs|[KO] 클라우드가 갖고 있는 뭐죠? 융통성이랑 스케리밋이 굉장히 크기 때문에[KO]
./segmented_character_voice/lecs/lecs_15_14.wav|lecs|[KO] 이 클라우드를 레버리지하는 인프라를 가지고 갈 수밖에 없고[KO]
./segmented_character_voice/lecs/lecs_15_15.wav|lecs|[KO] 이걸 잘 활용할 수 있는 방법을 강구해서 대응을 해야 된다.[KO]
./segmented_character_voice/lecs/lecs_15_16.wav|lecs|[KO] 이런 메시지를 전해드립니다.[KO]
./segmented_character_voice/lecs/lecs_15_17.wav|lecs|[KO] 그럼 조금 더 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_18.wav|lecs|[KO] 이런 인프라가 대세하고 클라우드 인프라가 굉장히 대세하고 클라우드 서비스가 대세라는데[KO]
./segmented_character_voice/lecs/lecs_15_19.wav|lecs|[KO] 그럼 어떤 것들을 서비스로 할 수 있느냐?[KO]
./segmented_character_voice/lecs/lecs_15_20.wav|lecs|[KO] 모든 종류의 상품이 클라우드에 다 있다고 말하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_21.wav|lecs|[KO] 저희가 예를 들어 AWS 아마존 클라우드 케이스를 보면[KO]
./segmented_character_voice/lecs/lecs_15_22.wav|lecs|[KO] 아마존에 오면 HPC 클러스터 하는 부분들 서비스 다 받을 수 있다.[KO]
./segmented_character_voice/lecs/lecs_15_23.wav|lecs|[KO] 빅데이터 클러스 서비스 당연히 다 받을 수 있다.[KO]
./segmented_character_voice/lecs/lecs_15_24.wav|lecs|[KO] AR을 위한 딥러닝도 다 할 수 있다.[KO]
./segmented_character_voice/lecs/lecs_15_25.wav|lecs|[KO] 그 다음에 IoT를 연결해서 하는 데이터를 모아서 하는 이런 새로운 서비스도 만들 수 있다.[KO]
./segmented_character_voice/lecs/lecs_15_26.wav|lecs|[KO] 지금 생각할 수 있는 대만한 서비스를 다 온 디멘드로 필요한 만큼[KO]
./segmented_character_voice/lecs/lecs_15_27.wav|lecs|[KO] 사용하는 만큼 지불을 하고 동적으로 활용할 수 있다.[KO]
./segmented_character_voice/lecs/lecs_15_28.wav|lecs|[KO] 이런 메시지를 전하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_29.wav|lecs|[KO] 물론 한 가지 숨어있는 문제는 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_30.wav|lecs|[KO] 결국은 클라우드가 다 준비되어 있기 때문에 편안하게 그냥 필요한 만큼 쓰지만[KO]
./segmented_character_voice/lecs/lecs_15_31.wav|lecs|[KO] 어떤 리소스를 내가 준비해서 직접 부축해서 쓰는 상태에 비해서[KO]
./segmented_character_voice/lecs/lecs_15_32.wav|lecs|[KO] 내가 리소스를 100% 쓴다면 클라우드가 아직은 비쌉니다.[KO]
./segmented_character_voice/lecs/lecs_15_33.wav|lecs|[KO] 그렇지만 내가 그걸 준비하는 과정이나 이런 부분들을 할 수 있는[KO]
./segmented_character_voice/lecs/lecs_15_34.wav|lecs|[KO] 힘이나 실력이나 능력이나 시간이나 이런 것이 없을 때는 당연히 이게 대안이 될 거고요.[KO]
./segmented_character_voice/lecs/lecs_15_35.wav|lecs|[KO] 그래서 비용하고 이런 부분에서는 어느 정도 포인트에서 균형점을 찾아야 되지만[KO]
./segmented_character_voice/lecs/lecs_15_36.wav|lecs|[KO] 전반적으로 온 디멘드로 동적으로 인프라 없이 내가 새로운 서비스를 펼쳐보겠다는 사람들 입장에서는[KO]
./segmented_character_voice/lecs/lecs_15_37.wav|lecs|[KO] 클라우드가 굉장히 유용한 어떤 환경이 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_15_38.wav|lecs|[KO] 이게 중요한 부분입니다.[KO]
./segmented_character_voice/lecs/lecs_15_39.wav|lecs|[KO] 그래서 굉장히 큰 세력을 얻으면서 확장이 되고 있기 때문에[KO]
./segmented_character_voice/lecs/lecs_15_40.wav|lecs|[KO] 이것에 대해 주목할 필요가 있고 어떤 원리로 동작하는지 이해하셔야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_15_41.wav|lecs|[KO] 이 부분을 가지고 정리해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_42.wav|lecs|[KO] 저희가 지난번에 살펴봤던 컨테이너라는 주제하고 클라우드라는 주제가 어떻게 연결되는지 거기다 한번 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_43.wav|lecs|[KO] 클라우드라는 주제는 어떻게 됐죠?[KO]
./segmented_character_voice/lecs/lecs_15_44.wav|lecs|[KO] 가상머신을 활용해서 하는 것에서 먼저 시작이 됐다.[KO]
./segmented_character_voice/lecs/lecs_15_45.wav|lecs|[KO] 가상머신을 가지고 피지컬머신을 가상머신으로 나눠서 한 대를 20대로 나눠주는 이런 개념에서 먼저 시작됐고요.[KO]
./segmented_character_voice/lecs/lecs_15_46.wav|lecs|[KO] 그렇지만 요즘은 점점 컨테이너를 활용하는 클라우드 네이트 방식, 서버리스 방식으로 훨씬 더 유연하게 만들어서[KO]
./segmented_character_voice/lecs/lecs_15_47.wav|lecs|[KO] 그 서비스를 대응하는 방식으로 진화하면서 클라우드가 훨씬 더 유용성의 범위를 더 증가하는 상태로 진화하고 있다.[KO]
./segmented_character_voice/lecs/lecs_15_48.wav|lecs|[KO] 이 메시지를 한번 다시 대상게 해주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_49.wav|lecs|[KO] 지금까지 저희가 클라우드 부분에 대한 어떤 부분을 살펴봤고요.[KO]
./segmented_character_voice/lecs/lecs_15_50.wav|lecs|[KO] 이걸 소프트의 정의 인프라라고 해서 클라우드를 넘어서서 클라우드 데이터 센터에 있는 클라우드 데이터 센터죠.[KO]
./segmented_character_voice/lecs/lecs_15_51.wav|lecs|[KO] 데이터 센터가 결국 전 세계적으로 엮어지는 게 클라우드 데이터 센터다.[KO]
./segmented_character_voice/lecs/lecs_15_52.wav|lecs|[KO] 이런 부분입니다.[KO]
./segmented_character_voice/lecs/lecs_15_53.wav|lecs|[KO] 한번 다시 그림으로 보여드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_54.wav|lecs|[KO] A 지역에 있는 거대한 데이터 센터가 B 지역에 있는 데이터 센터가 한 덩어리에 엮여졌다.[KO]
./segmented_character_voice/lecs/lecs_15_55.wav|lecs|[KO] 기술적으로는 페더레이션이 됐다.[KO]
./segmented_character_voice/lecs/lecs_15_56.wav|lecs|[KO] 연합이 됐다.[KO]
./segmented_character_voice/lecs/lecs_15_57.wav|lecs|[KO] 연맹이 됐다.[KO]
./segmented_character_voice/lecs/lecs_15_58.wav|lecs|[KO] 페더레이션 된 클라우드 데이터 센터가 B에 쫙 버티고 있으면 요즘 어떤 일이 변하지만 클라우드가 굉장히 유용해져서[KO]
./segmented_character_voice/lecs/lecs_15_59.wav|lecs|[KO] 그쪽에 기본적인 게 뭐지?[KO]
./segmented_character_voice/lecs/lecs_15_60.wav|lecs|[KO] 저희가 하는 컴퓨터 리소스, 스토리지 리소스, 네트워킹 리소스가 다 활용해서 쓸 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_61.wav|lecs|[KO] 그게 중심의 코어가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_15_62.wav|lecs|[KO] 이 코어에 저희가 생각하는 요즘 새로운 어떤 스마트한 서비스들이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_63.wav|lecs|[KO] 대표적으로 많이 거론되는 게 자율주행, 스마트카, 그쵸?[KO]
./segmented_character_voice/lecs/lecs_15_64.wav|lecs|[KO] 그다음에 공장에서 자동화된 어떤 생산을 한다.[KO]
./segmented_character_voice/lecs/lecs_15_65.wav|lecs|[KO] 스마트 팩토리, 농장에서 그 스마트 팜, 스마트 애그리컬처 이런 식의 굉장히 필드에 있는 필드에 있다.[KO]
./segmented_character_voice/lecs/lecs_15_66.wav|lecs|[KO] 그다음에 아니면 어디 저희가 보면 기술적으로 종단, 끝단에 있는 종단에 있는 다양한 기기들에서 어떤 정보가 오고[KO]
./segmented_character_voice/lecs/lecs_15_67.wav|lecs|[KO] 정보들이 오면 그걸 갖다가 클라우드에서 종합적으로 해석한 다음에[KO]
./segmented_character_voice/lecs/lecs_15_68.wav|lecs|[KO] 그거에 대해서 리액션을 내리게 하는 이런 식이죠.[KO]
./segmented_character_voice/lecs/lecs_15_69.wav|lecs|[KO] 그래서 종단에 있는 어떤 IoT 기기들이 하는 정보를 중앙으로 모아서 중점을 분석하고[KO]
./segmented_character_voice/lecs/lecs_15_70.wav|lecs|[KO] 그에 대한 대응을 한다.[KO]
./segmented_character_voice/lecs/lecs_15_71.wav|lecs|[KO] 이런 구조가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_15_72.wav|lecs|[KO] 그래서 엔드에 있는 사물들에서 하는 IoT 씽들을[KO]
./segmented_character_voice/lecs/lecs_15_73.wav|lecs|[KO] 그다음에 중앙에 있는 클라우드 데이터 센터를 연결하는 구조가 되고요.[KO]
./segmented_character_voice/lecs/lecs_15_74.wav|lecs|[KO] 이렇게 해서 서비스를 해서 IoT하고 클라우드에 연결되는 서비스가 진행되면서[KO]
./segmented_character_voice/lecs/lecs_15_75.wav|lecs|[KO] 새로운 서비스로 가는 어떤 그런 인프라가 지금 서서히 빌드되고 있다.[KO]
./segmented_character_voice/lecs/lecs_15_76.wav|lecs|[KO] 이렇게 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_77.wav|lecs|[KO] 그런데 이 문제를 처리할 때 하나의 어떤 변수가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_78.wav|lecs|[KO] 사실은 어떤 변수가 있냐면[KO]
./segmented_character_voice/lecs/lecs_15_79.wav|lecs|[KO] 클라우드 데이터 센터는 제가 있는 위치에서 보면[KO]
./segmented_character_voice/lecs/lecs_15_80.wav|lecs|[KO] 지금 전 세계 클라우드 데이터 센터가 모두 펴져 있지만[KO]
./segmented_character_voice/lecs/lecs_15_81.wav|lecs|[KO] 한 10개, 20개 펴져 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_82.wav|lecs|[KO] 그렇지만은 생각보다는 그 클라우드 데이터 센터까지 가는 거리라 그럴까요?[KO]
./segmented_character_voice/lecs/lecs_15_83.wav|lecs|[KO] 거리가 어느 정도 거리가 필요합니다.[KO]
./segmented_character_voice/lecs/lecs_15_84.wav|lecs|[KO] 거리가 필요하기 때문에 내가 어떤 서비스에서 굉장히 실시간이고 급하고 긴박하면서 중요한[KO]
./segmented_character_voice/lecs/lecs_15_85.wav|lecs|[KO] 아까 말씀드렸던 스마트카 서비스를 생각해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_15_86.wav|lecs|[KO] 스마트카 서비스가 어떤 카가 주행하면서[KO]
./segmented_character_voice/lecs/lecs_15_87.wav|lecs|[KO] 어떤 뒷면에 있는 안 보이는 쪽에 어떤 새로운 자동차가 사각에 있는 걸 보여주는 정보를[KO]
./segmented_character_voice/lecs/lecs_15_88.wav|lecs|[KO] 저한테 전달해야 되면 실시간성, 굉장히 급한 시간이 중요하죠.[KO]
./segmented_character_voice/lecs/lecs_15_89.wav|lecs|[KO] 그런 걸 처리해서 클라우드 데이터 센터까지 중앙에 있는 멀리 있는 데 보고했다가 돌아와서는[KO]
./segmented_character_voice/lecs/lecs_15_90.wav|lecs|[KO] 시간이 너무 많이 걸리게 되죠.[KO]
./segmented_character_voice/lecs/lecs_15_91.wav|lecs|[KO] 그렇기 때문에 어떤 현실적인 니트가 생겼냐면[KO]
./segmented_character_voice/lecs/lecs_15_92.wav|lecs|[KO] 저희가 하는 종단이라고 하는 엔드하고[KO]
./segmented_character_voice/lecs/lecs_15_93.wav|lecs|[KO] 그 다음에 코어라고 하는 중심부 사이에 엣지라고 하는[KO]
./segmented_character_voice/lecs/lecs_15_94.wav|lecs|[KO] 저희가 경계선이라고 하는 부분이죠.[KO]
./segmented_character_voice/lecs/lecs_15_95.wav|lecs|[KO] 경계선에 기본적으로 어느 정도 컴퓨팅 인프라가 필요합니다.[KO]
./segmented_character_voice/lecs/lecs_15_96.wav|lecs|[KO] 경계선에 컴퓨팅 인프라는 또 요즘 얘기하는[KO]
./segmented_character_voice/lecs/lecs_15_97.wav|lecs|[KO] 무선통신에서 얘기하는 기주국들[KO]
./segmented_character_voice/lecs/lecs_15_98.wav|lecs|[KO] 기주국들이 어느 정도 커버리지에서 무선이 다 연결된다.[KO]
./segmented_character_voice/lecs/lecs_15_99.wav|lecs|[KO] 이 기주국의 개념이랑 연결되면서[KO]
./segmented_character_voice/lecs/lecs_15_100.wav|lecs|[KO] 저희가 모바일 엣지 클라우드 또는 멀티 억세스 엣지 클라우드[KO]
./segmented_character_voice/lecs/lecs_15_101.wav|lecs|[KO] 이런 식으로 해서 엣지단에 봉파하는 약간 전진배치되어 있는[KO]
./segmented_character_voice/lecs/lecs_15_102.wav|lecs|[KO] 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_15_103.wav|lecs|[KO] 저희 앞에 있는 척후부대라고 그럴까요?[KO]
./segmented_character_voice/lecs/lecs_15_104.wav|lecs|[KO] 이런 개념이 한 번 있고요.[KO]
./segmented_character_voice/lecs/lecs_15_105.wav|lecs|[KO] 그 다음에 클라우드가 본대가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_15_106.wav|lecs|[KO] 그리고 나서 시행대를 상대하는 이런 식으로[KO]
./segmented_character_voice/lecs/lecs_15_107.wav|lecs|[KO] 엔드, 엣지, 코어.[KO]
./segmented_character_voice/lecs/lecs_15_108.wav|lecs|[KO] 그렇죠.[KO]
./segmented_character_voice/lecs/lecs_15_109.wav|lecs|[KO] 종단, 그 다음에 엣지, 그 다음에 중심을 세 개로 연결하는[KO]
./segmented_character_voice/lecs/lecs_15_110.wav|lecs|[KO] 이런 식의 판에 인프라를 가지고 리소스가 있고[KO]
./segmented_character_voice/lecs/lecs_15_111.wav|lecs|[KO] 그 리소스를 저희가 원하는 데 빌려가지고 쓸 수 있게 되면[KO]
./segmented_character_voice/lecs/lecs_15_112.wav|lecs|[KO] 그 리소스에다가 원하는 일을[KO]
./segmented_character_voice/lecs/lecs_15_113.wav|lecs|[KO] 넌 이것 좀 해줘, 넌 저것 좀 해줘.[KO]
./segmented_character_voice/lecs/lecs_15_114.wav|lecs|[KO] 클라우드 모델이 어떤 모델이었죠?[KO]
./segmented_character_voice/lecs/lecs_15_115.wav|lecs|[KO] 리소스 저희가 원하는 대로 온 디멘드로 빌려서 활용하는 모델이었기 때문에[KO]
./segmented_character_voice/lecs/lecs_15_116.wav|lecs|[KO] 그걸 가지고 펑션들을 갖다가 내가 원하는 일, 원하는 일은 저의 펑션입니다.[KO]
./segmented_character_voice/lecs/lecs_15_117.wav|lecs|[KO] 이런 어플리케이션 펑션을 여기에 투입해서 돌려줬으면 좋겠어.[KO]
./segmented_character_voice/lecs/lecs_15_118.wav|lecs|[KO] 이렇게 얘기하는 거죠.[KO]
./segmented_character_voice/lecs/lecs_15_119.wav|lecs|[KO] 하나 더 북타면 내가 어떤 펑션을 돌리라고 그러는데[KO]
./segmented_character_voice/lecs/lecs_15_120.wav|lecs|[KO] 지금 클라우드에 있는, 중심에 있는 클라우드에서 돌리는 방법이나[KO]
./segmented_character_voice/lecs/lecs_15_121.wav|lecs|[KO] 종단에 있는 IoT의 어떤 리소스에서 돌리는 방법이나[KO]
./segmented_character_voice/lecs/lecs_15_122.wav|lecs|[KO] 아니면 엣지에 있는 마이크로 클라우드에서 돌리는 방법이 다 다르면 골치 아픕니다.[KO]
./segmented_character_voice/lecs/lecs_15_123.wav|lecs|[KO] 그래서 리소스 자체는 굉장히 저희가 얘기하는[KO]
./segmented_character_voice/lecs/lecs_15_124.wav|lecs|[KO] 하이퍼 컨버지드, 융합형 모델을 만들어서[KO]
./segmented_character_voice/lecs/lecs_15_125.wav|lecs|[KO] 스마트한 스마트폰의 원리를[KO]
./segmented_character_voice/lecs/lecs_15_126.wav|lecs|[KO] 서버의 스마트 박스 원리로 만들어서 집어넣고[KO]
./segmented_character_voice/lecs/lecs_15_127.wav|lecs|[KO] 그게다가 굉장히 표준화된 어떤 게 있어서 내가 어떤 상태에서[KO]
./segmented_character_voice/lecs/lecs_15_128.wav|lecs|[KO] 내가 펑션을 만들어서 투입을 하면 그게 또 돌 거야.[KO]
./segmented_character_voice/lecs/lecs_15_129.wav|lecs|[KO] 이런 식의 쉬운 모델을 가면 좋겠죠.[KO]
./segmented_character_voice/lecs/lecs_15_130.wav|lecs|[KO] 이런 식의 그림을 그리면서 이런 인프라를 서서히 빌드업해서 만들어가고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_131.wav|lecs|[KO] 이걸 저희가 어떻게 용어를 부르냐면[KO]
./segmented_character_voice/lecs/lecs_15_132.wav|lecs|[KO] 소프트웨어 디파인드 인프라 스트랙터라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_15_133.wav|lecs|[KO] 소프트웨어로 정의하는 ICT 인프라, 이렇게 말할 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_15_134.wav|lecs|[KO] 소프트웨어로 정의하는 ICT 인프라인데 앞에다 수식어를 붙일 때[KO]
./segmented_character_voice/lecs/lecs_15_135.wav|lecs|[KO] 컨버젼트 또는 컨버지드라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_15_136.wav|lecs|[KO] 왜냐하면 소프트웨어로 정의되는 ICT 인프라가[KO]
./segmented_character_voice/lecs/lecs_15_137.wav|lecs|[KO] 너무나 다양한 하드웨어를 쓰는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_15_138.wav|lecs|[KO] 굉장히 표준화되고 커머디티 하드웨어에서도 다 비슷비슷하게 만들어져서[KO]
./segmented_character_voice/lecs/lecs_15_139.wav|lecs|[KO] 어디에 있건 간에 사이즈는 다르지만[KO]
./segmented_character_voice/lecs/lecs_15_140.wav|lecs|[KO] 사이즈는 리소스의 크기는 다르지만[KO]
./segmented_character_voice/lecs/lecs_15_141.wav|lecs|[KO] 다 비슷한 형태로 활용할 수 있는 리소스가 된다.[KO]
./segmented_character_voice/lecs/lecs_15_142.wav|lecs|[KO] 그러면 그걸 쫙 퍼뜨려서 펑션을 깔고[KO]
./segmented_character_voice/lecs/lecs_15_143.wav|lecs|[KO] 편안하게 내가 필요한 만큼 연결해서 사용하면[KO]
./segmented_character_voice/lecs/lecs_15_144.wav|lecs|[KO] 효과적으로 활용할 수 있는 체제가 나온다.[KO]
./segmented_character_voice/lecs/lecs_15_145.wav|lecs|[KO] 그래서 컨버젼트한 아니면 컨버지드한 소프트웨어 디파인드 인프라를[KO]
./segmented_character_voice/lecs/lecs_15_146.wav|lecs|[KO] 갖다가 빌드해서 다양한 서비스를 서포트할 수 있는 그림을 그려갖고[KO]
./segmented_character_voice/lecs/lecs_15_147.wav|lecs|[KO] 그걸 지원하는 체계로 변화되면[KO]
./segmented_character_voice/lecs/lecs_15_148.wav|lecs|[KO] 굉장히 효율적으로 미래에서 필요한 서비스를 갖다가 지원할 수 있게 된다.[KO]
./segmented_character_voice/lecs/lecs_15_149.wav|lecs|[KO] 이렇게 볼 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_150.wav|lecs|[KO] 말씀드렸던 일을 갖다가 그러면 소프트웨어 디파인드 인프라가 그 정도로 중요하고 좋으면[KO]
./segmented_character_voice/lecs/lecs_15_151.wav|lecs|[KO] 그럼 그걸 갖다가 사람들이 그 위에서 어떤 구축활동을 하겠죠.[KO]
./segmented_character_voice/lecs/lecs_15_152.wav|lecs|[KO] 이런 부분에서는 클라우드를 갖다가 대표하는 아마존이나 구글 쪽에서[KO]
./segmented_character_voice/lecs/lecs_15_153.wav|lecs|[KO] 그런 부분에 대응하는 일을 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_154.wav|lecs|[KO] 자료에서 보실 수 있듯이 아마존의 경우도[KO]
./segmented_character_voice/lecs/lecs_15_155.wav|lecs|[KO] 전세계에 하는 리전이라고 하는 여러 리전에 클라우드 데이터 센터를 놓고[KO]
./segmented_character_voice/lecs/lecs_15_156.wav|lecs|[KO] 그것들을 한 덩어리로 연결한 다음에[KO]
./segmented_character_voice/lecs/lecs_15_157.wav|lecs|[KO] 금방 말씀드렸던 엣지 지역에[KO]
./segmented_character_voice/lecs/lecs_15_158.wav|lecs|[KO] 나한테 이 엣지 지역에 와서 나를 만나면은[KO]
./segmented_character_voice/lecs/lecs_15_159.wav|lecs|[KO] 나의 클라우드 리소스랑 쉽게 연결해서 쓸 수 있을 거예요.[KO]
./segmented_character_voice/lecs/lecs_15_160.wav|lecs|[KO] 점점 내 클라우드 데이터 센터가 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_15_161.wav|lecs|[KO] 쭉 전세계로 진출해서 나한테 여기 와서 만나시면은[KO]
./segmented_character_voice/lecs/lecs_15_162.wav|lecs|[KO] 내 클라우드 리소스는 다 편안하게 전세계 어디 있는 걸 가리지 않고 쓸 수 있을 겁니다.[KO]
./segmented_character_voice/lecs/lecs_15_163.wav|lecs|[KO] 이런 얘기를 하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_15_164.wav|lecs|[KO] 비슷한 얘기를 구글도 비슷한 인프라를 빌드하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_165.wav|lecs|[KO] 전세계에 퍼져 있는 데이터 센터들을 연결해서 한 덩어리 만들어 놓고[KO]
./segmented_character_voice/lecs/lecs_15_166.wav|lecs|[KO] 똑같이 지금 유저들,[KO]
./segmented_character_voice/lecs/lecs_15_167.wav|lecs|[KO] 저희 하는 실제로 사용자들을 만나는 어떤 포인트를[KO]
./segmented_character_voice/lecs/lecs_15_168.wav|lecs|[KO] 이 엣지 로케이션의 포인트를 만들어 놓고[KO]
./segmented_character_voice/lecs/lecs_15_169.wav|lecs|[KO] 그걸 다시 벨트를 해서 연결하는[KO]
./segmented_character_voice/lecs/lecs_15_170.wav|lecs|[KO] 기본적으로 잘 보시면 점점 뭐지?[KO]
./segmented_character_voice/lecs/lecs_15_171.wav|lecs|[KO] 외곽에서 중앙으로 중앙으로 중앙으로 점점 모여서[KO]
./segmented_character_voice/lecs/lecs_15_172.wav|lecs|[KO] 커넥티비티가 연결될 수 있는[KO]
./segmented_character_voice/lecs/lecs_15_173.wav|lecs|[KO] 이런 인프라를 만들어 내고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_15_174.wav|lecs|[KO] 그래서 Converged SDI 인프라를 만들어 내는 모습을 확인하실 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_0.wav|lecs|[KO] 이 그림을 조금 더 이제 개념들을 한 번 더 정리해 보겠습니다. 지금까지 말씀드린 내용을 잘 다시 한 번 정리해 보면[KO]
./segmented_character_voice/lecs/lecs_16_1.wav|lecs|[KO] 저희가 중앙에 있는 클라우드가 거대 규모의 클라우드가 통합적인 큰 리소스풀을 만들고 이 리소스풀이 실제로 해주는 일은[KO]
./segmented_character_voice/lecs/lecs_16_2.wav|lecs|[KO] 대규모의 HPC 클러스 계산, 대규모의 빅테이터 계산, 또 AI 계산을 할 수 있도록 큰 일을 중앙에서 하는 거죠.[KO]
./segmented_character_voice/lecs/lecs_16_3.wav|lecs|[KO] 많은 데이터를 모아놓고 하는 일은 중앙에서 하게 되고요. 끝단에서는 실제로 센싱이나 기본적으로 IoT에서 어떤 정보를 모으고[KO]
./segmented_character_voice/lecs/lecs_16_4.wav|lecs|[KO] 그 다음에 정보에 대해서 반응시키는, 그러니까 액추에이션이라고 부릅니다. 센스 앤 액추에이터라고 부르는데 어떤가를[KO]
./segmented_character_voice/lecs/lecs_16_5.wav|lecs|[KO] 센싱해서 정보를 모으고 그거에 대해서 리액션을 하도록 하는 센스 앤 액추에이터 일을 IoT단에서, 중단에서 하게 되고 그 사이를 아까 말씀드렸던[KO]
./segmented_character_voice/lecs/lecs_16_6.wav|lecs|[KO] 엣지 마이크로 클라우드 형태로 가운데로 채워주면서 기본적인 급한 일은 엣지 클라우드에 대응시키고 시간을 갖고 할 수 있는 거 코어까지 가서 점점 모아서 심사숙고해서 정리하는[KO]
./segmented_character_voice/lecs/lecs_16_7.wav|lecs|[KO] 이런 형태의 인프라를 갖고 있는 거죠. 이 부분을 갖다가 저희가 소프트웨어 디파인드 인프라스트럭을 부르고요.[KO]
./segmented_character_voice/lecs/lecs_16_8.wav|lecs|[KO] 이 소프트웨어 디파인드 인프라 스트럭처가 지금 어떤 변화를 조금씩 갖고 있냐면 최근에 일권화 된 5G, 5G라고 해서 굉장히 모바일 네트워크가 지금의 수준에서[KO]
./segmented_character_voice/lecs/lecs_16_9.wav|lecs|[KO] 한 단계 업그레이드 돼서 모바일에서 기가 BPS의 전송 속도를 받을 수 있고요. 실제로 모바일 단만에서 기본적으로 기지구까지 하는 커뮤니케이션이 1ms의 커뮤니케이션이 끝나게 되는[KO]
./segmented_character_voice/lecs/lecs_16_10.wav|lecs|[KO] 이런 정도의 굉장히 저지연, 고대역폭 이걸 할 수 있는 5G 네트워크랑 만나게 되면 엣지 쪽까지 해서 엔드에서 엣지까지 하는 실시간성을 보장하는[KO]
./segmented_character_voice/lecs/lecs_16_11.wav|lecs|[KO] 결국 실시간이란 말을 이렇게 정리하겠습니다. 엔드에서 엣지까지 가서 어떤 메시지가 단달돼서 엣지가 판단해서 리스판스를 할 때 한 20ms 안에 반응을 해줘야지만[KO]
./segmented_character_voice/lecs/lecs_16_12.wav|lecs|[KO] 아까 얘기했던 어떤 사고, 스마트카에서 사고를 예방할 수 있는 시간을 벌 수 있기 때문에 그 시간을 맞출 수 있는 굉장히 저지연의 울트라 로우 레이텐시를 할 수 있는 인프라를 할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_13.wav|lecs|[KO] 그 인프라를 기본적으로 까는 상태로 SDI 인프라가, SDI 소프트웨어 디파인드 인프라가 5G를 연결하면서 발전하는 형태를 지금 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_16_14.wav|lecs|[KO] 그래서 2018년 후반부터 내년부터 2019년에 본격적으로 5G의 어떤 시대가 이제 열기되면 5G가 디플로이 되는 과정이랑 이 소프트웨어 디파인드 인프라를 전하는 과정이 함께 만나가지고[KO]
./segmented_character_voice/lecs/lecs_16_15.wav|lecs|[KO] 어떤 시너지를 가지고 앞으로의 몇 년 뒤의 모습은 이게 서로 한 5년 뒤의 모습은 이것들이 많이 성숙돼서 연결되는 굉장히 더 효율적인 차세적인 미래의 지향적인 인프라가 나오고[KO]
./segmented_character_voice/lecs/lecs_16_16.wav|lecs|[KO] 거기에 훨씬 더 타임 크리티컬하고 훨씬 더 센스티브하고 사람들의 생명까지도 안전하게 할 수 있는 한 가지 문제가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_17.wav|lecs|[KO] 이 안전이라는 부분, 시큐리티는 굉장히 큰 숙제입니다. 이 숙제를 해결한다면 그걸 할 수 있는 네트워크가 나올 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_16_18.wav|lecs|[KO] 그래서 5G 레버리지스 컨버지스 SDI라는 인프라를 갖다가 빌드해서 가고요.[KO]
./segmented_character_voice/lecs/lecs_16_19.wav|lecs|[KO] 여기에서 한 가지 더 주목할 부분은 이런 인프라를 빌드하는데 인프라를 보면 굉장히 많은 장비가 흩어져서 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_20.wav|lecs|[KO] 코어의 장비, 엣지의 장비, 엔드의 장비 다 달라야 되는데 어떤 특정한 회사들이 모든 인프라를 제공하는 게 아니기 때문에 다 상표가 다르고 제품 특성이 다르게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_16_21.wav|lecs|[KO] 이렇게 되면 실제로 보면 최종적으로 통합적으로 인프라를 운영하는 입장에서는 굉장히 어려운 문제가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_16_22.wav|lecs|[KO] 이 문제를 해결하는 방법 논의로 지금 나오는 부분이 오픈소스 하드웨어 오픈소스 소프트웨어를 통해서[KO]
./segmented_character_voice/lecs/lecs_16_23.wav|lecs|[KO] 인프라를 갖다가 할 때 제조사 브랜드가 아니라 어떤 사용자가 원하는 표준 브랜드의 모델을 가지고[KO]
./segmented_character_voice/lecs/lecs_16_24.wav|lecs|[KO] 하드웨어를 만들고 그 다음에 소프트웨어도 그 표준 브랜드 소프트웨어에 준하면서 어떤 특징을 다하는 이런 형태로 바꾸는[KO]
./segmented_character_voice/lecs/lecs_16_25.wav|lecs|[KO] 오픈소스의 주도를 해가지고 사용자가 주도가 되는 상태로 빌드하는 인프라로 갈 수밖에 없습니다.[KO]
./segmented_character_voice/lecs/lecs_16_26.wav|lecs|[KO] 그렇지 않고서는 제조자의 디펜던트하는 부분에서는 전체 한 제조사가 다시 말씀드리면[KO]
./segmented_character_voice/lecs/lecs_16_27.wav|lecs|[KO] 저적인 인프라를 커버할 수가 없기 때문에 이런 문제로 지금 가고 있다.[KO]
./segmented_character_voice/lecs/lecs_16_28.wav|lecs|[KO] 그래서 오픈소스를 활용하는 컨버지드 SDI로 지금 진행이 되고 있다.[KO]
./segmented_character_voice/lecs/lecs_16_29.wav|lecs|[KO] 오픈소스를 활용하는 오픈소스 소프트웨어와 하드웨어를 하는 컨버지드 SDI로 진행되고 있다.[KO]
./segmented_character_voice/lecs/lecs_16_30.wav|lecs|[KO] 이걸 말씀을 드릴 수 있고 이런 활동을 주도하기 위해서 리눅스 파운데이션[KO]
./segmented_character_voice/lecs/lecs_16_31.wav|lecs|[KO] 저희가 인프라가 쓰고 있는 오퍼링 시스템은 저희 컴퓨터 시스템의 OS 부분을 살펴봤듯이[KO]
./segmented_character_voice/lecs/lecs_16_32.wav|lecs|[KO] 리눅스가 전체적인 대세를 가지고 있다.[KO]
./segmented_character_voice/lecs/lecs_16_33.wav|lecs|[KO] 리눅스의 천하통일이 됐다고 말씀드려도 과할 정도가 아닌 정도로 통일되어 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_34.wav|lecs|[KO] 그래서 리눅스 OS에 숨어있는 컴퓨터 시스템들이 클러스터링 되고[KO]
./segmented_character_voice/lecs/lecs_16_35.wav|lecs|[KO] 다시 SDI 인프라에서 코어, 엣지, 엔드에 퍼져나가서 존재하고[KO]
./segmented_character_voice/lecs/lecs_16_36.wav|lecs|[KO] 존재하는 상태에서 오픈소스 상태로 가지고 만들어진 소프트웨어가 중심이 돼서[KO]
./segmented_character_voice/lecs/lecs_16_37.wav|lecs|[KO] 그다음에 어떤 벤더들의 어떤 업체들의 특화된 솔루션을 애드한 상태로 만들어지고[KO]
./segmented_character_voice/lecs/lecs_16_38.wav|lecs|[KO] 하드웨어적으로도 오픈 컴퓨터 프로젝트, 텔리콤 인프라 프로젝트[KO]
./segmented_character_voice/lecs/lecs_16_39.wav|lecs|[KO] 여러가지 사용자 주도의 오픈소스 하드웨어의 표준 스펙을 가지고[KO]
./segmented_character_voice/lecs/lecs_16_40.wav|lecs|[KO] 만져지는 업체의 디자인이 아니라 사용자 주도의 디자인을 제조업체가 맞춰주는 형태의[KO]
./segmented_character_voice/lecs/lecs_16_41.wav|lecs|[KO] 오픈소스 하드웨어를 연결하면서 전체 인프라를 더 효율적이고 사용자 주도로 할 수 있는[KO]
./segmented_character_voice/lecs/lecs_16_42.wav|lecs|[KO] 인프라로 점점 전환시킬 수 있도록 진행하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_43.wav|lecs|[KO] 이 부분을 정리하면 오픈소스를 레버리지하는 컨버전 인프라에 대한[KO]
./segmented_character_voice/lecs/lecs_16_44.wav|lecs|[KO] 전환이 이뤄진다고 할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_45.wav|lecs|[KO] 지금 이런 상황을 다시 전체적으로 정리해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_16_46.wav|lecs|[KO] 인프라 스트럭처, 플랫폼, 서비스라는 부분에 대한 개념을 조금 나눠서 보실 필요가 있는데[KO]
./segmented_character_voice/lecs/lecs_16_47.wav|lecs|[KO] 어떤 일이 벌어지고 있느냐, 사실은 통합적으로 소프트웨어 디파인드 인프라라는 게 빌드가 되어 있는데[KO]
./segmented_character_voice/lecs/lecs_16_48.wav|lecs|[KO] 소프트웨어 정의하는 인프라라는 게 가장 핵심적인 개념은 인프라 자체를 통일성이 있고 단순화된[KO]
./segmented_character_voice/lecs/lecs_16_49.wav|lecs|[KO] 아까 말했던 사용자 브랜드가 되는 거죠. 사용자 브랜드는 제조자 브랜드랑 다르게[KO]
./segmented_character_voice/lecs/lecs_16_50.wav|lecs|[KO] 어느 통일성이 훨씬 더 강조되는 브랜드죠. 그 브랜드의 상태의 어떤 하드웨어를 가지고[KO]
./segmented_character_voice/lecs/lecs_16_51.wav|lecs|[KO] 그 브랜드의 소프트웨어를 가지고 인프라를 만들면 굉장히 고도화되면서 통일성이 있어야 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_16_52.wav|lecs|[KO] 다변화가 아니라 굉장히 많은 숫자지만 하나의 어떤 효율적인 상태로 만들어져서[KO]
./segmented_character_voice/lecs/lecs_16_53.wav|lecs|[KO] 그림을 그릴 때 저희가 어떤 인프라의 모습을 할 때 이렇게 삼각형을 그리거나[KO]
./segmented_character_voice/lecs/lecs_16_54.wav|lecs|[KO] 피라미드 형태를, 피라미드가 굉장히 안정된 모습의 대표적인 상징입니다.[KO]
./segmented_character_voice/lecs/lecs_16_55.wav|lecs|[KO] 피라미드에서 아래쪽에 저변이 넓어서 점점점점 올라가는 건데 저희가 ICT 인프라를 생각할 때는[KO]
./segmented_character_voice/lecs/lecs_16_56.wav|lecs|[KO] 요새는 역발상을 할 필요가 있다. 이렇게 말씀드리겠습니다. 무슨 말씀을 드리냐면[KO]
./segmented_character_voice/lecs/lecs_16_57.wav|lecs|[KO] 인프라에서 아래쪽에 저변이 넓다는 굉장히 다양한 하드웨어가 이 최종적인 꼭지점에 있는 걸 지원한다는 얘기인데[KO]
./segmented_character_voice/lecs/lecs_16_58.wav|lecs|[KO] 그러면 다양한 종류를 커버해야 된다는 거예요. 다양한 종류는 최종적으로 보면[KO]
./segmented_character_voice/lecs/lecs_16_59.wav|lecs|[KO] 다양한 일을 많이 해야지만 이거는 여기대로 해주고 저건 저기대로 해주고[KO]
./segmented_character_voice/lecs/lecs_16_60.wav|lecs|[KO] 다 이렇게 다르게 해야 되는 어떤 그런 인프라를 빌드하게 되면 굉장히 품이 많이 갑니다.[KO]
./segmented_character_voice/lecs/lecs_16_61.wav|lecs|[KO] 그렇게 해서는 경제성을 확보할 수가 없는 거죠.[KO]
./segmented_character_voice/lecs/lecs_16_62.wav|lecs|[KO] 이걸 역발상을 해서 인프라 하드웨어는 단순화하고 대신 고도화합니다.[KO]
./segmented_character_voice/lecs/lecs_16_63.wav|lecs|[KO] 단순화를 해서 심플리파이 해서 소프트웨어적으로 고도화를 해서 원하는 대로 쓸 수 있게 만들어내서[KO]
./segmented_character_voice/lecs/lecs_16_64.wav|lecs|[KO] 인프라는 단순화되면서 고도화되고 자동화되는 소프트웨어 디파인드 인프라로 만들어놔서[KO]
./segmented_character_voice/lecs/lecs_16_65.wav|lecs|[KO] 이 아래쪽에 있는 인프라 벨트가 가장 좁아지게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_16_66.wav|lecs|[KO] 그리고 나서 이 좁아진 어떤 카모난 자동화되고 유연한 인프라 위에다가 플랫폼을 올려 태우고요.[KO]
./segmented_character_voice/lecs/lecs_16_67.wav|lecs|[KO] 이 도구들은 카모난 도구가 돼야 되겠죠. 카모난 도구가 사람들이 여러 도구를 익히는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_16_68.wav|lecs|[KO] 카모난 도구를 많이 익히고 이 카모난 도구를 많이 활용해서 다시 서비스들을 편안하게 익숙한 도구를 갖고[KO]
./segmented_character_voice/lecs/lecs_16_69.wav|lecs|[KO] 서비스를 만드는 판을 만들어줘야 된다. 그럼 이런 역삼각형의 역 피라미드 구조를 만들어내서 운영하는 게 필요하다.[KO]
./segmented_character_voice/lecs/lecs_16_70.wav|lecs|[KO] 이렇게 말씀드렸죠. 이 역삼각형의 구조의 인프라를 만들어내서 인프라를 운영하는 사람들은[KO]
./segmented_character_voice/lecs/lecs_16_71.wav|lecs|[KO] 줄이 대신 고도화를 하고 대신 서비스를 만드는 사람들이 다양한 아이디어를 갖고[KO]
./segmented_character_voice/lecs/lecs_16_72.wav|lecs|[KO] 자기 아이디어를 마음대로 펴줄 수 있는 그런 형태로 만들어야 된다. 소프트웨어적으로는 굉장히 다양한 것들이[KO]
./segmented_character_voice/lecs/lecs_16_73.wav|lecs|[KO] 도구로는 그보다 줄어들고 인프라로는 더 단순하게 되는 이런 식으로 효율성을 차지하는[KO]
./segmented_character_voice/lecs/lecs_16_74.wav|lecs|[KO] 역발상의 구조를 하는 인프라 체인지가 일어나고 있습니다. 이걸 정리를 해보면 이렇게 그림이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_16_75.wav|lecs|[KO] 인프라 부분을 저희가 단순화를 해서 고도화하고 자동화해서 그리고 나서 플랫폼을 가벼운 화면에 쓸 수 있는 도구를 올려놓고[KO]
./segmented_character_voice/lecs/lecs_16_76.wav|lecs|[KO] 서비스가 다양하게 나올 수 있게 하는 환경을 만들어야 된다. 그러니까 뒤집는 피라미드를 뒤집는 구도를 만든다는 말씀을 드렸는데[KO]
./segmented_character_voice/lecs/lecs_16_77.wav|lecs|[KO] 이걸 한번 정리한 모습을 한번 살펴보겠습니다. 그럼 아래쪽 부분은 소프트웨어적인 인프라입니다.[KO]
./segmented_character_voice/lecs/lecs_16_78.wav|lecs|[KO] 소프트웨어로 정의해서 하는 인프라가 되고 될 수 있으면 오픈해서 다른 사람들과 공유할 수 있는 오픈소스로 빌드할 수 있는 이런 부분[KO]
./segmented_character_voice/lecs/lecs_16_79.wav|lecs|[KO] 그다음 다른 사람과 공유할 수 있게 패더레이션 할 수 있는 그다음에 다른 사람들하고 맞추기 위해서 뭐지[KO]
./segmented_character_voice/lecs/lecs_16_80.wav|lecs|[KO] 원하는 대로 컴포지 좀 변형할 수 있는 이런 인프라 쪽으로 점점 유도가 되게 되겠고 아래쪽은[KO]
./segmented_character_voice/lecs/lecs_16_81.wav|lecs|[KO] 가운데 도구는 굉장히 유연한 도구가 있었는데 카모난 도구고 도구가 서비스를 좌우하는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_16_82.wav|lecs|[KO] 도구는 내가 손에 익은 도구를 편리하게 필요에 따라서 맞춰 쓸 수 있다.[KO]
./segmented_character_voice/lecs/lecs_16_83.wav|lecs|[KO] 그래서 도구의 그림을 저희가 어떻게 그렸냐면 굉장히 좀 단순하면서도 날렵하게 유저가 원하는 상태에서[KO]
./segmented_character_voice/lecs/lecs_16_84.wav|lecs|[KO] 나는 이런 뭐죠? 고도화된 도구가 필요해. 아니면 나는 그냥 심플하게 가벼운 일을 갖다가 망치가 필요해.[KO]
./segmented_character_voice/lecs/lecs_16_85.wav|lecs|[KO] 아니면 나는 특별한 망치가 필요해. 이렇게 다 선호가가 다르죠. 그런 걸 할 수 있는 유연하고 가벼운 도구를 입맛에 맞게[KO]
./segmented_character_voice/lecs/lecs_16_86.wav|lecs|[KO] 아니면 자기의 어떤 스킬셋에 맞게 쓰면서 원하는 서비스를 만들어내자.[KO]
./segmented_character_voice/lecs/lecs_16_87.wav|lecs|[KO] 그런데 이 만들어낼 때 서비스는 가장 뭐를 주 재료를 샀느냐. 이 데이터라는 어떤 재료를 삶아서 이 도구를 가지고 서비스를 만들어야 하는[KO]
./segmented_character_voice/lecs/lecs_16_88.wav|lecs|[KO] 이런 판으로 만들 필요가 있다. 이런 상태로 만들면 효율적인 인프라가 빌드가 되고 이 인프라를 갖다가 유지하고 보수하는 것도 쉽고[KO]
./segmented_character_voice/lecs/lecs_16_89.wav|lecs|[KO] 확장성 있게 다양한 서비스에서 지원하는 것도 굉장히 쉬워진다. 이런 말이 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_16_90.wav|lecs|[KO] 서비스 부분에서 한 가지 부연을 드리면 저희가 했던 클라우드 네이티브 아니면 컨테이너로 활용하는 이런 소프트웨어에서 서비스 형태의 서비스를 활성화시켜가지고[KO]
./segmented_character_voice/lecs/lecs_16_91.wav|lecs|[KO] 그 부분에서 다양한 서비스가 지원되면 더욱 좋겠다. 그리고 AI 부분이나 이런 데이터 부분을 갖다가 이 서비스와 연결해서[KO]
./segmented_character_voice/lecs/lecs_16_92.wav|lecs|[KO] 진융화된 서비스를 만들 수 있는 판으로 만들어서 지원을 해야 된다. 이런 메시지를 숨어 있는 거죠. 이런 식으로 다이버시피 서비스를 소프트웨어 디파인드[KO]
./segmented_character_voice/lecs/lecs_16_93.wav|lecs|[KO] 인프라를 가지고 활용할 수 있는 상태로 변형하는 일이 필요하고 이런 대전환이 계속적으로 전세계적으로 추진되고 있다.[KO]
./segmented_character_voice/lecs/lecs_16_94.wav|lecs|[KO] 이렇게 지금 살펴보시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_16_95.wav|lecs|[KO] 그러면 지금까지 배웠던 내용들을 한번 정리해서 보겠습니다. 저희 이번 챕터에서 다뤄봤던 내용들은[KO]
./segmented_character_voice/lecs/lecs_16_96.wav|lecs|[KO] 첫 번째로 데이터 센터라는 어떤 주제에 대해서 클러스터 문제를 봤다고 생각하시고 다양한 컴퓨터들이 굉장히 대규모로 있는 데이터 센터는[KO]
./segmented_character_voice/lecs/lecs_16_97.wav|lecs|[KO] 다시 어떤 모습으로 어떻게 네트워킹을 해서 그 많은 컴퓨터들을 하나처럼 쓸 수 있게 하느냐. 극단으로 가면 데이터 센터 전체에 있는 수많은 컴퓨터를[KO]
./segmented_character_voice/lecs/lecs_16_98.wav|lecs|[KO] 하나의 큰 컴퓨터처럼 쓰는 개념으로까지 전달되고 이 개념을 좀 더 효과적으로 전세계적으로 하는 버전에서 만들어진 게[KO]
./segmented_character_voice/lecs/lecs_16_99.wav|lecs|[KO] 클라우드 컴퓨팅 패러다임이고 클라우드 컴퓨팅 패러다임을 선도하는 퍼블릭 클라우드 업체들은 대규모의 인프라를 가지고[KO]
./segmented_character_voice/lecs/lecs_16_100.wav|lecs|[KO] 자기 인프라를 서비스를 가지고 그 다음에 서비스를 통해서 다양타를 계속 모아가면서 축적하면서 점점점점 소비자들한테 다가가고 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_16_101.wav|lecs|[KO] 다가가는 형태의 모습을 소프트의 정의 인프라의 개념에서 쳐다보실 수 있고요. 대형 클라우드 서비스 프로바이더도 그렇게 다가가고 있고요.[KO]
./segmented_character_voice/lecs/lecs_16_102.wav|lecs|[KO] 저희가 얘기하는 모바일 엣지 클라우드라고 하는 텔코드나 이런 부분도 나름대로 위치해서 사용자에게 다가가고[KO]
./segmented_character_voice/lecs/lecs_16_103.wav|lecs|[KO] 이것들이 서로 협업을 통해서 더 효율적이고 더 실시간적이고 더 안전한 서비스를 만들 수 있는 인프라로 계속 개선하는 이런 과정이 선순환적으로 벌어질 거라고 생각하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_16_104.wav|lecs|[KO] 그럼 이상으로 챕터 강의를 마치겠습니다. 고맙습니다.[KO]
./segmented_character_voice/lecs/lecs_17_0.wav|lecs|[KO] 안녕하십니까. 이 시간에는 컴퓨터 시스템을 스마트 액스 앱스트랙션을 하는 방법으로 한번 전체적으로 수상을 해서 살펴본다 이런 방법에 대해서 한번 설명을 드려보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_1.wav|lecs|[KO] 처음 제목에 대해서 좀 설명을 드려야 되는데요. 스마트 액스라는 단어를 자기가 설명을 좀 드려야 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_2.wav|lecs|[KO] 스마트, 요즘 지능 서비스, 모든 액스에 대한 지능 이런 개념이 됩니다. 그래서 요즘 얘기하는 컴퓨터 시스템을 가지고 어떤 인텔리전트한 일을[KO]
./segmented_character_voice/lecs/lecs_17_3.wav|lecs|[KO] 한다, 지능 서비스를 한다랄 때 스마트하게 액스에 대해서 한다 이런 부분, 이런 개념을 할 수 있는 스마트 액스라는 개념으로 컴퓨터 시스템을 바라보고[KO]
./segmented_character_voice/lecs/lecs_17_4.wav|lecs|[KO] 어떤 식으로 컴퓨터 시스템을 활용할 수 있는 앱스트랙션에서 그걸 계속 발전시키면 효과적으로 컴퓨터를 사용할 수 있는 어떤 사고를 할 수 있을까[KO]
./segmented_character_voice/lecs/lecs_17_5.wav|lecs|[KO] 아니면 새로운 생각을 할 수 있을까 이런 걸 모색해보는 어떤 그런 방법이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_6.wav|lecs|[KO] 이 부분에 말씀드리기 위해서 첫 번째로 컴퓨터 시스템에 대해서 그동안 배웠던 것을 한 번 더 대정리해보는 개념이 필요합니다.[KO]
./segmented_character_voice/lecs/lecs_17_7.wav|lecs|[KO] 컴퓨터 시스템이라는 걸 이용해서 어떤 서버들, 스토리지 서버, 컴퓨터 서버, 그 다음에 네트워크 서버, 실제로 보면 스위치 라우터들, 다양한 형태의 어떤 컴퓨터들에서 저희가 배웠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_8.wav|lecs|[KO] 그걸 저희가 첫 강의에서 말씀드렸듯이 기본적으로 박스라고 하는 어떤 하드웨어적인 상태에서 박스가 어디에 어떤 위치에 박스가 있는데 그게 가로 컴퓨터다.[KO]
./segmented_character_voice/lecs/lecs_17_9.wav|lecs|[KO] 이렇게 생각하는 박스라는 키워드를 중심으로 해서 해석하는 걸 저희가 말씀드렸었거든요. 화이트 박스, 옐로우 박스, 브라운 박스, 그 다음에 스마트 박스 이런 얘기도 드렸던 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_10.wav|lecs|[KO] 그래서 일단 박스라는 어떤 부분, 결국은 컴퓨터라는 것 하나하나 떨어져 있는 것들이죠. 이 컴퓨터라는 박스에 대해 부분에 한 가지 추가해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_11.wav|lecs|[KO] 저희가 하는 네트워크라는 걸 추상화된 개념으로 하면 연결한다. A하고 B를 인터코넥트 한다. 연결에서도 단순한 연결이나 A하고 B가 서로 연결되게 한다.[KO]
./segmented_character_voice/lecs/lecs_17_12.wav|lecs|[KO] 인터코넥트 한다. 그래서 박스 인터코넥트 이런 개념이 박스하고 인터코넥트 만나면 어떻게 되죠? 어떤 지역에 있는 박스에다가 저희가 네트워크를 가능하게 만들어서[KO]
./segmented_character_voice/lecs/lecs_17_13.wav|lecs|[KO] 이 네트워크 가능한 선을 통해서 이 박스를 원하는 대로 세팅할 수 있다, 제어할 수 있다 이렇게 볼 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_14.wav|lecs|[KO] 이 박스가 결국은 어떤 지역에 위치하고 있고요. 이 위치하고 있으면 어떤 지역에 위치하고 있는 박스들을 원하는 네트워크에 뚫어서 우리가 통제할 수 있는 상태를 만들면 효과적이지 않을까 이런 개념으로 가는 거죠.[KO]
./segmented_character_voice/lecs/lecs_17_15.wav|lecs|[KO] 하나도 추가해 보겠습니다. 저희가 펑션스라고 하는 걸 많이 다뤄봤습니다. 펑션스라는 걸 어떤 걸 다뤄봤느냐 하면 버추얼 머신 펑션, 또 기본적으로 컨테이너라이즈 펑션.[KO]
./segmented_character_voice/lecs/lecs_17_16.wav|lecs|[KO] 그래서 결국은 저희가 박스에 있는 리소스에다가 이런 프로그램을 돌려줘 펑션을 속테라고 생각하시고요. 어떤 프로그램 덩어리라고 생각하셔도 되고요.[KO]
./segmented_character_voice/lecs/lecs_17_17.wav|lecs|[KO] 어플리케이션 서비스의 어떤 요소라고 생각하셔도 되는데 이 프로그램을 박스에 투입해서 돌게 작동하게 만들면 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_17_18.wav|lecs|[KO] 투입한다는 부분에서 펑션을 박스에 넣을 때 어떻게 해야 되죠? 저희가 인터코넥트라는 네트워크를 통해서 리모트에서 원하는 펑션을 부탁해서 집어넣는 거죠.[KO]
./segmented_character_voice/lecs/lecs_17_19.wav|lecs|[KO] 부탁해서 집어넣는다. 펑션을 인터코넥트 통해서 박스에 집어넣고 박스에 있는 그런 펑션이 위치해서 자기가 어떤 저희가 부탁한 일들을 하고 일을 하면서 또 다시 옆에 있는 박스에 있는 펑션하고 다시 대화를 하고 그렇게 서로 서로 연결되는 이런 상태로 저희가 최종적으로 저희가 원하는 서비스, 서비스를 위한 어플리케이션, 이 서비스를 통한 어플리케이션이 완성이 되는 이런 모습이 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_20.wav|lecs|[KO] 그래서 이런 개념으로 한번 생각해보죠. 스마트 앱스라는 어떤 앱섹션에서는 박스 인터코넥트 펑션스라는 어떤 3개의 엔터티를 가지고 사고를 쭉 연결하고 가는 일을 해보면 굉장히 재미있겠다.[KO]
./segmented_character_voice/lecs/lecs_17_21.wav|lecs|[KO] 이렇게 말씀드리는 거죠. 그러고 갔다가 한 문장으로 정리할 때 이렇게 얘기합니다. 인터코넥트드 펑션스 인사이드 어크로스 박시스 앤드 사이츠 이렇게 얘기하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_22.wav|lecs|[KO] 그럼 이게 무슨 말이냐면 결국은 인터코넥트드 펑션이 중요한 거죠. 펑션들이 박스에 들어가서 서로 연결되면서 일을 한다. 그런데 펑션은 결국은 어디에 위치하냐 하죠.[KO]
./segmented_character_voice/lecs/lecs_17_23.wav|lecs|[KO] 이 박스 안에 위치하고 박스 안에 위치하면서 다시 옆에 있는 박스에 있는 다른 펑션하고 서로 연결되죠. 그런데 박스들은 여러 사이트에 나눠질 수 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_24.wav|lecs|[KO] 그래서 사이트, 박스, 그 다음에 인터코넥트 펑션스라는 이런 개념을 쭉 연결해서 한 덩어리 만들면서 생각하는 이게 컴퓨터 시스템을 활용하는 기본적인 추상화된 어떤 그림이라고 보시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_25.wav|lecs|[KO] 여기서 이제 한 가지 더 개념을 추가하겠습니다. 이 박스라고 하는 부분에서 자원이 있습니다. 그 다음 자원이 있고 이 자원이라는 부분에서 지금 저희가 하고 싶은 것은 펑션을[KO]
./segmented_character_voice/lecs/lecs_17_26.wav|lecs|[KO] 통해서 예를 들면 서비스가 이뤄져야 되는 거고요. 이 자원을 갖다가 서비스가 이뤄지겠다. 그 사이에 중간점을 매겨야 된다. 이 자원을 이용해서 어떤 일을 하면 어떤 서비스가 완성이 된다.[KO]
./segmented_character_voice/lecs/lecs_17_27.wav|lecs|[KO] 그럼 자원, 리소스 맞죠. 그 다음에 서비스가 완성된다. 그럼 어떤 일을 하면 어떤 부하를, 어떤 워크로드를 감당할 수 있으면 서비스가 완성된다.[KO]
./segmented_character_voice/lecs/lecs_17_28.wav|lecs|[KO] 자원을 활용해서 어떤 워크로드를 갖다가 수행을 시키면 그 수행시킨 워크로드들이 일들이 하나씩 하나씩 모여가지고 내가 원하는 서비스가 완성이 된다. 이런 그림으로 전체를 바라보시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_29.wav|lecs|[KO] 컴퓨터 시스템에 대해서 저희가 세 가지 앱 섹션을 살펴봤습니다. 박스, 인터코넥트 펑션. 얘를 조금 더 계속 좀 더 세밀하게 살펴보도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_30.wav|lecs|[KO] 저희가 하고 싶은 일이 뭐냐면 박스하고 인터코넥트 펑션에 대해서 저희가 원하는 설정을 하고요. 컨피규레이션을 하고 이것들의 상황을 갖다가 저희가 원하는 대로 살필 수 있고 비저빌리티입니다.[KO]
./segmented_character_voice/lecs/lecs_17_31.wav|lecs|[KO] 원하는 대로 통제해서 제어할 수 있는 컨피규레이션 컨트롤 비저빌리티를 이거에 확보하는 게 저희가 목표입니다.[KO]
./segmented_character_voice/lecs/lecs_17_32.wav|lecs|[KO] 이 크다는 목표로 해서 이제 저희가 이 박스 인터코넥트 펑션에 대해서 세부적으로 다룰 수 있어야 되고요.[KO]
./segmented_character_voice/lecs/lecs_17_33.wav|lecs|[KO] 다루고 싶은 범위가 이렇습니다. 박스에 대해서는 세부적으로 한번 들어가 보겠습니다. 박스라는 것은 저희가 피지컬한 박스가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_34.wav|lecs|[KO] 또 가상화 버츄얼라이션을 통해서 만드는 버츄얼이 되는 버츄얼 박스가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_35.wav|lecs|[KO] 피지컬한 박스나 버츄얼 박스 상관없이 저희가 원하는 대로 통제하고 컨피규레이션하고 컨트롤하고 비저빌리티를 확보할 수 있어야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_36.wav|lecs|[KO] 그걸 위해서는 저희가 어떤 박스하고 기본적으로 대화하는 어떤 통로가 있어야 되고요.[KO]
./segmented_character_voice/lecs/lecs_17_37.wav|lecs|[KO] 통로가 박스가 일을 할 때 쓰는 통로랑 입구랑 그 다음에 박스가 뭔가 제어를 받고 통제를 받는데 이 통로가 나눠져 있으면 일하는 부분하고 서로 걸리지 않고 할 수 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_38.wav|lecs|[KO] 그래서 제어를 할 수 있는 어떤 포트가 있고 그 다음에 실제로 데이터가 일을 할 때 쓰는 데이터가 왔다 갔다 하는 포트가 나눠져 있으면 훨씬 더 효과적일 겁니다.[KO]
./segmented_character_voice/lecs/lecs_17_39.wav|lecs|[KO] 이런 식으로 박스를 준비해 놓고 이 박스에다가 이제 저희가 얘기하는 연결, 인터코넥트를 연결시켜야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_40.wav|lecs|[KO] 인터코넥트에 대해서는 근본적으로 그냥 단순하게 남들하고 같이 쓰는 연결을 할 수도 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_41.wav|lecs|[KO] 일반적인 네트워크죠. 노멀한 네트워크를 연결할 수도 있고요.[KO]
./segmented_character_voice/lecs/lecs_17_42.wav|lecs|[KO] 많은 경우에 저희가 안전하고 박스에다 중요한 일을 시키고 싶으면 안전하게 연결이 됩니다.[KO]
./segmented_character_voice/lecs/lecs_17_43.wav|lecs|[KO] 요즘 많이 얘기하는 맵에서 보면 자물쇠에 채워지는 TLS라는 연결처럼 돼서 안전하게 되는 연결이 필요하겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_44.wav|lecs|[KO] 그래서 시큐로드 연결, 빨간색으로 표시하는 시큐로드 연결 같은 걸 해서 안전하게 만들 수 있으면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_45.wav|lecs|[KO] 또 하나 더 넘어가면 연결은 안전하게 되는데 실제로 보면 이런 저런 트래픽하고 데이터랑 막 섞여 다녀가지고 내가 데이터가 원하는 시간이 오지 않네?[KO]
./segmented_character_voice/lecs/lecs_17_46.wav|lecs|[KO] 그래서 나는 특별하게 전용선을 가지고 연결되는 개념으로 됐으면 더 좋겠다.[KO]
./segmented_character_voice/lecs/lecs_17_47.wav|lecs|[KO] 나한테는 특별한 어떤 경로를 보장을 해주면 좋겠다.[KO]
./segmented_character_voice/lecs/lecs_17_48.wav|lecs|[KO] 그래서 나는 특별한 표식을 달고 나갈 테니까 태깅하고 나갈 테니까[KO]
./segmented_character_voice/lecs/lecs_17_49.wav|lecs|[KO] 나에 대해서는 특별하게 이렇게 길을 갖다 제공해줘서 하는 이런 특별한 연결을 해주면 더 효과적으로 쓸 수 있겠다.[KO]
./segmented_character_voice/lecs/lecs_17_50.wav|lecs|[KO] 이렇게 할 수도 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_51.wav|lecs|[KO] 그래서 박스에 있는 포트에다가 데이터하고 컨트롤을 나누는 어떤 기본적 입구를 만들고 그거에 대해서 인터코넥트를 필요에 따라서 일반적인 연결 아니면 안전한 연결 그다음에 전용선 연결이죠.[KO]
./segmented_character_voice/lecs/lecs_17_52.wav|lecs|[KO] 이런 개념으로 연결해주면 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_53.wav|lecs|[KO] 여기 한 가지 연결이라는 부분에서 하나 숨어있는 숙제가 또 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_54.wav|lecs|[KO] 어떤 숙제가 있냐면 박스가 어떤 새로운 박스가 들어가고 나오고 죽고 하는 이런 문제를 갖다 저희가 고민을 해야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_55.wav|lecs|[KO] 박스가 새로운 박스가 들어갔네?[KO]
./segmented_character_voice/lecs/lecs_17_56.wav|lecs|[KO] 그러면 그걸 갖다가 저희가 찾아내서 다시 발견하고 그다음에 그걸 다시 조인시키는 이런 부분들이 안 되면 사람들이 불편하죠.[KO]
./segmented_character_voice/lecs/lecs_17_57.wav|lecs|[KO] 새로운 거 들어갈 때마다 그걸 갖다가 한참 연결하고 나서 쓸 수 있는 문제가 되면 곤란하니까 그걸 해주는[KO]
./segmented_character_voice/lecs/lecs_17_58.wav|lecs|[KO] 디스커버하고 커넥트하는 부분도 연동이 되면 더 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_59.wav|lecs|[KO] 마지막 이슈로 펑션에 대해서 더 세밀하게 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_60.wav|lecs|[KO] 펑션에 대해서는 저희가 사실은 많이 다뤄봤습니다.[KO]
./segmented_character_voice/lecs/lecs_17_61.wav|lecs|[KO] 펑션을 저희가 다룰 때 버츄얼 머신을 가지고 어떤 어플리케이션의 기능을 단위 어플리케이션을 한다.[KO]
./segmented_character_voice/lecs/lecs_17_62.wav|lecs|[KO] 버츄얼 머신 펑션이라는 단어를 저희가 썼었고요.[KO]
./segmented_character_voice/lecs/lecs_17_63.wav|lecs|[KO] 컨테이너를 가지고 하면 훨씬 더 가볍고 효율적이고 포타빌리티가 있는 펑션을 준비할 수 있다.[KO]
./segmented_character_voice/lecs/lecs_17_64.wav|lecs|[KO] 컨테이너 기반으로 컨테이너라이저 펑션이 많이 씁니다.[KO]
./segmented_character_voice/lecs/lecs_17_65.wav|lecs|[KO] 그렇지 않고 나는 컨테이너 버츄얼 머신이 아니라 피지컬 머신에 있는 어떤 특정한 하드의 기능을 바로 써가지고 써야 되겠다.[KO]
./segmented_character_voice/lecs/lecs_17_66.wav|lecs|[KO] 베어메탈 펑션, 또 저희가 다르게 보면 인베디드 펑션처럼 써야 되겠다는 펑션도 쓸 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_67.wav|lecs|[KO] 이런 펑션들에서 중요한 것은 저희가 프로그램들을 저희가 업데이트 설치할 때 항상 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_17_68.wav|lecs|[KO] 안전하고 온전한지 검사하잖아요.[KO]
./segmented_character_voice/lecs/lecs_17_69.wav|lecs|[KO] 그런 것처럼 시큐어드 되는, 안전을 확인하는 과정에 의해서 검증된 펑션을 가지고[KO]
./segmented_character_voice/lecs/lecs_17_70.wav|lecs|[KO] 검증된 펑션의 소프트웨어를 인터코네통해서 박스에 투입하고[KO]
./segmented_character_voice/lecs/lecs_17_71.wav|lecs|[KO] 그것들을 원하는 대로 세팅하고 그 다음에 그 상태를 계속 확인해 가면서 작동을 시키면서 사용하는[KO]
./segmented_character_voice/lecs/lecs_17_72.wav|lecs|[KO] 이런 원리로 전체 구성이 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_73.wav|lecs|[KO] 그래서 저희가 말씀드렸던 박스 인터코네통 펑션하고 이런 기본적인 앱스트랙션하고[KO]
./segmented_character_voice/lecs/lecs_17_74.wav|lecs|[KO] 컨피규레이션 컨트롤 비저빌리티 앱스트랙션을 어떻게 연결시키는 그림이 나와야 되는지 한번 설명을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_17_75.wav|lecs|[KO] 금방 말씀드린 설명드렸던 걸 조금 더 그냥 다른 그림으로 한번 보는 게 똑같은 얘기입니다.[KO]
./segmented_character_voice/lecs/lecs_17_76.wav|lecs|[KO] 사실은 똑같은 얘기를 살짝 다르게 말씀드리면 어떤 말씀을 드릴 수 있냐면[KO]
./segmented_character_voice/lecs/lecs_17_77.wav|lecs|[KO] 박스라는 주제가 있고 박스를 연결해서 준비하는 주제가 있고요.[KO]
./segmented_character_voice/lecs/lecs_17_78.wav|lecs|[KO] 이게 보면 박스를 연결해서 준비해서 다른 사람을 쓸 수 있도록 만들어주는 그런 입장을 갖고 있는 사람들이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_79.wav|lecs|[KO] 그러니까 제일 주로 제공자 입장이죠.[KO]
./segmented_character_voice/lecs/lecs_17_80.wav|lecs|[KO] 그 다음에 그걸 활용해서 내가 펑션을 가지고 어떤 서비스를 제공된 리소스를 한결하고[KO]
./segmented_character_voice/lecs/lecs_17_81.wav|lecs|[KO] 제공된 연결고리를 통해서 펑션을 집어넣어서 내가 원하는 워크로드를 돌려서 서비스를 얻겠다.[KO]
./segmented_character_voice/lecs/lecs_17_82.wav|lecs|[KO] 그러니까 주로 개발자 입장이나 디발러퍼라고 부르는 펑션 사이드의 사람이 있고요.[KO]
./segmented_character_voice/lecs/lecs_17_83.wav|lecs|[KO] 그러니까 사용자 디발러퍼 쪽이 있고 반대쪽으로 보면 박스를 제공하고[KO]
./segmented_character_voice/lecs/lecs_17_84.wav|lecs|[KO] 그 다음에 인터코넥트를 제공해서 박스는 컴퓨팅 스토리지 이런 리소스를 제공하고[KO]
./segmented_character_voice/lecs/lecs_17_85.wav|lecs|[KO] 그 다음에 네트워크를 제공해서 활용할 수 있게 만들어주는 공급자가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_17_86.wav|lecs|[KO] 공급자고 또 사실은 운용자가 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_87.wav|lecs|[KO] 오퍼레이터, 오퍼레이터하고 지금 디발러퍼가 서로 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_17_88.wav|lecs|[KO] 적당한 공간에서 나눠지면서 역할 분담을 하고 경우에 따라서는 박스를 제공하는 사람하고[KO]
./segmented_character_voice/lecs/lecs_17_89.wav|lecs|[KO] 인터코넥트를 제공하는 사람이 나눠질 수도 있고요.[KO]
./segmented_character_voice/lecs/lecs_17_90.wav|lecs|[KO] 펑션을 활용해서 투입하는 사람도 다 나눠질 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_91.wav|lecs|[KO] 그래서 이렇게 각각 원하는 대로 분업이 되면서 유기조로 연결되는 판이 만들어지면 효과적이다.[KO]
./segmented_character_voice/lecs/lecs_17_92.wav|lecs|[KO] 사실 이러한 판들이 요즘 얘기하고 있는 클라우드 기반의 소프트웨어 정의 인프라[KO]
./segmented_character_voice/lecs/lecs_17_93.wav|lecs|[KO] 아니면 클라우드 기반의 어떤 서비스 실증에서는 다시 이런 판에서 움직이고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_94.wav|lecs|[KO] 클라우드 사업자가 컴퓨터 스토리지 리소스를 제공하고 필요한 클라우드 쪽에 연결을 알아서 제공하면[KO]
./segmented_character_voice/lecs/lecs_17_95.wav|lecs|[KO] 저희가 클라우드까지 필요한 인터코넥트를 엣지에서 만나서 연결하고[KO]
./segmented_character_voice/lecs/lecs_17_96.wav|lecs|[KO] 그쪽에서 내가 그걸 통해서 내가 원하는 펑션들을 클라우드에서 제공하는 리소스하고[KO]
./segmented_character_voice/lecs/lecs_17_97.wav|lecs|[KO] 내가 갖고 있는 리소스에 고루 퍼뜨린 다음에 그걸 서로 연동되게 만들어서 서비스를 완성하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_17_98.wav|lecs|[KO] 최종적으로는 결국은 어떤 일이 되냐면 결국은 인터코넥트 펑션, 펑션들이 흩어져 있는 펑션들이 서로 연결되고[KO]
./segmented_character_voice/lecs/lecs_17_99.wav|lecs|[KO] 펑션들은 내가 소유한 박스에도 들어가고요.[KO]
./segmented_character_voice/lecs/lecs_17_100.wav|lecs|[KO] 엣지에 있는 아니면 엔드에 있는 그다음에 클라우드 사업자가 갖고 있는 클라우드 코어에 있는 박스에도 들어가고[KO]
./segmented_character_voice/lecs/lecs_17_101.wav|lecs|[KO] 이렇게 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_17_102.wav|lecs|[KO] 그다음에 사이트는 상황에 따라서 여러 개 나눠질 수 있을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_17_103.wav|lecs|[KO] 이런 그림으로 완성된다고 볼 수 있죠.[KO]
./segmented_character_voice/lecs/lecs_17_104.wav|lecs|[KO] 같은 얘기를 다시 한번 다른 각도에서 설명을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_17_105.wav|lecs|[KO] 지금까지 전체적인 부분에서 연결, 박스 인터코넥트 펑션을 말씀을 드렸고[KO]
./segmented_character_voice/lecs/lecs_17_106.wav|lecs|[KO] 여기를 조금 더 해서 박스 한 박스에 집중해서 한 번만 다시 리뷰를 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_107.wav|lecs|[KO] 박스 안으로 DB에서 들어갔을 때 어떤 일이냐면 사실은 박스들에 대해서 박스들을 가지고 박스를 한다고 그러지만[KO]
./segmented_character_voice/lecs/lecs_17_108.wav|lecs|[KO] 저희가 어떤 얘기를 했었죠? 가상화, 컨테이너 지원, 이런 얘기를 하면서 가장 했던 핵심은 이렇습니다.[KO]
./segmented_character_voice/lecs/lecs_17_109.wav|lecs|[KO] 어떤 피지컬한 박스가 하나 있으면 그거에 리눅스 오프라이팅을 하고 얘를 가상화를 할 수도 있고[KO]
./segmented_character_voice/lecs/lecs_17_110.wav|lecs|[KO] 가상화를 원하는 조각으로 나눌 수 있고 컨테이너를 통해서 약간 간이 칸막이를 차가면서 유연하게 나눠서 쓸 수도 있다.[KO]
./segmented_character_voice/lecs/lecs_17_111.wav|lecs|[KO] 그럼 그 안에서 여러 가지 저희가 원하는 엔터티들을 지원하는 엔터티들을 넣어야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_112.wav|lecs|[KO] 엔터티를 넣는다는 걸 이렇게 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_113.wav|lecs|[KO] 컴퓨팅을 지원하는 엔터티, 컴퓨터를 지원하는 가상적인 엔터티, 그 다음에 스토리지를 지원하는 가상적인 엔터티 펑션,[KO]
./segmented_character_voice/lecs/lecs_17_114.wav|lecs|[KO] 그 다음에 네트워킹을 지원하는 가상적인 엔터티 이런 것들을 넣게 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_17_115.wav|lecs|[KO] 그 중에서 기본적으로 핵심적으로 많이 사람들이 바꾸라 연결하기 위해서 쓰는 엔터티인 네트워킹 엔터티를 조금 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_17_116.wav|lecs|[KO] 네트워킹 엔터티는 두 가지로 나눠집니다.[KO]
./segmented_character_voice/lecs/lecs_17_117.wav|lecs|[KO] 내부에서 피지컬 인터커넥터를 내부에서 이 박스까지 연결을 해서 이 박스까지 진입을 할 수 있도록 만들어주고[KO]
./segmented_character_voice/lecs/lecs_17_118.wav|lecs|[KO] 이때 내부에서 하는 어떤 그런 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_17_119.wav|lecs|[KO] 시큐리티 보안 문제를 갖다가 대비할 수 있는 그런 부분에 입구에서 보안을 굉장히 중요하게, 문단속을 잘해야 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_17_120.wav|lecs|[KO] 그런 부분을 일단 처리하고요.[KO]
./segmented_character_voice/lecs/lecs_17_121.wav|lecs|[KO] 이렇게 해서 지금 피지컬한 인터커넥터가 준비가 되면 그 내부에서는 전에도 말씀드렸지만 가상 스위치라는 개념을 저희가 배운 적이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_122.wav|lecs|[KO] 가상 스위치가 내부에서 스위치가 있고 가상 스위치 안에서 다시 가상 머신들이 다시 접속이 된다 이런 말씀을 드렸었죠.[KO]
./segmented_character_voice/lecs/lecs_17_123.wav|lecs|[KO] 그런 원리를 통해서 가상 스위치 또 필요하면 가상 라우터도 이 박스 안에 존재하고[KO]
./segmented_character_voice/lecs/lecs_17_124.wav|lecs|[KO] 그 다음에 가상적인 로드 밸런서도 존재하고 가상적인 파이월도 존재하고[KO]
./segmented_character_voice/lecs/lecs_17_125.wav|lecs|[KO] 그렇게 해서 이런 가상적인 엔티티가 이 박스 안에 자리 잡으면서 그 안에서 다시 가상적인 인터커넥터를 하는 개념으로 지금 진화하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_126.wav|lecs|[KO] 그래서 피지컬한 인터커넥터가 내부로 들어가면 버추얼한 인터커넥터가 연결돼서 된다.[KO]
./segmented_character_voice/lecs/lecs_17_127.wav|lecs|[KO] 말씀드렸던 박스 인터커넥터 펑션들이 박스끼리의 어떤 레벨에서 되는 것만이 아니라[KO]
./segmented_character_voice/lecs/lecs_17_128.wav|lecs|[KO] 박스 내부를 들어가면 다시 한 층이 있고 그 한 층에 들어가면 다시 가상 박스가 있고 컨테이너 박스가 있고[KO]
./segmented_character_voice/lecs/lecs_17_129.wav|lecs|[KO] 과장했으면 컨테이너 박스라고 부르기도 과장했지만 그런 것들이 있고[KO]
./segmented_character_voice/lecs/lecs_17_130.wav|lecs|[KO] 그것들에 버추얼하게 인터커넥터가 돼서 다 연결되는 이런 상태로 구성되는[KO]
./segmented_character_voice/lecs/lecs_17_131.wav|lecs|[KO] 어떤 내부에 또 인사이드가 있고 다시 또 인사이드가 반복이 될 수 있는 정도까지[KO]
./segmented_character_voice/lecs/lecs_17_132.wav|lecs|[KO] 계속 리컬시브하게 가는 버전까지 기술이 계속 진화하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_17_133.wav|lecs|[KO] 그래서 내부 쪽을 살펴보면 이렇게 되고요.[KO]
./segmented_character_voice/lecs/lecs_18_0.wav|lecs|[KO] 똑같은 일을 저희가 클러스터링을 하면서 많이 살펴봤습니다.[KO]
./segmented_character_voice/lecs/lecs_18_1.wav|lecs|[KO] 클러스터링하면서 어떻게 살펴봤냐면 이 박스 하나로 연결되던 걸 여러 개 클러스로 확장하는 개념은[KO]
./segmented_character_voice/lecs/lecs_18_2.wav|lecs|[KO] 금방 살펴보면 이 내부 박스 안쪽에 들어가는 박스 안에도 굉장히 많은 가상적인 박스가 있다.[KO]
./segmented_character_voice/lecs/lecs_18_3.wav|lecs|[KO] 컨테이너를 형태로 되어 있는 칸박이 스타일의 어떤 박스도 있다 이렇게 말씀드렸죠.[KO]
./segmented_character_voice/lecs/lecs_18_4.wav|lecs|[KO] 그 안의 부분하고 다시 이 머신들이 하나의 노드, 그 다음에 하나의 노드가 클러스가 되고[KO]
./segmented_character_voice/lecs/lecs_18_5.wav|lecs|[KO] 클러스가 다시 또 대규모 클러스가 되고 다시 전체에도 데이터 센터가 되는 이런 상태까지 쭉 연결되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_6.wav|lecs|[KO] 이렇게 연결되는 연결고리를 계속 가지고 있다 이렇게 말씀드렸죠.[KO]
./segmented_character_voice/lecs/lecs_18_7.wav|lecs|[KO] 인사이드 박스, 박스 내부에서도 연결이 되고 박스들끼리, 그 다음에 클러스트, 박스들끼리,[KO]
./segmented_character_voice/lecs/lecs_18_8.wav|lecs|[KO] 그 다음에 박스들이 모여있는 클러스터, 클러스터끼리 이렇게 연결되는 수준으로 계속 올라갑니다.[KO]
./segmented_character_voice/lecs/lecs_18_9.wav|lecs|[KO] 이 문제를 갖다가 저희가 한 걸음 뒤로 물어서 쳐다보면 이렇게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_18_10.wav|lecs|[KO] 다양한 박스들이 있으면 박스들에서 피지컬하게 물리적으로 네트워크선을 저희가 일일이 꽂아가면서 연결하는 피지컬한 연결이 있고요.[KO]
./segmented_character_voice/lecs/lecs_18_11.wav|lecs|[KO] 그 다음에 피지컬한 연결 속에는 안쪽으로 들어가서 이 버추얼 상태에서 버추얼 스위치, 버추얼 아웃을 통해서 중심으로 만들어지는 버추얼한 연결이 안에 숨어 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_12.wav|lecs|[KO] 또 버추얼 머신 안에 사실은 컨테이너를 다시 집어넣을 수 있다는 것도 배운 적이 있으신데요.[KO]
./segmented_character_voice/lecs/lecs_18_13.wav|lecs|[KO] 그런 부분에서 버추얼 머신 안에 컨테이너 칸막이 쪽의 부분에 한 네트워크를 다시 하는,[KO]
./segmented_character_voice/lecs/lecs_18_14.wav|lecs|[KO] 그래서 피지컬한 어떤 엔터티를 연결하고 버추얼한 엔터티를 연결하고 컨테이너 엔터티를 연결하기 위해서 피지컬, 버추얼, 컨테이너 엔터티를 다 효과적으로 연결할 수 있는 연결을[KO]
./segmented_character_voice/lecs/lecs_18_15.wav|lecs|[KO] 전체적인 입장에서 다시 한번 살펴보고 볼 필요가 있다.[KO]
./segmented_character_voice/lecs/lecs_18_16.wav|lecs|[KO] 그걸 용어로 부르기에는 그냥 이렇게 이름을 붙여봤습니다.[KO]
./segmented_character_voice/lecs/lecs_18_17.wav|lecs|[KO] 피지컬, 버추얼, 컨테이너에서 PVC, 하모나이제이션, PVC를 조화롭게 연결할 수 있는 게 굉장히 큰 숙제고,[KO]
./segmented_character_voice/lecs/lecs_18_18.wav|lecs|[KO] 이렇게 해서 이해를 해야지만 리소스를 갖다가 속속들이 하나하나 빈틈없이 그리고 안전하게 쓸 수가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_19.wav|lecs|[KO] 속속들이 빈틈없이라는 단어랑 안전하게라는 단어를 제가 금방 연결할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_20.wav|lecs|[KO] 왜냐하면 속속들이 빈틈없이 어떤 일을 보고 다 할 수 있으면 어디에 뭐 숨어있는 것도 깨끗하게 할 수 있고 그래야지만 안전하게 될 수 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_21.wav|lecs|[KO] 기술의 현재 진화 방법이 이렇습니다.[KO]
./segmented_character_voice/lecs/lecs_18_22.wav|lecs|[KO] 속속들이 빈틈없이 모든 걸 다 연결하고 재구성할 수 있고,[KO]
./segmented_character_voice/lecs/lecs_18_23.wav|lecs|[KO] 그다음에 그걸 할 수 있고 계속 유지할 수 있어야지만 안전하게 할 수 있다.[KO]
./segmented_character_voice/lecs/lecs_18_24.wav|lecs|[KO] 이런 기술적인 FCPQ는 연결되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_25.wav|lecs|[KO] 그래서 PVC, 하모나이제이션이라는 어떤 개념에서 지금 일어나고 있는 컴퓨터 시스템의 굉장히 디테일하고 연동,[KO]
./segmented_character_voice/lecs/lecs_18_26.wav|lecs|[KO] 박스 내부, 박스 간, 그다음에 박스로 관절된 클러서 간, 그렇죠?[KO]
./segmented_character_voice/lecs/lecs_18_27.wav|lecs|[KO] 클러서가 더 넘어가면 사실 저희가 비약하면 클러서로 관절된 데이터 센터, 데이터 센터들 간 이런 식으로 계속 커지는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_28.wav|lecs|[KO] 예, 이상으로 연결에 대한 말씀을 강조해서 말씀드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_18_29.wav|lecs|[KO] 다른 주제로 넘어가 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_18_30.wav|lecs|[KO] 저희가 이번에 다룰 주제는 이런 겁니다.[KO]
./segmented_character_voice/lecs/lecs_18_31.wav|lecs|[KO] 스마트헥스, 서비스 입장에서 강조해 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_18_32.wav|lecs|[KO] 서비스에서 저희가 종단에 있는 IoT 단말, 저희가 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_18_33.wav|lecs|[KO] 그다음에 중앙에 있는 클라우드 코어, 그렇죠?[KO]
./segmented_character_voice/lecs/lecs_18_34.wav|lecs|[KO] 중앙에 있는 클라우드들, 코어들, 이 두 개를 연결하면서 서비스가 된다.[KO]
./segmented_character_voice/lecs/lecs_18_35.wav|lecs|[KO] IoT 기기들이 중앙에 있는 클라우드한테 데이터를 계속 전달하고[KO]
./segmented_character_voice/lecs/lecs_18_36.wav|lecs|[KO] 이 전달하는 과정이 데이터 센터에 있는 맵, 앱, 디비랑 연계가 되면서[KO]
./segmented_character_voice/lecs/lecs_18_37.wav|lecs|[KO] 서비스랑 연계되고 이 데이터가 그렇게 모여서 쌓이는 걸 한쪽에서[KO]
./segmented_character_voice/lecs/lecs_18_38.wav|lecs|[KO] 많이 축적된 데이터를 통해서 어떤 빅데이터, 그다음에 HPC 빅데이터를 연장하는[KO]
./segmented_character_voice/lecs/lecs_18_39.wav|lecs|[KO] AI적인 클러스터링 작업을 통해서 데이터를 해석하고[KO]
./segmented_character_voice/lecs/lecs_18_40.wav|lecs|[KO] 그거에서 이렇게 처리하면 좋겠다, 이렇게 처리하면 지능화되겠다,[KO]
./segmented_character_voice/lecs/lecs_18_41.wav|lecs|[KO] 인텔리전트하게 되겠다라고 하는 부분을 연동시켜서 돌려내는[KO]
./segmented_character_voice/lecs/lecs_18_42.wav|lecs|[KO] 그러니까 IoT, 그다음에 클라우드, 클라우드 쪽에 있는[KO]
./segmented_character_voice/lecs/lecs_18_43.wav|lecs|[KO] 지금 말씀드린 HPC, 빅데이터, 그다음에 결국 최종적인 AI적인 부분을[KO]
./segmented_character_voice/lecs/lecs_18_44.wav|lecs|[KO] 연동시켜서 하나의 어떤 전체 흐름으로 엮어내는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_45.wav|lecs|[KO] 그래서 IoT, 클라우드, 그다음에 HPC 빅데이터 한 덩어리를 연결되는 패턴을 만들고[KO]
./segmented_character_voice/lecs/lecs_18_46.wav|lecs|[KO] 이걸 통해서 지능화된 서비스, 한 가지 더 말씀드리면[KO]
./segmented_character_voice/lecs/lecs_18_47.wav|lecs|[KO] 지능화된 마이크로 서비스라고 해서 저희가 컨테이너를 하면서[KO]
./segmented_character_voice/lecs/lecs_18_48.wav|lecs|[KO] 지능화된 서비스를 포터블한 펑션을 통해 연결을 통해서 만들어주면 좋겠다.[KO]
./segmented_character_voice/lecs/lecs_18_49.wav|lecs|[KO] 마이크로 서비스라는 거랑 같이 접목해서 지능화된 마이크로 서비스 기반의[KO]
./segmented_character_voice/lecs/lecs_18_50.wav|lecs|[KO] 어플리케이션을 만들어내고 그 어플리케이션을 가지고[KO]
./segmented_character_voice/lecs/lecs_18_51.wav|lecs|[KO] 서비스 형태를 만들어서 가는 게 가장 기존의 보편적인 패턴으로 지금 나타나고 있다.[KO]
./segmented_character_voice/lecs/lecs_18_52.wav|lecs|[KO] 이걸 갖다가 SmartX IoT 하이픈 클라우드 서비스라고 부르면[KO]
./segmented_character_voice/lecs/lecs_18_53.wav|lecs|[KO] 어떻겠느냐, 이렇게 말씀드리고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_54.wav|lecs|[KO] 이 부분에 조금 더 부연해서 저희가 배웠던 컨테이너라이즈 하는 부분이랑[KO]
./segmented_character_voice/lecs/lecs_18_55.wav|lecs|[KO] 컨테이너 오케스트라 이슈를 조금 섞어보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_18_56.wav|lecs|[KO] 말씀드렸던 IoT 클라우드의 연결, 그다음에 HPC 빅데이터가 연결해서[KO]
./segmented_character_voice/lecs/lecs_18_57.wav|lecs|[KO] 보조해서 쭉 연결하는 이런 서비스의 기본 형태가 있으면[KO]
./segmented_character_voice/lecs/lecs_18_58.wav|lecs|[KO] 거기다 그걸 운영하는 쪽에서 컨테이너에서의 펑션들이 쫙 박스에 흩어져서 흩어집니다.[KO]
./segmented_character_voice/lecs/lecs_18_59.wav|lecs|[KO] 그럼 그걸 저희가 어떻게 해야 되죠? 오케스트레이션을 해줘야 되죠.[KO]
./segmented_character_voice/lecs/lecs_18_60.wav|lecs|[KO] 오케스트레이션 하는 컨테이너 기반으로 돼 있는 거, 오케스트레이션 할 때 컨테이너 오케스트레이션이 사용이 되고[KO]
./segmented_character_voice/lecs/lecs_18_61.wav|lecs|[KO] Kubernetes가 그 부분에 주인이 됐다, 아니면 그냥 가장 머저리티가 되고 있어서 대세다[KO]
./segmented_character_voice/lecs/lecs_18_62.wav|lecs|[KO] 이런 말씀을 드린 적이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_63.wav|lecs|[KO] Kubernetes 오케스트레이션을 가지고 컨테이너 오케스트레이션을 하고[KO]
./segmented_character_voice/lecs/lecs_18_64.wav|lecs|[KO] 그게 저희가 다른 어떤 오케스트레이션 방법도 쓸 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_65.wav|lecs|[KO] 더커니 메이서스라는 방법도 쓸 수 있지만 컨테이너 오케스트레이션을 통해서[KO]
./segmented_character_voice/lecs/lecs_18_66.wav|lecs|[KO] 그걸 조율하고 주관해서 지금 말씀드렸던 박스 인터커넥트 펑션스가[KO]
./segmented_character_voice/lecs/lecs_18_67.wav|lecs|[KO] 유기조로 연결되는 관계를 추방해서 지원할 필요가 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_18_68.wav|lecs|[KO] 그림을 잘 보시면 IoT와 클라우드하고 빅데이터, HPC가 연결되는[KO]
./segmented_character_voice/lecs/lecs_18_69.wav|lecs|[KO] 어떤 서비스적인 입장으로 있는 부분이고[KO]
./segmented_character_voice/lecs/lecs_18_70.wav|lecs|[KO] 아래쪽은 인프라적인 입장이 더 강조돼서 뒤쪽에서 컨테이너 오케스트레이션을 통해서[KO]
./segmented_character_voice/lecs/lecs_18_71.wav|lecs|[KO] 사람들이 쓰는 걸 리소스를 셰어링하면서 효과를 쓸 수 있도록 지원하는[KO]
./segmented_character_voice/lecs/lecs_18_72.wav|lecs|[KO] 이 형태가 서로 맞물려서 돌아가는 이런 상태가 됩니다.[KO]
./segmented_character_voice/lecs/lecs_18_73.wav|lecs|[KO] 항상 서비스를 위해서는 어떤 리소스가 있어요.[KO]
./segmented_character_voice/lecs/lecs_18_74.wav|lecs|[KO] 리소스에 바로 서비스가 투입이 되는데 그게 효율적으로 공통적으로[KO]
./segmented_character_voice/lecs/lecs_18_75.wav|lecs|[KO] 그리고 안전하게 투입되는 이걸 모색하는 방법이 현재의 패러다임이고요.[KO]
./segmented_character_voice/lecs/lecs_18_76.wav|lecs|[KO] 이걸 클라우드 컴퓨팅, 아니요. 클라우드 네이티브 컴퓨팅 패러다임에 따른[KO]
./segmented_character_voice/lecs/lecs_18_77.wav|lecs|[KO] 마이크로 서비스 기반의 산스 어플리케이션 디벨로먼트 이렇게 부를 수 있을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_18_78.wav|lecs|[KO] 지금까지 말씀드렸던 내용들을 한번 전체적으로 모아서 정리해보는 슬라이드입니다.[KO]
./segmented_character_voice/lecs/lecs_18_79.wav|lecs|[KO] 그래서 말씀드렸던 스마트 액스 박스들을 활용해서[KO]
./segmented_character_voice/lecs/lecs_18_80.wav|lecs|[KO] 어떤 공통적으로 하는 통일성이 있는 단순화된 박스를 약간 고도화되고 자동화된 운영을 통해서[KO]
./segmented_character_voice/lecs/lecs_18_81.wav|lecs|[KO] 효과적으로 관리할 수 있게 만들어보자.[KO]
./segmented_character_voice/lecs/lecs_18_82.wav|lecs|[KO] 스마트 액스 박스라고 하는 스마트폰 같은 원리를 박스, 서버 쪽에다 아니면[KO]
./segmented_character_voice/lecs/lecs_18_83.wav|lecs|[KO] 스토리지 쪽에다 아니면 네트워크 장비에다 일단 놓고[KO]
./segmented_character_voice/lecs/lecs_18_84.wav|lecs|[KO] 그게다가 소프트 정의 인프라 개념의 일부로 그걸 만들어가면서[KO]
./segmented_character_voice/lecs/lecs_18_85.wav|lecs|[KO] 소프트 정의 인프라가 빌드 되기로 만들고[KO]
./segmented_character_voice/lecs/lecs_18_86.wav|lecs|[KO] 그게 있는 다양한 리소스 박스들에 대해서 저희가 원하는 펑션들을[KO]
./segmented_character_voice/lecs/lecs_18_87.wav|lecs|[KO] 집어넣어서 동작시켜야 된다.[KO]
./segmented_character_voice/lecs/lecs_18_88.wav|lecs|[KO] 그런데 프로그램의 입장에서 이걸 보면 펑션이 동작을 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_89.wav|lecs|[KO] 어떤 박스에 어떤 특정한 제가 A라는 펑션 프로그램에 들어가서 동작을 하면[KO]
./segmented_character_voice/lecs/lecs_18_90.wav|lecs|[KO] 그 펑션 프로그램을 활용하기 위해서 제가 뭔가 콜을 한다고 얘기하죠.[KO]
./segmented_character_voice/lecs/lecs_18_91.wav|lecs|[KO] 콜을 한다 그럴 때 API 콜을 하게 되고요.[KO]
./segmented_character_voice/lecs/lecs_18_92.wav|lecs|[KO] 어플리케이션 프로그램의 인터페이스 콜을 하게 되고[KO]
./segmented_character_voice/lecs/lecs_18_93.wav|lecs|[KO] 이 인터페이스가 만약에 오픈 API라면 공개되어 있으면 제가 그 콜을 갖다가[KO]
./segmented_character_voice/lecs/lecs_18_94.wav|lecs|[KO] 오픈 API 규정에 따라서 콜을 하면 마치 색연필을 쓰듯이 아니면[KO]
./segmented_character_voice/lecs/lecs_18_95.wav|lecs|[KO] 색연필이 아니라 색 마킹 펜이라 그럴까요?[KO]
./segmented_character_voice/lecs/lecs_18_96.wav|lecs|[KO] 색 마킹 펜을 쓰듯이 원하는 상태 API를 콜을 해서[KO]
./segmented_character_voice/lecs/lecs_18_97.wav|lecs|[KO] 그 원하는 색을 써가지고 내가 원하는 색깔의 그림을 그리는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_98.wav|lecs|[KO] 이런 식의 프로그램을 하면 된다.[KO]
./segmented_character_voice/lecs/lecs_18_99.wav|lecs|[KO] 이게 바로 저희가 말씀드렸던 마이크로 서비스의 어떤 그런 펑션들이 흩어져 있으면[KO]
./segmented_character_voice/lecs/lecs_18_100.wav|lecs|[KO] 그게 다 칼라 펜의 역할을 하고 칼라 마킹 펜의 역할을 하고[KO]
./segmented_character_voice/lecs/lecs_18_101.wav|lecs|[KO] 칼라 마킹 펜을 갖다가 저희가 자유롭게 유저가 원하는 대로 사용하면[KO]
./segmented_character_voice/lecs/lecs_18_102.wav|lecs|[KO] 저희가 원하는 서비스가 데이터라는 주요한 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_18_103.wav|lecs|[KO] 이 재료하고 재료하고 지금 API랑 어떤 도구들이 연결돼서 활용되는[KO]
./segmented_character_voice/lecs/lecs_18_104.wav|lecs|[KO] 이런 상태가 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_105.wav|lecs|[KO] 그래서 이렇게 되는 게 서비스가 완성된다.[KO]
./segmented_character_voice/lecs/lecs_18_106.wav|lecs|[KO] 다시 한번 정리해보면 박스 인터커넥트 펑션이 있고요.[KO]
./segmented_character_voice/lecs/lecs_18_107.wav|lecs|[KO] 이걸 갖다가 한 가지 더 추가되는 개념이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_108.wav|lecs|[KO] 이걸 갖다가 뭔가 누군가 지휘를 하고 지휘소가 필요합니다.[KO]
./segmented_character_voice/lecs/lecs_18_109.wav|lecs|[KO] 지휘소가 없이 하는 게 아니라 지금 이런 패러다임에서[KO]
./segmented_character_voice/lecs/lecs_18_110.wav|lecs|[KO] 이 흩어져 있는 박스를 주요하는 패러다임의 어떤 지휘하는 센터를[KO]
./segmented_character_voice/lecs/lecs_18_111.wav|lecs|[KO] 어떻게 부를 거냐? 여러 가지로 부를 수가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_112.wav|lecs|[KO] 그런데 저희 하는 스마트 액스 앱스트랙션에서 어떻게 부르냐면[KO]
./segmented_character_voice/lecs/lecs_18_113.wav|lecs|[KO] 이걸 갖다가 이 타워라는 지비 관제 탑이라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_18_114.wav|lecs|[KO] 관제 탑 관제 탑 관 볼 거 아니고요.[KO]
./segmented_character_voice/lecs/lecs_18_115.wav|lecs|[KO] 통제할 때 컨트롤할 때 관 모니터 앤 컨트롤 그 다음에 타워죠.[KO]
./segmented_character_voice/lecs/lecs_18_116.wav|lecs|[KO] 모니터 앤 컨트롤 타워 해서 이 모든 거 갖다가 속속들이[KO]
./segmented_character_voice/lecs/lecs_18_117.wav|lecs|[KO] 쳐다보면서 살펴보면서 이 박스하고 인터커넥트 펑션들의 관계를[KO]
./segmented_character_voice/lecs/lecs_18_118.wav|lecs|[KO] 조율해가지고 서비스를 또 특히 스마트한 서비스를[KO]
./segmented_character_voice/lecs/lecs_18_119.wav|lecs|[KO] 진흥화된 서비스를 갖다가 오픈 API로 프로그램해가지고[KO]
./segmented_character_voice/lecs/lecs_18_120.wav|lecs|[KO] 만들 수 있게 한다. 그 다음에 그때 쓰이는 거 흩어져 있는[KO]
./segmented_character_voice/lecs/lecs_18_121.wav|lecs|[KO] 스마트 액스 박스 재료를 쓴다. 이 박스 재료가 엔드, 엣지, 코어에[KO]
./segmented_character_voice/lecs/lecs_18_122.wav|lecs|[KO] 흩어져 있는 리소스 풀로 해서 존재한다. 이런 식으로 보상할 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_123.wav|lecs|[KO] 그래서 스마트한 서비스를 오픈 API를 가지고 스마트 박스를 가지고[KO]
./segmented_character_voice/lecs/lecs_18_124.wav|lecs|[KO] 할 수 있는 이런 그림이 현재와는 미래의 어떤 서비스의 어떤 창출의[KO]
./segmented_character_voice/lecs/lecs_18_125.wav|lecs|[KO] 앱스트랙션이다. 추상화된 개념이다라고 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_18_126.wav|lecs|[KO] 말씀드렸던 개념을 그러면 실제로 하기 위해서 어떤 일이 준비가 돼야 되는지[KO]
./segmented_character_voice/lecs/lecs_18_127.wav|lecs|[KO] 그걸 한번 뒤로 돌려보겠습니다. 말씀드렸던 어떤 박스가 있고 박스들이[KO]
./segmented_character_voice/lecs/lecs_18_128.wav|lecs|[KO] 원하는 대로 흩어져서 펑션을 지원하고 뭐 이런 거 다 되는데[KO]
./segmented_character_voice/lecs/lecs_18_129.wav|lecs|[KO] 어? 그러면 그걸 위하나 보죠? 실제로 그걸 제공하는 입장에서[KO]
./segmented_character_voice/lecs/lecs_18_130.wav|lecs|[KO] 그걸 운영하는 입장에서 한번 쳐다보면 이걸 갖다 위하는[KO]
./segmented_character_voice/lecs/lecs_18_131.wav|lecs|[KO] 세팅들을 다 내가 알아서 할 수 있어야 되죠. 어디서 할 수 있어야 되죠?[KO]
./segmented_character_voice/lecs/lecs_18_132.wav|lecs|[KO] 아까 말씀드렸던 관제탑에서 할 수 있어야 되죠. 타워에서.[KO]
./segmented_character_voice/lecs/lecs_18_133.wav|lecs|[KO] 그러니까 타워에서 리모트에서 원격에 있는 걸 갖다가 저희가 아는[KO]
./segmented_character_voice/lecs/lecs_18_134.wav|lecs|[KO] 그 타워에서 박스까지 가는 어떤 제어 플레인의 네트워크를 통해서[KO]
./segmented_character_voice/lecs/lecs_18_135.wav|lecs|[KO] 특별한 전용 네트워크를 통해서 대화하면서 데이터랑 섞이지 않게[KO]
./segmented_character_voice/lecs/lecs_18_136.wav|lecs|[KO] 하면서 해줄 수 있어야 되겠죠. 이렇게 하고요. 세팅을 원하는[KO]
./segmented_character_voice/lecs/lecs_18_137.wav|lecs|[KO] 대로 할 수 있어야 되고요. 박스의 상태들을 갖다가[KO]
./segmented_character_voice/lecs/lecs_18_138.wav|lecs|[KO] 사이트에 흩어져 있는 박스들의 상태 원하는 대로 파악할 수 있어야 되고요.[KO]
./segmented_character_voice/lecs/lecs_18_139.wav|lecs|[KO] 비저빌리티입니다. 그 다음에 이 상태를 원하는 대로 조정해서[KO]
./segmented_character_voice/lecs/lecs_18_140.wav|lecs|[KO] 오케스트레이션을 할 수 있어야 되죠. 오케스트레이션입니다.[KO]
./segmented_character_voice/lecs/lecs_18_141.wav|lecs|[KO] 그 다음에 여기에 진흥화된 박스에 데이터가 모이면 그걸[KO]
./segmented_character_voice/lecs/lecs_18_142.wav|lecs|[KO] 진흥화된 해석을 할 수 있도록 연결해줘야 되죠.[KO]
./segmented_character_voice/lecs/lecs_18_143.wav|lecs|[KO] 또 안전하게 시큐리티 문제도 해결해야 되고요.[KO]
./segmented_character_voice/lecs/lecs_18_144.wav|lecs|[KO] 이 사람 저 사람 주인이 다른데 주인 다른 문제를 갖다가[KO]
./segmented_character_voice/lecs/lecs_18_145.wav|lecs|[KO] 교통정리를 해줘야 됩니다. 그리고 이런 상황을 갖다가[KO]
./segmented_character_voice/lecs/lecs_18_146.wav|lecs|[KO] 내가 실제 파악할 수 있도록 비주얼라이저를 가시화를 해서[KO]
./segmented_character_voice/lecs/lecs_18_147.wav|lecs|[KO] 전체 상황을 갖다가 제가 느껴서 이 부분을 관제탑에서[KO]
./segmented_character_voice/lecs/lecs_18_148.wav|lecs|[KO] 원격에 있는 걸 직접 보지 못하지만 보는 것처럼 하는[KO]
./segmented_character_voice/lecs/lecs_18_149.wav|lecs|[KO] 상황을 만들어서 전체적인 자동화를 만들어낼 수 있는[KO]
./segmented_character_voice/lecs/lecs_18_150.wav|lecs|[KO] 스마트 액스 오토메이션의 개념으로 전체를 바라볼 수 있게[KO]
./segmented_character_voice/lecs/lecs_18_151.wav|lecs|[KO] 만들어줘야 된다. 그렇게 되면 원하는 서비스를 갖다가[KO]
./segmented_character_voice/lecs/lecs_18_152.wav|lecs|[KO] 저는 한쪽에서 인프라를 빌려쓴, 남에게서 빌려쓴 인프라를[KO]
./segmented_character_voice/lecs/lecs_18_153.wav|lecs|[KO] 내가 원하는 입장에서 어플리케이션 개발자는[KO]
./segmented_character_voice/lecs/lecs_18_154.wav|lecs|[KO] 나름대로 자기의 서비스의 에코 시스템에 의해서[KO]
./segmented_character_voice/lecs/lecs_18_155.wav|lecs|[KO] 서비스가 잘 무럭무럭 자라도록 해야 되는 거죠.[KO]
./segmented_character_voice/lecs/lecs_18_156.wav|lecs|[KO] 그래서 새로운 아이디어를 넣고 그다음에 물을 주고[KO]
./segmented_character_voice/lecs/lecs_18_157.wav|lecs|[KO] 햇빛이 나오게 만들어주면 그게 자라나고 이게 자라나면[KO]
./segmented_character_voice/lecs/lecs_18_158.wav|lecs|[KO] 다시 또 많은 인프라를 제공하고 서로 선순환에 들어가는[KO]
./segmented_character_voice/lecs/lecs_18_159.wav|lecs|[KO] 라이프 스프라이크를 서서 선순환에 들어가는 루프를[KO]
./segmented_character_voice/lecs/lecs_18_160.wav|lecs|[KO] 만들어내야 된다. 이런 개념을 할 때 가장 중요한 매개체가[KO]
./segmented_character_voice/lecs/lecs_18_161.wav|lecs|[KO] 이네블하는 매개체가 뭐냐? 스마트 액스 개념의[KO]
./segmented_character_voice/lecs/lecs_18_162.wav|lecs|[KO] 어떤 오토메이션하는 앱스트랙션이 필요하다.[KO]
./segmented_character_voice/lecs/lecs_18_163.wav|lecs|[KO] 결국 자동화되고 고도화된 소프트에 정의된[KO]
./segmented_character_voice/lecs/lecs_18_164.wav|lecs|[KO] 어떤 운영 방법에 따라서 인프라가 제공되고[KO]
./segmented_character_voice/lecs/lecs_18_165.wav|lecs|[KO] 인프라를 통해서 인프라에 제공하고 오퍼레이션하고[KO]
./segmented_character_voice/lecs/lecs_18_166.wav|lecs|[KO] 그다음에 개발의 디벨로먼트가 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_18_167.wav|lecs|[KO] 일심동체라고 그러죠. 저희가 데봅스라는 단어를 씁니다.[KO]
./segmented_character_voice/lecs/lecs_18_168.wav|lecs|[KO] 디벨로퍼와 오퍼레이터가 서로 뭐지? 서로 네 책임이다[KO]
./segmented_character_voice/lecs/lecs_18_169.wav|lecs|[KO] 아니면 네가 잘못한 것에 따지는 게 아니라[KO]
./segmented_character_voice/lecs/lecs_18_170.wav|lecs|[KO] 서로 일심동체로 협력해서 데봅스, 개발하고 운영이[KO]
./segmented_character_voice/lecs/lecs_18_171.wav|lecs|[KO] 공동으로 협력되는 체제로 해서 운영되는 상태로 해서[KO]
./segmented_character_voice/lecs/lecs_18_172.wav|lecs|[KO] 진행되어야 된다. 이런 그림을 그리고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_18_173.wav|lecs|[KO] 그래서 스마트 액스 오토메이션 프레임웍의 틀을 가지고[KO]
./segmented_character_voice/lecs/lecs_18_174.wav|lecs|[KO] 이런 부분 앱스트랙션을 해결할 수 있는[KO]
./segmented_character_voice/lecs/lecs_18_175.wav|lecs|[KO] 그런 환경을 구성하는 게 큰 숙제이다.[KO]
./segmented_character_voice/lecs/lecs_18_176.wav|lecs|[KO] 이렇게 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_0.wav|lecs|[KO] 그럼 이런 숙제를 갖다가 저희가 숙제는 알겠는데 숙제를 갖다가 그럼 어떻게 하고 이런 숙제가 정말 가능해?[KO]
./segmented_character_voice/lecs/lecs_19_1.wav|lecs|[KO] 그럼 가능한지 아직은 현재는 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_19_2.wav|lecs|[KO] 저희가 말씀드렸던 클라우드는 계속 확산되고 있으면 점점 저 현실이고 더 많은 분들이 더 많이 쓰시게 되지만[KO]
./segmented_character_voice/lecs/lecs_19_3.wav|lecs|[KO] 아직 모든 곳에 클라우드가 진출해 있는 건 아니죠.[KO]
./segmented_character_voice/lecs/lecs_19_4.wav|lecs|[KO] 그 다음 소프트의 정의 인프라도 여전히 계속 5G나 이런 정리를 통해서 계속 확산되면서 저희한테 다가오고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_5.wav|lecs|[KO] 그럼 이런 것들을 갖다가 미리 좀 경험하고 준비를 해야 되잖아요.[KO]
./segmented_character_voice/lecs/lecs_19_6.wav|lecs|[KO] 준비를 해야지 미리 다가오는 미래에 대응할 수 있기 때문에[KO]
./segmented_character_voice/lecs/lecs_19_7.wav|lecs|[KO] 준비를 해서 연습을 해보자 이런 걸로 하는 개념에서 공부를 하시고 이해하시면 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_19_8.wav|lecs|[KO] 그래서 이걸 갖다가 저희가 미리 준비를 해보자.[KO]
./segmented_character_voice/lecs/lecs_19_9.wav|lecs|[KO] 준비를 할 때는 뭐지? 재밌게 준비해보자.[KO]
./segmented_character_voice/lecs/lecs_19_10.wav|lecs|[KO] 놀이동산 같이 뭐지? 놀이동산 플레이그라운드에 가서 놀면서 재밌게 이것저것 하고[KO]
./segmented_character_voice/lecs/lecs_19_11.wav|lecs|[KO] 놀이기구 망치는 고민하지 말고 놀이기구 조금 망쳐도 뭐지?[KO]
./segmented_character_voice/lecs/lecs_19_12.wav|lecs|[KO] 저희가 샌드박스라고 부르는 게 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_13.wav|lecs|[KO] 어린 애들이 모래를 가지고 이것 좀 만들었다 허물고 마음대로 편하게 샌드박스 개념처럼 편하게 마음대로 재구성했다가[KO]
./segmented_character_voice/lecs/lecs_19_14.wav|lecs|[KO] 다시 그 다음에 뭐죠? 끝나고 나면 원상복귀만 할 수 있으면 되잖아요.[KO]
./segmented_character_voice/lecs/lecs_19_15.wav|lecs|[KO] 자동적으로 원상복귀할 수 있는 방법을 통해서 복구하고[KO]
./segmented_character_voice/lecs/lecs_19_16.wav|lecs|[KO] 다시 다음 사람이 다시 재밌게 놀 수 있도록 만드는 이런 식의 시험환경.[KO]
./segmented_character_voice/lecs/lecs_19_17.wav|lecs|[KO] 그 다음에 실제로 테스트배드를 만들어보고 이 만들어본 테스트배드를 개념을 통해서[KO]
./segmented_character_voice/lecs/lecs_19_18.wav|lecs|[KO] 말씀드렸던 스마트엑스 자동화 앱스트랙션을 연습하면 굉장히 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_19_19.wav|lecs|[KO] 그래서 그런 개념으로 그렇게 하려면 어떻게 해야 되죠?[KO]
./segmented_character_voice/lecs/lecs_19_20.wav|lecs|[KO] 저희가 클라우드 같은 어떤 엔터티를 시험적으로 하나 만들어놔야 되겠죠?[KO]
./segmented_character_voice/lecs/lecs_19_21.wav|lecs|[KO] 그래서 클라우드 엔터티를 만들고[KO]
./segmented_character_voice/lecs/lecs_19_22.wav|lecs|[KO] 지금 타워 역할도 컴비네이션하는 스마트한 타워, 아까 관제탑의 역할도 겸임을 하는 어떤 클라우드, 중심 클라우드를 하나 만들고[KO]
./segmented_character_voice/lecs/lecs_19_23.wav|lecs|[KO] 그 다음에 엣지 클러스터 형태를 가지고 작은 마이크로 클라우드가 담을 수 있는 형태도 한번 만들어보고[KO]
./segmented_character_voice/lecs/lecs_19_24.wav|lecs|[KO] 그 다음에 지금 하나하나 흩어져 가지고 그냥 엔드를 각각의 상대하는 더 작은, 그렇죠?[KO]
./segmented_character_voice/lecs/lecs_19_25.wav|lecs|[KO] 엔드를 상대하는 IoT를 상대해주는 IoT랑 바로 연결고리를 갖는 어떤 박스도 만들어보고[KO]
./segmented_character_voice/lecs/lecs_19_26.wav|lecs|[KO] 이 박스를 투입을 한 다음에 적절한 위치에, 작지만은, 굉장히 소규모지만은[KO]
./segmented_character_voice/lecs/lecs_19_27.wav|lecs|[KO] 그걸 적절하게 배치해서 스마트 앱스트랙션을 갖다 확인할 수 있는 훈련장을 만들면 굉장히 좋지 않겠느냐, 이런 쪽으로 접근하면 좋겠고[KO]
./segmented_character_voice/lecs/lecs_19_28.wav|lecs|[KO] 실제로 이런 일들의 테스트 패드 어플로치가 그래서 전 세계적으로 많은 테스트 패드 어플로치가 활성화되어 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_29.wav|lecs|[KO] 미래 인터넷 테스트 패드, 그 다음에 클라우드 테스트 패드, 그것들이 다시 차세대 버전으로[KO]
./segmented_character_voice/lecs/lecs_19_30.wav|lecs|[KO] 5G나 이런 것들을 연동해서 하는 확장되는, 글로벌하게 인터커넥트 되는, 그 다음에 연합되는 테스트 패드의 흐름들이 계속되면서[KO]
./segmented_character_voice/lecs/lecs_19_31.wav|lecs|[KO] 이런 일들을 할 도록 지원하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_19_32.wav|lecs|[KO] 관심 가지시면 찾아보시면 여러 가지 길로 시험을 해볼 수 있는 환경을 만나실 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_33.wav|lecs|[KO] 지금 말씀드렸던 부분에서 시험 환경에서 그럼 어떤 시험을 할 수 있느냐, 시험하러 갔더니[KO]
./segmented_character_voice/lecs/lecs_19_34.wav|lecs|[KO] 놀이기구에서 놀이기구가 좀 현차나서 내가 마음대로 놀기가 재미있게 놀 수 없네, 아직은 너무 불편하네,[KO]
./segmented_character_voice/lecs/lecs_19_35.wav|lecs|[KO] 모든 걸 다시 처음부터 다시 해서 해야 되는데 나는 바로 재미있는 놀이기구를 타고 싶은데 준비가 덜 돼 있는데[KO]
./segmented_character_voice/lecs/lecs_19_36.wav|lecs|[KO] 여러 부분의 시험 환경에서 어느 정도 놀이동산을 만들었으면 거기서 놀이기구들이 좀 더 포함되어서[KO]
./segmented_character_voice/lecs/lecs_19_37.wav|lecs|[KO] 재미있게 바로 놀 수 있도록 준비해야 되죠.[KO]
./segmented_character_voice/lecs/lecs_19_38.wav|lecs|[KO] 그래서 일정 부분의 플랫폼의 역할을 하는 어떤 오픈소스나 여러 가지 다양한 부분들이 요즘 많이 활성화되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_39.wav|lecs|[KO] 그래서 다양한 오픈소스 플랫폼들이 활성화돼서 오픈API를 지원할 수 있게 되고요.[KO]
./segmented_character_voice/lecs/lecs_19_40.wav|lecs|[KO] 그리고 아까 칼라펜의 역할을 하는 것들을 저희가 만드는 놀이동산이죠, 플레이그라운드에다가[KO]
./segmented_character_voice/lecs/lecs_19_41.wav|lecs|[KO] 이런 칼라펜 역할을 하는 기구들을 설치해서 투입해놓고 준비되어 있는 놀이동산을 주면 훨씬 더 재미있게 바로 이용하겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_42.wav|lecs|[KO] 어떤 사람들은 놀이기구들을 추가해서 오픈 플랫폼이라고 하는 오픈 사실은 서비스 플랫폼이죠.[KO]
./segmented_character_voice/lecs/lecs_19_43.wav|lecs|[KO] 서비스를 지원하는 플랫폼, 그 다음에 오픈, 그 다음에 플레이그라운드를 지원하는 플랫폼.[KO]
./segmented_character_voice/lecs/lecs_19_44.wav|lecs|[KO] 플랫폼도 굉장히 많은 층이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_45.wav|lecs|[KO] 그 중에서 사람들이 재미있게 플레이그라운드를 활용할 수 있는 플랫폼인 도구들을 쌓아놓고[KO]
./segmented_character_voice/lecs/lecs_19_46.wav|lecs|[KO] 그걸 활용해서 훨씬 더 손쉽게 서비스 창출을 하도록 유도하는 이런 식의 접근도 필요한 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_19_47.wav|lecs|[KO] 그렇지 않으면 원재료부터 다시 일일이 다 준비를 해야 되니까 훨씬 더 힘이 들어서 놀이까지 할 때까지 너무 길이 험난한 거죠.[KO]
./segmented_character_voice/lecs/lecs_19_48.wav|lecs|[KO] 그걸 짧게 해서 훨씬 더 빠르게 놀이를 체험할 수 있게 하는 접근도 필요한 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_19_49.wav|lecs|[KO] 이런 입장을 하는 방법에서 어떤 것을 실제로 해볼 수 있는지 한 가지 예를 한번 드려서 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_50.wav|lecs|[KO] 실제로 저희가 할 수 있는 게 소규모지만 아까 말씀드렸던 관제탑이라는 것을 여기저기 세우고[KO]
./segmented_character_voice/lecs/lecs_19_51.wav|lecs|[KO] 저기 있는 지금 그림에 있는 영상에 보면 한국에 있는 사이트에서 하나, 광주광역원에서도 관제탑을 하나 세우고[KO]
./segmented_character_voice/lecs/lecs_19_52.wav|lecs|[KO] 지금 현재 UM이라고 되어 있는 말레이자에도 관제탑을 하나 세우고 NCQ, 대만에도 관제탑을 세우고[KO]
./segmented_character_voice/lecs/lecs_19_53.wav|lecs|[KO] 이 관제탑들이 다른 역할을 분담을 합니다.[KO]
./segmented_character_voice/lecs/lecs_19_54.wav|lecs|[KO] P, V, S, O 이런 단어들이 있는데 P는 프로비저닝, 설정을 하는 것을 담당하고 V는 상태를 확인하는 비저빌리티를 담당하고[KO]
./segmented_character_voice/lecs/lecs_19_55.wav|lecs|[KO] S는 안전, 시큐리티를 담당하고 O는 오케스트레이션을 담당합니다.[KO]
./segmented_character_voice/lecs/lecs_19_56.wav|lecs|[KO] 이런 어떤 기능들을 중복되기도 하고 독립적으로 해서 회취해서 활용하고[KO]
./segmented_character_voice/lecs/lecs_19_57.wav|lecs|[KO] 이런 타워들이 서로 모여서 공동으로 모여서 흩어져 있는 사이트에 있는 자원들을 박스들 다시 통제할 수 있는[KO]
./segmented_character_voice/lecs/lecs_19_58.wav|lecs|[KO] 이런 놀이동산을 만들면 효과적으로 국제적으로 인터코넥트 되는 서비스의 실정을 할 수 있겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_59.wav|lecs|[KO] 그래서 그런 실적인 테스트배드를 저희가 오픈 페더레이션의 TAIM 플러스라는 어떤 프로젝트에서 시험적으로 해보면서[KO]
./segmented_character_voice/lecs/lecs_19_60.wav|lecs|[KO] 지금 말씀드렸던 스마트 앱스트랙션의 유용성을 검증하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_61.wav|lecs|[KO] 그래서 여러분들도 그런 앱스트랙션의 개념을 동일하게 한 번 소규모로 미니처 되거나[KO]
./segmented_character_voice/lecs/lecs_19_62.wav|lecs|[KO] 더 마이크로 사이즈로 아니면 더 나노 사이즈로 동일하게 경험하면서 하나씩 하나씩 손으로 익혀가는[KO]
./segmented_character_voice/lecs/lecs_19_63.wav|lecs|[KO] 그런 식으로 하는 접근을 하시기를 권장드립니다.[KO]
./segmented_character_voice/lecs/lecs_19_64.wav|lecs|[KO] 이런 부분에서는 참가지로 상태를 보는 부분은 비저빌리티에 대해서 조금 하고[KO]
./segmented_character_voice/lecs/lecs_19_65.wav|lecs|[KO] 시큐리티 오퍼레이션에 대해서 조금 한 번 더 리뷰해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_66.wav|lecs|[KO] 생각보다 저희가 하는 부분이 말씀드렸죠. 박스 안에도 버츄얼 박스가 있고[KO]
./segmented_character_voice/lecs/lecs_19_67.wav|lecs|[KO] 그 다음에 컨테이너 칸막이가 있고 뭐 이런 식으로 다양하게 말씀드렸어요.[KO]
./segmented_character_voice/lecs/lecs_19_68.wav|lecs|[KO] 그걸 어떻게 다 구분하지? 내가 그걸 어떻게 다 파악을 하지? 하나의 큰 숙제인 거죠.[KO]
./segmented_character_voice/lecs/lecs_19_69.wav|lecs|[KO] 또 그것들을 서로 연결하기 위해서 다양한 커넥션들이 인터커넥션이 생기는데[KO]
./segmented_character_voice/lecs/lecs_19_70.wav|lecs|[KO] 그 복잡한 인터커넥션을 내가 어떻게 파악하고 통제하지?[KO]
./segmented_character_voice/lecs/lecs_19_71.wav|lecs|[KO] 또 그것들을 통해서 많은 일들이 여기저기서 벌어지는데 그게 잘 되고 있는지 어떻게 관리하지?[KO]
./segmented_character_voice/lecs/lecs_19_72.wav|lecs|[KO] 이 모든 게 사실은 큰 숙제입니다. 그래서 어떤 리소스가 지금 어떤 상태에 있고[KO]
./segmented_character_voice/lecs/lecs_19_73.wav|lecs|[KO] 그걸 리소스를 연결하는 인터커넥션이고 인터커넥션을 통해서 하는 패켓들의 흐름인 플로우가[KO]
./segmented_character_voice/lecs/lecs_19_74.wav|lecs|[KO] 어떻게 지금 상태에 있고 그 다음에 실제로 어떤 일을 하는 애들이 어떤 상태에 있는지 하나씩 하나씩 다 구분해서 판단하고[KO]
./segmented_character_voice/lecs/lecs_19_75.wav|lecs|[KO] 이게 또 안전한지를 살피는 이런 식의 기술이 요즘 굉장히 큰 주목받고 있는 기술입니다.[KO]
./segmented_character_voice/lecs/lecs_19_76.wav|lecs|[KO] 왜냐하면 클라우드 환경처럼 남의 환경을 빌려서 쓰기 때문에[KO]
./segmented_character_voice/lecs/lecs_19_77.wav|lecs|[KO] 그거에 대해서 내가 그걸 남의 환경을 빌려주면 내 집처럼 아니면 내 환경처럼 쓰게 하는 기술을[KO]
./segmented_character_voice/lecs/lecs_19_78.wav|lecs|[KO] 서포트를 해줘야지만 믿고 저 편안하게 쓸 수 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_19_79.wav|lecs|[KO] 확인이 안 되는데 블랙박스 안에 들어가서 된다고 된다고 말만 들으면 불안하잖아요.[KO]
./segmented_character_voice/lecs/lecs_19_80.wav|lecs|[KO] 그걸 할 수 있는 기술이 굉장히 주목받고 있고요.[KO]
./segmented_character_voice/lecs/lecs_19_81.wav|lecs|[KO] 그거에 대한 그것들은 많은 개발들의 기술 경쟁이 벌어지고 있다.[KO]
./segmented_character_voice/lecs/lecs_19_82.wav|lecs|[KO] 그래서 그런 부분을 굉장히 핵심적으로 다룰 필요가 있다. 이런 부분을 한번 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_19_83.wav|lecs|[KO] 다른 거 하나겠습니다. 똑같이 남의 어떤 인프라를 빌려 씁니다.[KO]
./segmented_character_voice/lecs/lecs_19_84.wav|lecs|[KO] 남의 인프라를 빌려서 쓰는데 그러면 남의 인프라를 빌려서 쓰는데[KO]
./segmented_character_voice/lecs/lecs_19_85.wav|lecs|[KO] 그 인프라를 빌렸을 때 내가 원하는 서비스를 갖다 지금부터 해야 되는데[KO]
./segmented_character_voice/lecs/lecs_19_86.wav|lecs|[KO] 나는 내가 지금 집에서는 이렇게 요리도 잘하고 편했는데[KO]
./segmented_character_voice/lecs/lecs_19_87.wav|lecs|[KO] 딴 데 나가서 갔다니 내가 쓰던 도구도 없고 인프라도 없어서 굉장히 요리도 만들고[KO]
./segmented_character_voice/lecs/lecs_19_88.wav|lecs|[KO] 뭐지 서비스를 제대로 못 만들겠네 이렇게 얘기해요.[KO]
./segmented_character_voice/lecs/lecs_19_89.wav|lecs|[KO] 그런데 그렇게 하는 부분을 갖다 그러면 해소할 수 있는 어떤 도구가 필요하겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_90.wav|lecs|[KO] 왜냐하면 인프라가 더 유행해지려면 그걸 편안하게 만드는 도구도 만들어내야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_91.wav|lecs|[KO] 그래서 그런 개념으로는 이런 시도도 해볼 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_92.wav|lecs|[KO] 남들에 쓰는 인프라, 아니 클라우드를 갖다 빌렸습니다.[KO]
./segmented_character_voice/lecs/lecs_19_93.wav|lecs|[KO] 그거 갖다가 빌려쓰는 언더클라우드라는 인프라를 놓고[KO]
./segmented_character_voice/lecs/lecs_19_94.wav|lecs|[KO] 거기에다가 살짝 뭐죠? 어떤 데코레이션을 좀 해요.[KO]
./segmented_character_voice/lecs/lecs_19_95.wav|lecs|[KO] 그래서 내가 집처럼 엮이고 집에서 요리하던 환경처럼 느끼게 만들어주는[KO]
./segmented_character_voice/lecs/lecs_19_96.wav|lecs|[KO] 오버클라우드라는 인프라를 살짝 올린 다음에[KO]
./segmented_character_voice/lecs/lecs_19_97.wav|lecs|[KO] 어? 그렇게 하면 거기서 만드는 서비스는 요리는[KO]
./segmented_character_voice/lecs/lecs_19_98.wav|lecs|[KO] 결국은 집에서 하던 요리랑 비슷한 상태로 하면 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_99.wav|lecs|[KO] 집에서 하던 대로 그대로 하면 실력발휘가 되고[KO]
./segmented_character_voice/lecs/lecs_19_100.wav|lecs|[KO] 맛있는 요리를 안전하게 할 수 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_19_101.wav|lecs|[KO] 다만 이렇게 하는 부분에서 그 인프라를 만들어야 되는 기술요소가[KO]
./segmented_character_voice/lecs/lecs_19_102.wav|lecs|[KO] 이걸 다 지원하는 요소가 다 숨어서 내가 집처럼 느끼도록 하는 지원화도를 만드는 게[KO]
./segmented_character_voice/lecs/lecs_19_103.wav|lecs|[KO] 뒤에 숨어서 지원이 돼야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_104.wav|lecs|[KO] 그래서 지금 말씀드렸던 아까 가시성을 확보하고[KO]
./segmented_character_voice/lecs/lecs_19_105.wav|lecs|[KO] 그다음에 이 오케스트레이션 되는 리소스를 활용하는 부분을[KO]
./segmented_character_voice/lecs/lecs_19_106.wav|lecs|[KO] 기술 확보하는 이 서포트하는 기술들이 굉장히 주목을 받으면서[KO]
./segmented_character_voice/lecs/lecs_19_107.wav|lecs|[KO] 추가로 하면 가시성하고 아까 제가 뭘 말씀드렸죠?[KO]
./segmented_character_voice/lecs/lecs_19_108.wav|lecs|[KO] 이 안전, 보안이란 이런 걸 다 연결해가지고 다루는[KO]
./segmented_character_voice/lecs/lecs_19_109.wav|lecs|[KO] 어떤 지원기술이 굉장히 주목을 받으면서 개발되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_110.wav|lecs|[KO] 요 얘기를 조금 더 들어가서 조금 더 미래적인 모습을[KO]
./segmented_character_voice/lecs/lecs_19_111.wav|lecs|[KO] 한 번만 더 더 끌어가 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_112.wav|lecs|[KO] 그래서 이런 부분에서 저희가 데이터에 대한 것도 강조해서[KO]
./segmented_character_voice/lecs/lecs_19_113.wav|lecs|[KO] 한번 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_19_114.wav|lecs|[KO] 데이터를 어디서 강조해서 말씀드렸냐면[KO]
./segmented_character_voice/lecs/lecs_19_115.wav|lecs|[KO] HPC 클러스터가 있고 스토리지 클러스터랑 빅데이터 클러스터라면[KO]
./segmented_character_voice/lecs/lecs_19_116.wav|lecs|[KO] 데이터를 같이 할 수 있는데 그걸 HPDA, High Performance Data Analysis[KO]
./segmented_character_voice/lecs/lecs_19_117.wav|lecs|[KO] HPC, HPDA 컴비네이션하고 그걸 가지고 레버리지해서[KO]
./segmented_character_voice/lecs/lecs_19_118.wav|lecs|[KO] 잘 연계해서 만들어내면 AI 딥러닝을 할 수 있다.[KO]
./segmented_character_voice/lecs/lecs_19_119.wav|lecs|[KO] 이렇게 말씀드렸죠.[KO]
./segmented_character_voice/lecs/lecs_19_120.wav|lecs|[KO] 그때 데이터가 굉장히 중요하다고 말씀드렸고요.[KO]
./segmented_character_voice/lecs/lecs_19_121.wav|lecs|[KO] 그래서 이런 지금 저희가 만들고 있는 인프라하고 플랫폼 쪽에[KO]
./segmented_character_voice/lecs/lecs_19_122.wav|lecs|[KO] 데이터라는 부분을 처리하는 환경이 가운데 중앙으로[KO]
./segmented_character_voice/lecs/lecs_19_123.wav|lecs|[KO] 쫙 내려와서 박혀서 잘 위치하면 좋겠다.[KO]
./segmented_character_voice/lecs/lecs_19_124.wav|lecs|[KO] 이런 말씀을 드렸었죠.[KO]
./segmented_character_voice/lecs/lecs_19_125.wav|lecs|[KO] 그 부분을 상기해보시면 결국 저희가 하고 싶은 게 뭐냐면[KO]
./segmented_character_voice/lecs/lecs_19_126.wav|lecs|[KO] 이 데이터를 인프라랑 플랫폼의 중앙에 데이터를 위치해놓고[KO]
./segmented_character_voice/lecs/lecs_19_127.wav|lecs|[KO] 저희가 원하는 데이터에 접근하고 데이터에 활용하고[KO]
./segmented_character_voice/lecs/lecs_19_128.wav|lecs|[KO] 데이터를 가지고 조작하는 것들이[KO]
./segmented_character_voice/lecs/lecs_19_129.wav|lecs|[KO] 한 번에 쉽게 일어날 수 있는 환경을 만들어내는 게[KO]
./segmented_character_voice/lecs/lecs_19_130.wav|lecs|[KO] 지금 현재 목표입니다.[KO]
./segmented_character_voice/lecs/lecs_19_131.wav|lecs|[KO] 그래서 데이터 중심으로 데이터를 가지고[KO]
./segmented_character_voice/lecs/lecs_19_132.wav|lecs|[KO] 인텔리전스를 통해서 훨씬 더 진영향이 있는 미래형,[KO]
./segmented_character_voice/lecs/lecs_19_133.wav|lecs|[KO] 요즘 많이 얘기하는 4차 산업혁명에 대응하는[KO]
./segmented_character_voice/lecs/lecs_19_134.wav|lecs|[KO] 스마트한 서비스들이 가능하도록 만들 수 있죠.[KO]
./segmented_character_voice/lecs/lecs_19_135.wav|lecs|[KO] 그런 개념으로 연결하는 노력이 필요하고[KO]
./segmented_character_voice/lecs/lecs_19_136.wav|lecs|[KO] 이 노력을 진행할 때 클라우드라고 하는 어떤 방법론을[KO]
./segmented_character_voice/lecs/lecs_19_137.wav|lecs|[KO] 굉장히 잘 활용해서 해야 된다.[KO]
./segmented_character_voice/lecs/lecs_19_138.wav|lecs|[KO] 이런 말씀을 드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_139.wav|lecs|[KO] 클라우드를 이용해서 데이터를 굉장히 중심으로 놓고[KO]
./segmented_character_voice/lecs/lecs_19_140.wav|lecs|[KO] 활용하는 패러다임으로 점점 이른다.[KO]
./segmented_character_voice/lecs/lecs_19_141.wav|lecs|[KO] 자원을 공유하고 효율적으로 쓰는 패러다임은[KO]
./segmented_character_voice/lecs/lecs_19_142.wav|lecs|[KO] 벌써 상황이 정리가 좀 됐다고 말씀을 드리고요.[KO]
./segmented_character_voice/lecs/lecs_19_143.wav|lecs|[KO] 지금부터는 오픈된 데이터를 서로 공유하고 교환하고[KO]
./segmented_character_voice/lecs/lecs_19_144.wav|lecs|[KO] 그 다음에 중요한 가치를 줘서 시장이 형성돼서[KO]
./segmented_character_voice/lecs/lecs_19_145.wav|lecs|[KO] 데이터를 통해서 가치를 생기는 만큼 다시[KO]
./segmented_character_voice/lecs/lecs_19_146.wav|lecs|[KO] 처리할 수 있는 환경과 연결해서[KO]
./segmented_character_voice/lecs/lecs_19_147.wav|lecs|[KO] 전체적으로 다시 에코를 굴려가는 거죠.[KO]
./segmented_character_voice/lecs/lecs_19_148.wav|lecs|[KO] 중요하게 다시 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_149.wav|lecs|[KO] 데이터가 언제 되냐.[KO]
./segmented_character_voice/lecs/lecs_19_150.wav|lecs|[KO] 데이터를 활용해서 뭔가 서비스를 했는데[KO]
./segmented_character_voice/lecs/lecs_19_151.wav|lecs|[KO] 그 서비스가 어떻게 되죠? 가치를 플러스했다.[KO]
./segmented_character_voice/lecs/lecs_19_152.wav|lecs|[KO] 그래서 뭐죠? 가치를 플러스했으면 돈이 들어온다는 거.[KO]
./segmented_character_voice/lecs/lecs_19_153.wav|lecs|[KO] 돈이 들어오면 다시 그 서비스를 발전시켜서 확대하고[KO]
./segmented_character_voice/lecs/lecs_19_154.wav|lecs|[KO] 확대하고 점점 선순환 구조로 에코 시스템을 돌릴 수 있게 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_155.wav|lecs|[KO] 그런 판단을 만들어내는 게 굉장히 중요해서[KO]
./segmented_character_voice/lecs/lecs_19_156.wav|lecs|[KO] 요즘 데이터 중심의 인프라를 데이터를 소프트의 정의[KO]
./segmented_character_voice/lecs/lecs_19_157.wav|lecs|[KO] 인프라에 초용해서 하나로 끌어들이는 방향으로[KO]
./segmented_character_voice/lecs/lecs_19_158.wav|lecs|[KO] 서서히 움직이고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_159.wav|lecs|[KO] 이런 진화가 일어나고 있다는 것도 주목해 주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_160.wav|lecs|[KO] 마지막으로 그 말씀을 드리는 걸 조금 더 크게 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_161.wav|lecs|[KO] 저희가 하는 일들을 제4차 산업혁명,[KO]
./segmented_character_voice/lecs/lecs_19_162.wav|lecs|[KO] 그러니까 인도수리 4.0, 그게 4차 산업혁명의 단어라고 보시면[KO]
./segmented_character_voice/lecs/lecs_19_163.wav|lecs|[KO] 저희가 데이터를 가지고 하고 싶은 일은 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_19_164.wav|lecs|[KO] 저희가 새로운 사이언스의 발견을 위해서 한다.[KO]
./segmented_character_voice/lecs/lecs_19_165.wav|lecs|[KO] 새로운 우주의 발생 기원을 찾는다.[KO]
./segmented_character_voice/lecs/lecs_19_166.wav|lecs|[KO] 아니면 DNA 분석을 통해서 새로운 정밀 의료라고 하는 부분에서[KO]
./segmented_character_voice/lecs/lecs_19_167.wav|lecs|[KO] 새로운 의료기법을 개발한다.[KO]
./segmented_character_voice/lecs/lecs_19_168.wav|lecs|[KO] 아니면 기상, 기후변화를 예측해서 점점 안전한 지구를 만든다.[KO]
./segmented_character_voice/lecs/lecs_19_169.wav|lecs|[KO] 거기 부분에 다시 요즘 재난이라고 하는 부분에[KO]
./segmented_character_voice/lecs/lecs_19_170.wav|lecs|[KO] 이런 계산 능력하고 이런 능력을 사용하는 문제.[KO]
./segmented_character_voice/lecs/lecs_19_171.wav|lecs|[KO] 그다음에 제조할 때 스마트 팩토리 아니면[KO]
./segmented_character_voice/lecs/lecs_19_172.wav|lecs|[KO] 항공기나 이런 부분일 때 효율성 있는 생산을 하는 부분에서[KO]
./segmented_character_voice/lecs/lecs_19_173.wav|lecs|[KO] 굉장히 많은 부분에서 저희가 얘기하는 컴퓨터의 파워를[KO]
./segmented_character_voice/lecs/lecs_19_174.wav|lecs|[KO] 맥시멈으로 이용하는 컴퓨터의 파워를 풀로 이용하는[KO]
./segmented_character_voice/lecs/lecs_19_175.wav|lecs|[KO] HPC, 그다음에 다시 빅데이터, AI를 쓰는 이런 클러스터가[KO]
./segmented_character_voice/lecs/lecs_19_176.wav|lecs|[KO] 확실해서 사용되고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_19_177.wav|lecs|[KO] 그런데 이런 수요를 어떻게 대응해야 될 거냐.[KO]
./segmented_character_voice/lecs/lecs_19_178.wav|lecs|[KO] 수요를 대응하기 위해서는 기본적으로 각자 작은 어떤 리소스를[KO]
./segmented_character_voice/lecs/lecs_19_179.wav|lecs|[KO] 하나 놓고 한 대로 아이솔레이션을 써가지고[KO]
./segmented_character_voice/lecs/lecs_19_180.wav|lecs|[KO] 어떤 해볼 수 있는 상태로는 안 되고 어떻게 되죠?[KO]
./segmented_character_voice/lecs/lecs_19_181.wav|lecs|[KO] 점점 모아서 중앙에 모아서 같이 쓰고 공유하고[KO]
./segmented_character_voice/lecs/lecs_19_182.wav|lecs|[KO] 다시 내가 어떤 소프트웨어를 만들어서 다시 소프트웨어도 공유하고[KO]
./segmented_character_voice/lecs/lecs_19_183.wav|lecs|[KO] 발전시키고 계속 공유한 거죠.[KO]
./segmented_character_voice/lecs/lecs_19_184.wav|lecs|[KO] 그러니까 한국에서 얘기하던 이 두레라고 하는[KO]
./segmented_character_voice/lecs/lecs_19_185.wav|lecs|[KO] 기본적으로 품하시 로직으로 공유하는 개념을 강조하면서[KO]
./segmented_character_voice/lecs/lecs_19_186.wav|lecs|[KO] 오픈된 상태에서 협업형으로 공유하는 상태의 개발.[KO]
./segmented_character_voice/lecs/lecs_19_187.wav|lecs|[KO] 그리고 운영하는 사람하고 개발하는 사람들이[KO]
./segmented_character_voice/lecs/lecs_19_188.wav|lecs|[KO] 따로 놀지 않고 협력하고 일심 정체로 돼서[KO]
./segmented_character_voice/lecs/lecs_19_189.wav|lecs|[KO] 그 다음에 커뮤니티마다 나 따로따로 뭐지?[KO]
./segmented_character_voice/lecs/lecs_19_190.wav|lecs|[KO] 나는 뭐 나 혼자 연구할래가 아니다.[KO]
./segmented_character_voice/lecs/lecs_19_191.wav|lecs|[KO] 같이 협력하면서 데이터를 공유하고 협력을 해야지[KO]
./segmented_character_voice/lecs/lecs_19_192.wav|lecs|[KO] 인류가 원하는 어떤 서비스 그 다음에 어떤 국가가 원하는[KO]
./segmented_character_voice/lecs/lecs_19_193.wav|lecs|[KO] 경쟁력 있는 서비스 개발 다 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_19_194.wav|lecs|[KO] 그래서 국가가 원하는 오픈된 데이터를 가지고[KO]
./segmented_character_voice/lecs/lecs_19_195.wav|lecs|[KO] 국가가 원하는 과학기술의 어떤 에코심의 효과적으로 관적해서는[KO]
./segmented_character_voice/lecs/lecs_19_196.wav|lecs|[KO] 이 컴퓨터 시스템을 갖다가 효과적으로 통합을 해서[KO]
./segmented_character_voice/lecs/lecs_19_197.wav|lecs|[KO] 체계적으로 활용할 수 있는 이런 체제를 확보하는 게 필요하다.[KO]
./segmented_character_voice/lecs/lecs_19_198.wav|lecs|[KO] 이런 부분에서 컴퓨터 시스템을 갖다가 흩어져 있는 시스템이라 통합적으로 보고[KO]
./segmented_character_voice/lecs/lecs_19_199.wav|lecs|[KO] 전체적으로 이게 앞으로 하는 어떤 디지털 트랜스포메이션이라고 하는[KO]
./segmented_character_voice/lecs/lecs_19_200.wav|lecs|[KO] 디지털적인 어떤 대전환이죠.[KO]
./segmented_character_voice/lecs/lecs_19_201.wav|lecs|[KO] 변환 과정을 갖다가 할 수 있는 그걸 대응할 수 있는 미래형 인프라.[KO]
./segmented_character_voice/lecs/lecs_19_202.wav|lecs|[KO] 말씀드렸던 소프트웨어 정의 인프라 클라우드를 레버리지하는[KO]
./segmented_character_voice/lecs/lecs_19_203.wav|lecs|[KO] 그리고 데이터 중심으로 처리할 수 있고[KO]
./segmented_character_voice/lecs/lecs_19_204.wav|lecs|[KO] 그 컴퓨터를 쓰는 이런 인프라의 전환을 준비할 필요가 있는 시기로 보입니다.[KO]
./segmented_character_voice/lecs/lecs_19_205.wav|lecs|[KO] 이상으로 기본적으로 스마트 액션에 대해서 저희가 정리를 해봤고요.[KO]
./segmented_character_voice/lecs/lecs_19_206.wav|lecs|[KO] 이 부분에서 조금 정리해서 키워드만 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_207.wav|lecs|[KO] 세 가지 말씀을 계속 저희가 박스 인터넷 펑션 이렇게 말씀드렸죠.[KO]
./segmented_character_voice/lecs/lecs_19_208.wav|lecs|[KO] 거기에 하나 더 붙인다면 관제탑이라고 하는 타워의 개념을[KO]
./segmented_character_voice/lecs/lecs_19_209.wav|lecs|[KO] 타워에서 박스 인터넷 펑션을 통제하고 하는 게 굉장히 중요한 개념입니다.[KO]
./segmented_character_voice/lecs/lecs_19_210.wav|lecs|[KO] 이 개념에서 전체를 바라보시면서 데이터를 믹스한 소프트웨어 디파인 인프라를 그려가시면[KO]
./segmented_character_voice/lecs/lecs_19_211.wav|lecs|[KO] 전체적인 모습에서 어떤 컴퓨터 쪽에 어떤 분야가 더 필요하고[KO]
./segmented_character_voice/lecs/lecs_19_212.wav|lecs|[KO] 어떤 걸 더 익혀서 활용하면 좋겠느냐.[KO]
./segmented_character_voice/lecs/lecs_19_213.wav|lecs|[KO] 어느 부분이 지금 현재 어려운 난제로 되느냐.[KO]
./segmented_character_voice/lecs/lecs_19_214.wav|lecs|[KO] 이런 거에 대해서 한번 고민하실 수 있는 기본적인 기회가 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_19_215.wav|lecs|[KO] 그리고 저희 쪽에서 준비했던 이 이론 부분하고[KO]
./segmented_character_voice/lecs/lecs_19_216.wav|lecs|[KO] 저희가 실습 부분에 다양한 레파토리가 있는 거 다 아시죠.[KO]
./segmented_character_voice/lecs/lecs_19_217.wav|lecs|[KO] 그래서 실습을 통해서 하나씩 핸즈온 스타일로[KO]
./segmented_character_voice/lecs/lecs_19_218.wav|lecs|[KO] 하나씩 하는 작은 디테일을 손끝으로 느끼시는 거랑 연결해서[KO]
./segmented_character_voice/lecs/lecs_19_219.wav|lecs|[KO] 한번 전체를 돌보고 이런 스마트 앱 스트랙션을 가지고[KO]
./segmented_character_voice/lecs/lecs_19_220.wav|lecs|[KO] 이 컴퓨터 시스템을 찾아보면 뭔가 전체로 바라보면서[KO]
./segmented_character_voice/lecs/lecs_19_221.wav|lecs|[KO] 방향성이 좀 보인다.[KO]
./segmented_character_voice/lecs/lecs_19_222.wav|lecs|[KO] 이런 얘기를 들을 수 있는 그런 강의가 됐으면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_19_223.wav|lecs|[KO] 이상으로 강의를 마치겠습니다. 고맙습니다.[KO]
./segmented_character_voice/lecs/lecs_20_0.wav|lecs|[KO] 안녕하십니까 컴퓨터 시스템을 활용해서 저희가 AI에 기반한 어떤 클라우드 활용하는 이 부분을 갖다가 일어나고 실습으로 정리하는 강의를 저희가 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_1.wav|lecs|[KO] 이 중에서 저희가 오늘은 이 실습에 대한 부분을 전체적으로 어떻게 구성을 했는지 한번 설명드리는 시간을 갖도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_2.wav|lecs|[KO] 그래서 저희가 이걸 갖다가 실습 넘버 제로 오버뷰 라고 부르고 있고요.[KO]
./segmented_character_voice/lecs/lecs_20_3.wav|lecs|[KO] 그 내용을 하나씩 하나씩 살펴보도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_4.wav|lecs|[KO] 저희가 말씀드렸던 이 실습을 전체적으로 저희가 부를 때 스마트 엑스 랩스라고 하고 랩스 미니라고 저희가 부르는 어떤 이름으로 부르고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_5.wav|lecs|[KO] 컴퓨터 시스템을 활용해서 저희가 미니 사이즈로 하는 소규모의 랩을 할 수 있는 이런 개념으로 잡았고요.[KO]
./segmented_character_voice/lecs/lecs_20_6.wav|lecs|[KO] 실제로 이 실습의 모체는 저희가 깃허브로 관리하고 있는 스마트 엑스 랩스 미니라는 어떤 프로젝트라고 콜라보레이션 프로젝트에서 저희가 발췌해서 하는 실습을 하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_20_7.wav|lecs|[KO] 그래서 전체적으로 원래 갖고 있는 이 깃허브 베이스를 보시고 싶으면 지금 보이시는 github.com smartx-raps-smartx-mini 쪽으로 가시면 원래 있던 오리지널 풀셋의 여러가지 버전을 보실 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_20_8.wav|lecs|[KO] 이 버전 중에서 지금 이 스타묵을 위해서 활용되는 버전도 따로 확인하실 수 있을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_20_9.wav|lecs|[KO] 그럼 스마트 엑스 랩스 미니라는 어떤 목적을 갖고 만들었는지 조금 잘 설명드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_10.wav|lecs|[KO] 소규모로 컴퓨터 시스템을 이해하고 컴퓨터 시스템에 대한 여러가지 주제들을 커버해야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_20_11.wav|lecs|[KO] 저희 강의 부분을 다 마셔들으셨다면 저희가 말씀드리는 박스 인터넷 펑션, 타워 이런 단어들은 친숙해졌을 거고요.[KO]
./segmented_character_voice/lecs/lecs_20_12.wav|lecs|[KO] 똑같이 클러스터, SDN 이런 단어들도 조금씩은 들으셨을 겁니다.[KO]
./segmented_character_voice/lecs/lecs_20_13.wav|lecs|[KO] 그래서 기본적으로 박스에 있는 부분을 가지고 박스에 os를 깔아서 세팅을 해보고 그 다음에 네트워크 연동을 연결을 시키고[KO]
./segmented_character_voice/lecs/lecs_20_14.wav|lecs|[KO] 그 다음에 펑션을 투입해가지고 내가 원하는 일들을 하도록 하는 기본적인 어레인지를 하고[KO]
./segmented_character_voice/lecs/lecs_20_15.wav|lecs|[KO] 컴퓨터 시스템들을 뭍혀가지고 클러스터를 해가지고 더 파워풀한 일을 특히 AI에 연결되는 해석을 할 수 있는 일로 하는 일의 구성 부분을 조금 느껴보는 이런 실습으로 구성할 수 있는 게 준비되어 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_16.wav|lecs|[KO] 그래서 전체적으로 스마트 액스 랩스 미니라는 풀 셀렉션 중에 저희가 몇 가지를 핵심적인 걸 줄여서 진행하는 게 이번 강좌 스타 무게의 실습이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_17.wav|lecs|[KO] 그래서 어떤 랩들을 골라서 저희가 스타 무게를 했는지 한번 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_18.wav|lecs|[KO] 저희가 지금 6개의 랩을 한번 골라봤습니다.[KO]
./segmented_character_voice/lecs/lecs_20_19.wav|lecs|[KO] 지금 말씀드렸던 전체 스마트 액스 미니에서 6개의 랩을 골라서 지금 보면은 이 GitHub 폴더에 가면 스마트 액스 미니-무기라고 하는 폴더 쪽에 기본적인 자료들을 두었고요.[KO]
./segmented_character_voice/lecs/lecs_20_20.wav|lecs|[KO] 여기에 6개의 랩들의 이름을 한번 보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_21.wav|lecs|[KO] 넘버원 박스, 넘버투 인터커넥트, 넘버쓰리 타워, 넘버포 아이오티, 넘버파이브 클러스터, 넘버식스, 언엘식스.[KO]
./segmented_character_voice/lecs/lecs_20_22.wav|lecs|[KO] 결국은 어떤 박스를 이용해서 기본적으로 OS를 세팅하고 준비하는 과정.[KO]
./segmented_character_voice/lecs/lecs_20_23.wav|lecs|[KO] 그 다음에 이걸 네트워크로 연동되는 넘버투 인터커넥트, 그 다음에 타워에서 그걸 중앙에서 관리할 수 있게 바라볼 수 있는 그런 실습 넘버쓰리 타워.[KO]
./segmented_character_voice/lecs/lecs_20_24.wav|lecs|[KO] 넘버포 아이오티적인 부분에 디바이스를 좀 더 붙이는 넘버포.[KO]
./segmented_character_voice/lecs/lecs_20_25.wav|lecs|[KO] 그 다음에 박스들을 연결해서 클러스터를 만드는 부분으로 하고 넘버파이브 클러스터.[KO]
./segmented_character_voice/lecs/lecs_20_26.wav|lecs|[KO] 마지막으로 얘를 가지고 언엘식스를 해서 해석을 할 수 있는 부분을 시험적으로 간단하게 해보는 게 넘버식스 언엘식스입니다.[KO]
./segmented_character_voice/lecs/lecs_20_27.wav|lecs|[KO] 각각의 내용에 대해서 좀 더 자세하게 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_28.wav|lecs|[KO] 넘버원이라는 랩은 박스입니다.[KO]
./segmented_character_voice/lecs/lecs_20_29.wav|lecs|[KO] 기본적으로 저희가 익히실 내용은 어떤 시스템, 저희가 피지컬 머신에 대해서[KO]
./segmented_character_voice/lecs/lecs_20_30.wav|lecs|[KO] 오픈 버추얼 스위치라는 가상적인 스위치 엔터티를 놓고 KVM이나 하이퍼발전에서 가상적인 머신을 창조하고[KO]
./segmented_character_voice/lecs/lecs_20_31.wav|lecs|[KO] 더욱 더 런타임을 이네브로 시켜서 컨테이너가 돌 수 있게 만드는[KO]
./segmented_character_voice/lecs/lecs_20_32.wav|lecs|[KO] 결국은 어떤 피지컬한 박스에 버추얼 머신, 그 다음에 컨테이너가 할 수 있는 걸 실제부적으로 만들어보는[KO]
./segmented_character_voice/lecs/lecs_20_33.wav|lecs|[KO] 그 매개체의 연결을 버추얼 스위치라는 매개체를 통해서 하는 게 넘버원 박스 랩이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_34.wav|lecs|[KO] 넘버2 인터커넥트 랩에서는 저희가 이런 걸 해보려고 합니다.[KO]
./segmented_character_voice/lecs/lecs_20_35.wav|lecs|[KO] 저희가 지금 박스들이 여러 개의 박스들이 연결됐으면 좋겠다.[KO]
./segmented_character_voice/lecs/lecs_20_36.wav|lecs|[KO] 그래서 저희가 파이라고 하는 부분, 라즈베리 파이, 정확하게 라즈베리 파이라고 하는[KO]
./segmented_character_voice/lecs/lecs_20_37.wav|lecs|[KO] 많이 쓰이는 소규모 싱글보드 컴퓨터가 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_20_38.wav|lecs|[KO] 그게다가 누그라고 하는 미니 PC, 이런 것들을 연결해서[KO]
./segmented_character_voice/lecs/lecs_20_39.wav|lecs|[KO] 아이오티를 대응하는 어떤 파이하고, 그 다음에 지금 저희 하는 엣지 클라우드 이런 부분의 개념을 살짝 갖고 있는[KO]
./segmented_character_voice/lecs/lecs_20_40.wav|lecs|[KO] 아이오티하고 클라우드의 연결 중앙 정도에 있는 누그, 그 다음에 그걸 뒤에서 송지하는 타워들을 기본적으로 세팅하고[KO]
./segmented_character_voice/lecs/lecs_20_41.wav|lecs|[KO] 이 안쪽에다가 가상화도 일부 이네브로 시키고, 그 다음에 컨테이너가 쭉 연결돼서[KO]
./segmented_character_voice/lecs/lecs_20_42.wav|lecs|[KO] 이 연결을 확인하는 거죠. 그래서 첫 번째는 피지컬하게 얘네들을 연결시키고[KO]
./segmented_character_voice/lecs/lecs_20_43.wav|lecs|[KO] 저희가 네트워크적으로 피지컬에 선을 꽂아서 얘네들이 서로 대화할 수 있고 핑이 되고,[KO]
./segmented_character_voice/lecs/lecs_20_44.wav|lecs|[KO] 그 다음에 이 사이에서 어떤 대역복이 나오는지 퍼포먼스 테스트도 하고 하는 것들을 진행하고요.[KO]
./segmented_character_voice/lecs/lecs_20_45.wav|lecs|[KO] 그 다음에 그 위에서 가상 머신 상태에서도 똑같이 안쪽에서 피지컬한 길을 통해서[KO]
./segmented_character_voice/lecs/lecs_20_46.wav|lecs|[KO] 가상적인 길을 통해서 다시 하는 연결을 다시 한번 해보고[KO]
./segmented_character_voice/lecs/lecs_20_47.wav|lecs|[KO] 또 다시 그걸 한 번 더 레일을 올려서 컨테이너 수준에서 반복해보는[KO]
./segmented_character_voice/lecs/lecs_20_48.wav|lecs|[KO] 연결을 피지컬한 레벨, 버추얼한 레벨, 컨테이너 수준에서 다 확인하는 걸 실습해보는 게[KO]
./segmented_character_voice/lecs/lecs_20_49.wav|lecs|[KO] 넘버2 인터커넥트 랩이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_50.wav|lecs|[KO] 넘버3 타워 랩은 기본적으로 관제탑이라고 하는 타워라는 부분에 집중을 하는 거예요.[KO]
./segmented_character_voice/lecs/lecs_20_51.wav|lecs|[KO] 관제탑 입장에서 현재 아이오티 있는 박스가 어떤 상태인지를 저희가 확인해서 보고받아서[KO]
./segmented_character_voice/lecs/lecs_20_52.wav|lecs|[KO] 그 상태를 파악할 수 있고요. 그걸 갖다가 아이오티 박스의 데이터를 눅을 통해 수집하고[KO]
./segmented_character_voice/lecs/lecs_20_53.wav|lecs|[KO] 눅이 수집한 데이터를 보고하면 그걸 가지고 상태를 비주얼화해서 관제탑에서 상황을 계속 보고 있는 거죠.[KO]
./segmented_character_voice/lecs/lecs_20_54.wav|lecs|[KO] 이렇게 할 수 있는 일을 해보는 게 기본적으로 타워 랩의 핵심 내용이고요.[KO]
./segmented_character_voice/lecs/lecs_20_55.wav|lecs|[KO] 타워가 관리를 할 수 있는 준비를 하는 어떤 그런 상황을 정리하는 게 되죠.[KO]
./segmented_character_voice/lecs/lecs_20_56.wav|lecs|[KO] 그래서 여기서는 좀 더 관제 중에서 관자의 해각, 모니터 쪽에 강조를 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_57.wav|lecs|[KO] 모니터를 해서 아이오티에서 데이터를 준비하면 그 데이터를 갖다가 이 배달부가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_58.wav|lecs|[KO] 배달부 중에서 저희가 굉장히 주목하는 배달부인 카프카라고 하는 굉장히 효율적인 배달부가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_59.wav|lecs|[KO] 배달부를 통해서 이 배달부를 도커 상태로 투입을 해서[KO]
./segmented_character_voice/lecs/lecs_20_60.wav|lecs|[KO] 걔네들이 실제로 배달을 완전하게 하고 배달이 되면 타워에 있는 인프라 집이라는 저장소에 저장이 되고[KO]
./segmented_character_voice/lecs/lecs_20_61.wav|lecs|[KO] 저장이 되면 그라파나라고 하는 어떤 비주얼화해서 통해서[KO]
./segmented_character_voice/lecs/lecs_20_62.wav|lecs|[KO] 지금 현재 라즈베리 파이들의 상태들을 확인할 수 있는[KO]
./segmented_character_voice/lecs/lecs_20_63.wav|lecs|[KO] 그래서 끝단에 있는 어떤 것들의 아이오티 디바이스의 상태나 여러 가지를[KO]
./segmented_character_voice/lecs/lecs_20_64.wav|lecs|[KO] 관제탑에서 통제할 수 있는 것을 느껴보는 이런 실습이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_65.wav|lecs|[KO] 넘버 쓰리 타워 랩이었습니다.[KO]
./segmented_character_voice/lecs/lecs_20_66.wav|lecs|[KO] 다음 아이오티 랩에서는 금방 말씀드렸던 타워에서 기본적으로 아이오티 디바이스를 체크한다는 부분까지 했는데[KO]
./segmented_character_voice/lecs/lecs_20_67.wav|lecs|[KO] 이번에 좀 실제적인 일을 좀 시켜야 되니까 실제적인 뭐죠?[KO]
./segmented_character_voice/lecs/lecs_20_68.wav|lecs|[KO] 아이오티 디바이스가 기본적으로 센서가 붙어서[KO]
./segmented_character_voice/lecs/lecs_20_69.wav|lecs|[KO] 센서값을 갖다가 기본적으로 확보하고 이 센서값을 갖다가[KO]
./segmented_character_voice/lecs/lecs_20_70.wav|lecs|[KO] 가운데 있는 누그라고 하는 웹서버를 통해서[KO]
./segmented_character_voice/lecs/lecs_20_71.wav|lecs|[KO] 기본적으로 모아가지고 다시 타워가 볼 수 있게 하는[KO]
./segmented_character_voice/lecs/lecs_20_72.wav|lecs|[KO] 좀 더 서비스적인 개념이 되죠.[KO]
./segmented_character_voice/lecs/lecs_20_73.wav|lecs|[KO] 아이오티 온도값을 갖다가 수집을 해서 서비스적으로 보여주는 일을 하는데[KO]
./segmented_character_voice/lecs/lecs_20_74.wav|lecs|[KO] 타워에서 그 서비스를 즐긴다 아니면 그냥 활용해본다[KO]
./segmented_character_voice/lecs/lecs_20_75.wav|lecs|[KO] 이렇게 되는 그런 실습을 하는 게 아이오티 랩의 핵심이 될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_20_76.wav|lecs|[KO] 다섯 번째 랩으로 하고 있는 것은 클러스터입니다.[KO]
./segmented_character_voice/lecs/lecs_20_77.wav|lecs|[KO] 클러스터라는 주제는 여러 가지 있는 피지컬 박스를 모아야 되겠죠.[KO]
./segmented_character_voice/lecs/lecs_20_78.wav|lecs|[KO] 그래서 저희가 이번에는 여기서는 누그들을 갖다가 모으는 상태로 구성을 해봤습니다.[KO]
./segmented_character_voice/lecs/lecs_20_79.wav|lecs|[KO] 실제로 누그를 꼭 써야 되는 건 아니고 다른 어떤 머신을 써서 상관없습니다.[KO]
./segmented_character_voice/lecs/lecs_20_80.wav|lecs|[KO] 하여튼 두 개의 박스들을 갖다가 한 덩어리로 일단 모아보자.[KO]
./segmented_character_voice/lecs/lecs_20_81.wav|lecs|[KO] 클러스터링 방법에는 굉장히 다양한 방법이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_82.wav|lecs|[KO] 클러스터링 방법에서 다양한 방법이 있는데 저희가 추천해 보고[KO]
./segmented_character_voice/lecs/lecs_20_83.wav|lecs|[KO] 한번 실습해서 권하는 방법은 컨테이너를 기반으로 해가지고[KO]
./segmented_character_voice/lecs/lecs_20_84.wav|lecs|[KO] 이 박스들을 모아가지고 한번에 쓸 수 있는 이 방법을[KO]
./segmented_character_voice/lecs/lecs_20_85.wav|lecs|[KO] 시중에서 저희가 설명드리고 실습을 해보도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_86.wav|lecs|[KO] 다시 한번 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_87.wav|lecs|[KO] 실제로 자원들을 갖다가 피지컬한 어떤 누그들을[KO]
./segmented_character_voice/lecs/lecs_20_88.wav|lecs|[KO] 뭐지 네트워크들을 기본적으로 연동을 하신 다음에[KO]
./segmented_character_voice/lecs/lecs_20_89.wav|lecs|[KO] 이 컨테이너, 오케스트라의 입장에서 얘가 한 덩어리가 되도록 만드는[KO]
./segmented_character_voice/lecs/lecs_20_90.wav|lecs|[KO] 그러니까 컨테이너의 입장에서 클러스터가 되도록 만드는[KO]
./segmented_character_voice/lecs/lecs_20_91.wav|lecs|[KO] 그런 클러스팅을 세팅하는 일이 된다.[KO]
./segmented_character_voice/lecs/lecs_20_92.wav|lecs|[KO] 그러면 결국 컨테이너가 이 클러스터를 갖다가 통제할 수 있어야 돼.[KO]
./segmented_character_voice/lecs/lecs_20_93.wav|lecs|[KO] 컨테이너 오케스트레이션을 하는 Kubernetes라고 하는[KO]
./segmented_character_voice/lecs/lecs_20_94.wav|lecs|[KO] 오케스트레이션 엔터티가 기본적으로[KO]
./segmented_character_voice/lecs/lecs_20_95.wav|lecs|[KO] 이 박스들을 갖다가 통제할 수 있게 만들어야 되고[KO]
./segmented_character_voice/lecs/lecs_20_96.wav|lecs|[KO] 이 통제할 수 있는 컨테이너 오케스트레이션 박스들을[KO]
./segmented_character_voice/lecs/lecs_20_97.wav|lecs|[KO] 뒤에 있는 타워에 있는 Kubernetes 마스터라고 하는[KO]
./segmented_character_voice/lecs/lecs_20_98.wav|lecs|[KO] 어떤 마스터, 대장인 거죠.[KO]
./segmented_character_voice/lecs/lecs_20_99.wav|lecs|[KO] 대장이 이 박스들의 사이트에 있는 실제로 흩어져 있는 박스들의[KO]
./segmented_character_voice/lecs/lecs_20_100.wav|lecs|[KO] 기본적으로 Kubernetes에 이내물을 지켜가지고[KO]
./segmented_character_voice/lecs/lecs_20_101.wav|lecs|[KO] 이 마스터하고 이 노드들의 관계를 통해서[KO]
./segmented_character_voice/lecs/lecs_20_102.wav|lecs|[KO] 리소스의 풀을 만들고 클러스가 되는[KO]
./segmented_character_voice/lecs/lecs_20_103.wav|lecs|[KO] 굉장히 미래지향적이고 라이트웨어에 있어서 굉장히 효과적으로[KO]
./segmented_character_voice/lecs/lecs_20_104.wav|lecs|[KO] 조율할 수 있는 클러스터 방법을 살펴보는 실습이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_105.wav|lecs|[KO] 이 클러스터를 금방 말씀드렸던 클러스터를 가지고 활용해서[KO]
./segmented_character_voice/lecs/lecs_20_106.wav|lecs|[KO] 어넬리틱을 한번 해보자.[KO]
./segmented_character_voice/lecs/lecs_20_107.wav|lecs|[KO] 하여튼 박스들이 모였으니까 파워풀이, 두배의 힘이 생겼잖아요.[KO]
./segmented_character_voice/lecs/lecs_20_108.wav|lecs|[KO] 두배의 힘을 이용해서 하여튼 분석을 하는 잡을 한번 해보자.[KO]
./segmented_character_voice/lecs/lecs_20_109.wav|lecs|[KO] 어떻게 시킬 거냐, 분석 잡을.[KO]
./segmented_character_voice/lecs/lecs_20_110.wav|lecs|[KO] 지금 여기 부분에서 요즘 재미있게 많이 나오는 머신러닝,[KO]
./segmented_character_voice/lecs/lecs_20_111.wav|lecs|[KO] 그 다음에 딥러닝에서 많이 나오는 텐서플로어라고 하는 방법을[KO]
./segmented_character_voice/lecs/lecs_20_112.wav|lecs|[KO] 저희가 사용하는 걸 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_113.wav|lecs|[KO] 텐서플로어라는 기본적으로 펑션 자료를[KO]
./segmented_character_voice/lecs/lecs_20_114.wav|lecs|[KO] 지금 말씀하신 컨테이너가 이내물되어 있는 박스를[KO]
./segmented_character_voice/lecs/lecs_20_115.wav|lecs|[KO] 저희가 투입을 하고요.[KO]
./segmented_character_voice/lecs/lecs_20_116.wav|lecs|[KO] 투입을 한 상태에서 이걸 Kubernetes의 오케스트레이션을 통제해서[KO]
./segmented_character_voice/lecs/lecs_20_117.wav|lecs|[KO] 텐서플로어가 동작하도록 만듭니다.[KO]
./segmented_character_voice/lecs/lecs_20_118.wav|lecs|[KO] 이거 위해서 저희가 추가적인 어떤 도구를 하나 더 투입을 합니다.[KO]
./segmented_character_voice/lecs/lecs_20_119.wav|lecs|[KO] 큐브플로어라고 하는 Kubernetes 컨테이너 오케스트레이션하고[KO]
./segmented_character_voice/lecs/lecs_20_120.wav|lecs|[KO] 텐서플로어를 연결해서 딥러닝 워크로드를[KO]
./segmented_character_voice/lecs/lecs_20_121.wav|lecs|[KO] Kubernetes 상태로 돌릴 수 있게 하는 것들을 통해서[KO]
./segmented_character_voice/lecs/lecs_20_122.wav|lecs|[KO] 어넬리틱 랩이 돌도록 만드는 게 될 거고요.[KO]
./segmented_character_voice/lecs/lecs_20_123.wav|lecs|[KO] 이걸 유저들이 쓸 수 있게 해서 유저들은 이걸[KO]
./segmented_character_voice/lecs/lecs_20_124.wav|lecs|[KO] 자기가 쓰는 노트북 환경, 요즘 많이 얘기하는[KO]
./segmented_character_voice/lecs/lecs_20_125.wav|lecs|[KO] 주피터라는 노트북이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_126.wav|lecs|[KO] 주피터라고 하는 딥러닝을 먼저 통제하는 노트북에다[KO]
./segmented_character_voice/lecs/lecs_20_127.wav|lecs|[KO] 이렇게 한번 해보세요라고 하면 실제로 그거에 따라서[KO]
./segmented_character_voice/lecs/lecs_20_128.wav|lecs|[KO] 이 텐서플로어가 투입이 되고 그 다음 텐서플로어가[KO]
./segmented_character_voice/lecs/lecs_20_129.wav|lecs|[KO] 워크가 일을 하면서 다시 리소스를 써가지고[KO]
./segmented_character_voice/lecs/lecs_20_130.wav|lecs|[KO] 머신러닝 계산을 진행하는 이런 어넬리틱을 할 수 있는[KO]
./segmented_character_voice/lecs/lecs_20_131.wav|lecs|[KO] 이걸 실습해보는 랩이 넘버식스 어넬리틱 랩이라고 합니다.[KO]
./segmented_character_voice/lecs/lecs_20_132.wav|lecs|[KO] 이렇게 해서 전체적으로 6개의 랩을 저희가 말씀드렸던[KO]
./segmented_character_voice/lecs/lecs_20_133.wav|lecs|[KO] 박스 인터커넥트 타워, 아이오티, 클러스터, 어넬리틱,[KO]
./segmented_character_voice/lecs/lecs_20_134.wav|lecs|[KO] 6개의 랩을 실습해보는 걸 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_135.wav|lecs|[KO] 지금 같은 랩을 하는데 전반적으로 랩을 준비하는 부분에서[KO]
./segmented_character_voice/lecs/lecs_20_136.wav|lecs|[KO] 저희가 랩을 시작하기 위해서는 몇 가지 준비가 필요한데[KO]
./segmented_character_voice/lecs/lecs_20_137.wav|lecs|[KO] 어떤 부분은 꼭 필요하고 어떤 부분은 뭐지?[KO]
./segmented_character_voice/lecs/lecs_20_138.wav|lecs|[KO] 레커먼드가 되는지 이런 것들을 구분해서 설명을 드려보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_139.wav|lecs|[KO] 그래서 랩을 셋업을 해야 되는데 어떤 식으로 전체로 준비하면 좋은지[KO]
./segmented_character_voice/lecs/lecs_20_140.wav|lecs|[KO] 한번 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_141.wav|lecs|[KO] 기본적으로 랩을 셋업 하시기 위해서는 저희가 추천드리는 방법은[KO]
./segmented_character_voice/lecs/lecs_20_142.wav|lecs|[KO] 파이라고 하는 싱글 보드 컴퓨터는 하나 정도 갖고 계셔서[KO]
./segmented_character_voice/lecs/lecs_20_143.wav|lecs|[KO] 지금 아이오티를 상대하는 어떤 박스로 사용했으면 좋겠다[KO]
./segmented_character_voice/lecs/lecs_20_144.wav|lecs|[KO] 이렇게 말씀드리고 있고요.[KO]
./segmented_character_voice/lecs/lecs_20_145.wav|lecs|[KO] 두 번째는 룩이라든지 아니면 어떤 PC도 상관없습니다.[KO]
./segmented_character_voice/lecs/lecs_20_146.wav|lecs|[KO] 기본적으로 리뉴스가 될 수 있는 적당한 파워를 갖고 있는[KO]
./segmented_character_voice/lecs/lecs_20_147.wav|lecs|[KO] 그래도 메모리가 조금 있으면 좋을 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_20_148.wav|lecs|[KO] 저희가 가성화를 조금 해야 되기 때문에 메모리 수요는 조금 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_149.wav|lecs|[KO] 적당한, 지금 샘플에서는 16기가 정도면 충분하고요.[KO]
./segmented_character_voice/lecs/lecs_20_150.wav|lecs|[KO] 그 정도면 굉장히 파워풀하게 가성화를 서포트할 수 있으니까 해주고[KO]
./segmented_character_voice/lecs/lecs_20_151.wav|lecs|[KO] 룩 PC, 미니 PC, 그리고 그 다음에 보통 많이 갖고 계신 노트북을 통해서[KO]
./segmented_character_voice/lecs/lecs_20_152.wav|lecs|[KO] 타워 역할을 하도록 만드시면 좋을 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_20_153.wav|lecs|[KO] 혹시 여분의 PC가 있으시면 그걸 써서 타워를 쓰셔도 좋습니다.[KO]
./segmented_character_voice/lecs/lecs_20_154.wav|lecs|[KO] 그리고 이런 기기 박스들을 연결하게 해서 스위치를 하나 준비하셔야 되고요.[KO]
./segmented_character_voice/lecs/lecs_20_155.wav|lecs|[KO] 스위치는 유선 스위치를 쓰시는 것도 좋고요.[KO]
./segmented_character_voice/lecs/lecs_20_156.wav|lecs|[KO] 어려우시면 무선 와이파이를 써서 하는 것도 대부분 문제없습니다.[KO]
./segmented_character_voice/lecs/lecs_20_157.wav|lecs|[KO] 왜냐하면 저희가 하는 실습 실험들이 굉장히 데이터를 많이 움직이는[KO]
./segmented_character_voice/lecs/lecs_20_158.wav|lecs|[KO] 고성능 네트워크를 필요하는 게 아니라 간단한 실습 세팅을 해서[KO]
./segmented_character_voice/lecs/lecs_20_159.wav|lecs|[KO] 연결이 되는 것을 확인하고 하는 쪽에 집중을 하고 있기 때문에[KO]
./segmented_character_voice/lecs/lecs_20_160.wav|lecs|[KO] 유선 스위치를 통해서 네트워크를 하셔도 되고 무선으로 하셔도 됩니다.[KO]
./segmented_character_voice/lecs/lecs_20_161.wav|lecs|[KO] 그러니까 집에 있는 와이파이를 통해서 파이하고 룩하고 랩탑을 연결해도 상관없고[KO]
./segmented_character_voice/lecs/lecs_20_162.wav|lecs|[KO] 아니면 유선으로 설정하시면 조금 더 효과적으로 몇 가지 다양한 변화를 할 수 있기 때문에[KO]
./segmented_character_voice/lecs/lecs_20_163.wav|lecs|[KO] 가능하시면 유선 스위치를 하셔도 좋을 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_20_164.wav|lecs|[KO] 한 가지 더 붙여서 말씀드리면 집에 있는 와이파이들이나 이런 것들을 보면[KO]
./segmented_character_voice/lecs/lecs_20_165.wav|lecs|[KO] 4포트 정도의 유선 포트들이 있습니다. 그걸 활용하시는 방법도 사용하실 수 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_166.wav|lecs|[KO] 실제로 네트워크를 셋업하는 방법에 대해서는 저희가 어떻게 말씀을 드리느냐 하면[KO]
./segmented_character_voice/lecs/lecs_20_167.wav|lecs|[KO] 유선도 되고 무선도 되는데 가능하면 둘 다 있으면 더 좋을 것 같다 이런 말씀을 드리죠.[KO]
./segmented_character_voice/lecs/lecs_20_168.wav|lecs|[KO] 왜냐하면 실제로 보면 연장을 하고 테스트하는 부분에서[KO]
./segmented_character_voice/lecs/lecs_20_169.wav|lecs|[KO] IoT나 이런 부분을 위해서 저희가 무선 네트워킹도 가끔씩 연습하실 필요가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_170.wav|lecs|[KO] 그래서 그런 것들 갖다가 준비도 하고 필요에 따라서 유선 그래서 필요에 따라서 유선 네트워크를 통해서[KO]
./segmented_character_voice/lecs/lecs_20_171.wav|lecs|[KO] 스위치 연결을 써가지고 특정한 일을 하기도 하고 다른 일들은 무선으로는 데이터를 하고[KO]
./segmented_character_voice/lecs/lecs_20_172.wav|lecs|[KO] 지금 그래서 이 말을 갖다가 와이어리스 데이터 네트워크 이런 식으로 부를 수가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_173.wav|lecs|[KO] 그 다음에 와이어리스 컨트롤 네트워크 이런 식으로도 불러야 될 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_20_174.wav|lecs|[KO] 그래서 이런 식으로 부르는 부분을 갖다가 해서 어떤 둘 다를 쓸 수 있는 상태로 세팅을 해서 쓰시는 것도 좋지만[KO]
./segmented_character_voice/lecs/lecs_20_175.wav|lecs|[KO] 둘 중에 하나씩을 하셔도 문제 없을 것 같다 이렇게 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_176.wav|lecs|[KO] 이상같이 저희 실습하고 하는 실습을 어떻게 준비하는지에 대해서 대충 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_20_177.wav|lecs|[KO] 한번 정리해볼까요.[KO]
./segmented_character_voice/lecs/lecs_20_178.wav|lecs|[KO] 기본적으로 지금 파이라고 하는 어떤 작은 컴퓨터 그 다음에 일반적으로 미니 PC 정도 아니면[KO]
./segmented_character_voice/lecs/lecs_20_179.wav|lecs|[KO] 뭐 데스크탑들 그 다음에 노트북들 그리고 스위치 무선 AP 통해서 환경을 세팅해야 된다는 말씀을 드렸고요.[KO]
./segmented_character_voice/lecs/lecs_20_180.wav|lecs|[KO] 기본적으로 환경을 하면서 실질적인 네트워크를 잘 정리해서 실습을 하도록 하는 부분에서[KO]
./segmented_character_voice/lecs/lecs_20_181.wav|lecs|[KO] 약간의 융통성도 있고 변화도 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_182.wav|lecs|[KO] 그걸 잘 확인하시고 진행하시면 처음에 어려움을 겪지 않으실 걸로 예상을 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_183.wav|lecs|[KO] 그렇지만 실제로 진행하다 보면 여러 가지 문제들도 있을 수 있고[KO]
./segmented_character_voice/lecs/lecs_20_184.wav|lecs|[KO] 그런 부분에서는 저희 mini.at.smartxkr 이라고 하는 주소로 문의를 주시면[KO]
./segmented_character_voice/lecs/lecs_20_185.wav|lecs|[KO] 그게 답변하도록 하는 체제를 갖고 있으니까 그걸 활용해 주시면 좋을 것 같고요.[KO]
./segmented_character_voice/lecs/lecs_20_186.wav|lecs|[KO] 그걸 통해서 재미있게 했던 실습을 통해서 어떻게든 소화를 하셨으면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_187.wav|lecs|[KO] 마지막으로 한 가지만 더 소개를 드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_188.wav|lecs|[KO] 저희가 이런 자료를 준비하기 위해서 많은 사람들이 지금 같이 협력을 해서 진행을 했습니다.[KO]
./segmented_character_voice/lecs/lecs_20_189.wav|lecs|[KO] 제가 지금 말씀하고 있는 제 이름을 사실 말씀을 안 드렸었네요.[KO]
./segmented_character_voice/lecs/lecs_20_190.wav|lecs|[KO] 광주학교 김종훈 교수입니다. 안내가 되고 있으니까요.[KO]
./segmented_character_voice/lecs/lecs_20_191.wav|lecs|[KO] 그리고 저희 많은 학생들이 같이 협력을 해서 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_192.wav|lecs|[KO] 그래서 여러 가지 조교들도 같이 하고 그 다음에 저희 학부에서 실습을 해본 친구들도[KO]
./segmented_character_voice/lecs/lecs_20_193.wav|lecs|[KO] 이 과정을 한번 따라 본 친구들도 도움을 줘서 여러 가지 자료들을 같이 정리하고[KO]
./segmented_character_voice/lecs/lecs_20_194.wav|lecs|[KO] 보완하고 계속 업그레이드하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_20_195.wav|lecs|[KO] 그래서 그런 사람들에게도 감사를 드리면서 저희 실습을 즐겨주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_20_196.wav|lecs|[KO] 예 이상으로 마치겠습니다. 감사합니다.[KO]
./segmented_character_voice/lecs/lecs_4_0.wav|lecs|[KO] 안녕하십니까. 오늘은 챕터2 컴퓨터 시스템과 오퍼레이트 시스템 소프트웨어에 대해서 공부를 해보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_1.wav|lecs|[KO] 첫 번째로 컴퓨터 시스템에 대해서 저희가 어떤 주제를 다뤄볼 거냐면 컴퓨터 시스템이라는 부분이 기본적으로 동작할 수 있게 만들어내는[KO]
./segmented_character_voice/lecs/lecs_4_2.wav|lecs|[KO] 하드웨어랑 소프트웨어를 붙여서 만들어내는 운영체제라고 부르는 것이죠. 운영체제가 오퍼레이트 시스템에 대해서 보는 문제를 다룰 거고요.[KO]
./segmented_character_voice/lecs/lecs_4_3.wav|lecs|[KO] 이 문제를 다루기 전에 저희가 생각했던 전체적인 컴퓨터 시스템을 이해하는 어떤 구조적인 부분에 대해서 한번 짚고 넘어가 보도록 하겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_4.wav|lecs|[KO] 컴퓨터 시스템이라는 것은 저희가 컴퓨터라는 부분에 어떤 하드웨어가 지금 말씀드렸던 오퍼레이트 시스템을 가지고 어떤 동작할지를 어떤 상태에서 어떤 장소에 놓여서[KO]
./segmented_character_voice/lecs/lecs_4_5.wav|lecs|[KO] 저희가 사용자가 쓸 수 있게 제공되고 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_6.wav|lecs|[KO] 이러한 컴퓨터를 요즘은 저희가 어떻게 사용을 하게 되면 저희가 네트워크라는 수단을 통해서 서로 연결돼서 인터코넥트 해서 컴퓨터를 원하는 대로 연결할 수 있고 연결된 상태의 컴퓨터를[KO]
./segmented_character_voice/lecs/lecs_4_7.wav|lecs|[KO] 저희가 컴퓨터한테 이것 좀 해줘 저것 좀 해줘 라고 하는 어떤 것을 부탁을 하는 거죠.[KO]
./segmented_character_voice/lecs/lecs_4_8.wav|lecs|[KO] 그래서 그걸 부탁하는 것에 저희가 펑션이라는 단어를 쓰겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_9.wav|lecs|[KO] 어떤 이러한 기능을 하는 소프트웨어를 담아서 역할을 해줘 이렇게 부르겠죠.[KO]
./segmented_character_voice/lecs/lecs_4_10.wav|lecs|[KO] 그래서 컴퓨터 시스템이라는 것은 어떤 시스템이 있으면 그걸 저희가 오퍼레이트 시스템을 가지고 저희가 말을 알아들을 수 있도록 준비를 해놓고[KO]
./segmented_character_voice/lecs/lecs_4_11.wav|lecs|[KO] 그다음에 기업은 네트워크로 연결을 한 상태에서 저희가 원하는 일을 아무 데서나 편리하게 시킬 수 있는 이런 모드로 쓰는 개념이 되겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_12.wav|lecs|[KO] 그걸 하는 역할을 할 수 있는 가장 핵심적인 요소인 컴퓨터 시스템을 준비하는 소프트웨어, 오퍼레이트 시스템에 대해서 오늘 중점적으로 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_13.wav|lecs|[KO] 그러면 지금 말씀드렸던 오퍼레이트 시스템에 대해서 저희가 어떻게 좀 살펴보면 하드웨어하고 소프트웨어를 연결시키는 매개체를 저희가 오퍼레이트 시스템에 불러야 되는데[KO]
./segmented_character_voice/lecs/lecs_4_14.wav|lecs|[KO] 조금 더 제대로 문제를 연결하기 위해서 하드웨어라는 부분이 있고요. 하드웨어에다가 소프트웨어를 바로 올릴 수 있는 부분은 아닙니다.[KO]
./segmented_character_voice/lecs/lecs_4_15.wav|lecs|[KO] 그래서 이 하드웨어하고 소프트웨어를 연결해서 하드웨어의 어떤 다양한 디바이스를 하겠죠. 물리적인 디바이스를 이해할 수 있게 하는 가운데 청을 붙입니다.[KO]
./segmented_character_voice/lecs/lecs_4_16.wav|lecs|[KO] 그래서 저희가 지금 하드, 그 다음에 펌, 소프트 이런 아주 하드한 부분에서 펌한 부분이 잠깐 단호한 부분이 소프트하게 연결되는 이 펌웨어라는 부분이[KO]
./segmented_character_voice/lecs/lecs_4_17.wav|lecs|[KO] 저희가 갖고 있는 컴퓨터의 어떤 디바이스들을 오퍼레이트 시스템에 연결할 수 있도록 하는 어떤 부분이 한 층에 깔리고요.[KO]
./segmented_character_voice/lecs/lecs_4_18.wav|lecs|[KO] 이걸 통해서 오퍼레이트 시스템을 실제로 자리 잡게 만들고 오퍼레이트 시스템이 어떤 유저가 원하는 일들을 해주게 만들고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_19.wav|lecs|[KO] 여기서 다른 한 층을 또 다시 설명을 드려야 되는데 오퍼레이트 시스템 부분에다가 또 저희가 하는 어플리케이션까지 사이에 미들, 가운데 끼워가지고 하는 미들웨어가 끼워서 어떤 층을 가리고 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_20.wav|lecs|[KO] 그래서 지금 다시 정리해서 말씀을 드리면 어떤 하드웨어가 있으면 하드웨어, 펌웨어가 하드웨어와 OS를 연결해 주기 위해서 한번 구성해서 역할을 하고 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_21.wav|lecs|[KO] 그 다음에 오퍼레이트 시스템이 실제로 동작하면서 저희가 하는 일을 기본적으로 받쳐주는데 거기에서 유저가 하는 어플리케이션, 다양한 어플리케이션들에서 연결되는 어떤 카모난 부분을 도와주는 미들웨어 층들이 들어가서 어플리케이션을 서포트하는 이런 상태로 연결될 것 같습니다.[KO]
./segmented_character_voice/lecs/lecs_4_22.wav|lecs|[KO] 이런 그림으로 전체적인 그림을 보시면서 오퍼레이트 시스템의 위치를 일단은 확인하고 이해를 해주시면 좋겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_23.wav|lecs|[KO] 그러면 오퍼레이트 시스템 자체에 대해서 다시 정의를 한번 내려보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_24.wav|lecs|[KO] 쉽습니까? 쉽습니까? 간단하게 보면 하드웨어가 어플리케이션 사이에서 오퍼레이트 시스템에 존재한다.[KO]
./segmented_character_voice/lecs/lecs_4_25.wav|lecs|[KO] 아까 말씀했던 펌웨어나 미들웨어가 서포트를 받지만 크게 봤을 때는 하드웨어가 어플리케이션 사이에서 오퍼레이트 시스템이 존재하고요.[KO]
./segmented_character_voice/lecs/lecs_4_26.wav|lecs|[KO] 오퍼레이트 시스템을 어떻게 정의하느냐? 오퍼레이트 시스템은 컴퓨터의 하드웨어가 소프트웨어의 리소스를 전체적으로 통제해서 매니저해서[KO]
./segmented_character_voice/lecs/lecs_4_27.wav|lecs|[KO] 사용자가 원하는 서비스를 제공할 수 있게 만드는 어떤 공통의 서비스를 제공할 수 있게 만드는 어떤 그런 소프트웨어적 엔터티를 저희가 OS라고 부릅니다.[KO]
./segmented_character_voice/lecs/lecs_4_28.wav|lecs|[KO] 저희가 알고 있는 다양한 뭐죠? 리눅스, 윈도우즈, 그 다음에 안드로이드 이런 다양한 OS들이 지금 현재 이 OS들의 어떤 이름으로 되는 거고요.[KO]
./segmented_character_voice/lecs/lecs_4_29.wav|lecs|[KO] 그래서 이 OS에 대해서 기본적으로 개념을 바꿔요.[KO]
./segmented_character_voice/lecs/lecs_4_30.wav|lecs|[KO] 이 개념하에서 OS가 실제로 보면 갖고 있는 어떤 소프트웨어인데 이 소프트웨어는 내부적으로는 다시 또 체계를 갖고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_31.wav|lecs|[KO] 그 체계에 대해서 가장 핵심적인 체계가 일단 하드웨어를 연결하기 위해서 하드웨어 부분을 통제해서 가장 중요한 하드웨어를 아무나 잘못 사용하지 않도록 만들어내는 어떤 그런 연결체계.[KO]
./segmented_character_voice/lecs/lecs_4_32.wav|lecs|[KO] 그래서 가장 핵심적인 부분, 그래서 커널이라는 부분이 존재합니다. 커널이라는 부분을 통제해서 하드웨어 연결을 갖다가 기본적으로 인터페이징을 정리하고요.[KO]
./segmented_character_voice/lecs/lecs_4_33.wav|lecs|[KO] 커널을 중심으로 해서 어떤 사용자의 권한들을 조금씩 조금씩 풀어서 링 0, 링 1, 링 2, 링 3 해가지고 점점 이제 권한이 점점 사용자가 하면서 권한이 점점 줄어드는 거죠.[KO]
./segmented_character_voice/lecs/lecs_4_34.wav|lecs|[KO] 그래서 지금 커널은 저희가 하는 슈퍼바이저라고 하는 어떤 중요한 부분에서만 하는 모든 일을 할 수 있기 때문에 중요한 부분을 통제해서 사용을 하게 하고[KO]
./segmented_character_voice/lecs/lecs_4_35.wav|lecs|[KO] 나머지 링을 점점 펼쳐가면서는 더 권한이 줄어든 상태로 쓰게 하는 이런 어떤 아름대로 하드에 대한 통제권의 어떤 권한체계를 가지면서 저희가 오퍼링 시스템이 실제로 구성돼서 동작하게 됩니다.[KO]
./segmented_character_voice/lecs/lecs_4_36.wav|lecs|[KO] 그래서 커널하고 연결해서 오퍼링 시스템을 이해하는 부분까지 말씀을 드렸고요. 실제로 커널을 만들어서 오퍼링 시스템을 연결하는 부분에서 사람들의 여러가지 시도를 했었습니다.[KO]
./segmented_character_voice/lecs/lecs_4_37.wav|lecs|[KO] 그래서 어떤 말씀을 드려야 되면 실제로 커널을 만드는 방법에서 커널을 갖다가 어떤 한 덩어리 만들어서 커널이 기본적으로 하드웨어를 하는 일을 한 덩어리를 한다.[KO]
./segmented_character_voice/lecs/lecs_4_38.wav|lecs|[KO] 그래서 저희가 모널리틱한 커널이라고 부르고 있습니다. 모널리틱한 커널을 만드는 방법에서 커널을 구성하는 방법도 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_39.wav|lecs|[KO] 커널에서 모든 일을 한 덩어리 하는 것보다는 필요한 부분을 좀 가볍게 하자. 마이크로 커널에서 하는 부분을 가볍게 하고 나머지 부분은 좀 더 사용자 개념을 좀 더 뽑아내서 커널을 더 가볍게 만들고 나머지 부분에 오퍼링 시스템 하는 것들의 메이저랑 연결되는 어떤 라이브로적인 공통 부분을 넘겨서 하는 방법.[KO]
./segmented_character_voice/lecs/lecs_4_40.wav|lecs|[KO] 이렇게 하는 마이크로 커널 방법으로도 커널을 구성하는 방법이 있습니다. 또 저희가 이 두 가지 모드를 섞어서 하이브리드에서 만들어내는 방식으로도 구성을 하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_41.wav|lecs|[KO] 그래서 다시 전체적인 체계를 보면 오퍼링 시스템이라니까 그 커널의 핵심 요소가 기본 자리에 적혀 있는데 커널의 구연도 모널리틱, 마이크로 커널, 하이브리드 방식의 다양한 방식으로[KO]
./segmented_character_voice/lecs/lecs_4_42.wav|lecs|[KO] 다양한 기술적인 변화를 가지고 구성하는 요소로 발전해 왔었다는 것을 말씀드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_4_43.wav|lecs|[KO] 그럼 다음 주제로 넘어가 보겠습니다. 다음 주제는 지금 이러한 오퍼링 시스템 부분에서 저희가 주목하려고 하는 오퍼링 시스템이 여러 가지 오퍼링 시스템이 굉장히 많습니다.[KO]
./segmented_character_voice/lecs/lecs_4_44.wav|lecs|[KO] 아까 말씀드렸던 윈도우즈, 그 다음에 유닉스라는 게 있고요. 그렇지만 저희가 지금 일단은 이 컴퓨터 시스템을 요즘 이해하는 쪽에서는 유닉스라는 것보다 유닉스의 아들적인[KO]
./segmented_character_voice/lecs/lecs_4_45.wav|lecs|[KO] 리눅스라고 하는 오퍼링 시스템이 요즘 굉장히 주목을 받고 있습니다. 왜냐하면 굉장히 다양한 어떤 저희가 하는 컴퓨터 시스템들이 리눅스라는 것으로 좀 더 공통적으로 되면서 사용되는[KO]
./segmented_character_voice/lecs/lecs_4_46.wav|lecs|[KO] 형태가 있고요. 그래서 유닉스라는 버전이 어떤 유닉스의 어떤 패밀리 쪽에서 어떻게 발전됐는지를 보는 발전도라 그러는 가계도라 그러죠. 가계도를 한번 보실 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_47.wav|lecs|[KO] 그럼 굉장히 많은 어떤 패밀리들이겠죠. 그리고 사실은 다시 말씀드리면 유닉스라는 어떤 할아버지가 있고 저희가 말할 때 그 다음에 리눅스라는 아들이 있고[KO]
./segmented_character_voice/lecs/lecs_4_48.wav|lecs|[KO] 그 다음에 거기에 안드로이드하는 손자가 있고 이렇게 표현합니다. 그래서 결국 어떤 다양한 브랜치를 가지고 발전하면서 지금 현재 오퍼링 시스템들이 진화되고 발전되어 왔다.[KO]
./segmented_character_voice/lecs/lecs_4_49.wav|lecs|[KO] 그 중에서 요즘 리눅스라는 어떤 오퍼링 시스템이 굉장히 주목을 받고 있고 굉장히 확산되고 있다. 이걸 말씀드리고 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_50.wav|lecs|[KO] 그 부분에서 요즘 어떤 말을 하고 있냐면 리눅스라는 오퍼링 시스템이 현재 도처에 깔려 있고 도처로 펄쳐지고 있다고 말씀하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_51.wav|lecs|[KO] 그래서 이걸 다시 정리해 보면 리눅스 오퍼링 시스템이 도처에 깔려 있다. 그럼 어디에 깔려 있기 때문에 도처에 세상이 다 퍼지고 있다는 말을 하고 있는지 한번 살펴보겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_52.wav|lecs|[KO] 굉장히 많은 영역에서 저희가 얘기하는 굉장히 큰 슈퍼 컴퓨팅이라고 아주 큰 컴퓨터 쪽에서 리눅스의 영역이 지금 계속 확산이 되고 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_53.wav|lecs|[KO] 옛날에는 저희가 메인 프레임이라고 불렀던 어떤 고유의 영역이 기본적으로 저희가 하는 리눅스라는 OS가 들어가서 거의 머저리티로 세력을 잡고 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_54.wav|lecs|[KO] 저희가 하는 웨어러블, 그 다음에 저희 하는 스마트폰 이런 부분도 다 간다는 말씀을 드렸습니다.[KO]
./segmented_character_voice/lecs/lecs_4_55.wav|lecs|[KO] 그리고 조금 더 특이한 형태로 보면 항공기를 제어한다든지 우수전 쪽에도 들어가는 부분이라든지 이런 식으로 하는 굉장히 다양한 영역으로 가는 쪽에서도[KO]
./segmented_character_voice/lecs/lecs_4_56.wav|lecs|[KO] 리눅스의 지분이 계속 늘어나면서 리눅스가 전 세계에 있는 어떤 컴퓨터들이 머저리티를 덮고 있는 상태로 계속 확장 중이다.[KO]
./segmented_character_voice/lecs/lecs_4_57.wav|lecs|[KO] 그래서 저희가 컴퓨터 시스템 OS를 살펴보면서는 리눅스라고 하는 OS를 중심으로 해서 살펴보는 걸로 저희가 방향을 잡았습니다.[KO]
./segmented_character_voice/lecs/lecs_4_58.wav|lecs|[KO] 그래서 왜 그러냐? 리눅스 OS가 전체적으로 뭐지? 만방으로 현재 세력을 확산 중이다.[KO]
./segmented_character_voice/lecs/lecs_4_59.wav|lecs|[KO] 이유는 뭐냐면 어떤 단일한 OS를 가지고 확장성 있게 기존의 OS 기능들을 할 수 있도록 만들었을 수 있었다.[KO]
./segmented_character_voice/lecs/lecs_4_60.wav|lecs|[KO] 다시 어떤 식으로 말하면 컴퓨터 시스템이 발전하고 화학풀해지면서 어떤 리눅스라는 오픈소스 OS라고 하는 부분이 결국은 굉장히 다른 기능들을 포용하면서[KO]
./segmented_character_voice/lecs/lecs_4_61.wav|lecs|[KO] 추측화된 영역은 아니지만 일반적인 영역에서는 굉장히 사람들이 친숙하게 이해하고 확산할 수 있는 가치를 가졌다. 이렇게 말씀드리겠습니다.[KO]
./segmented_character_voice/lecs/lecs_4_62.wav|lecs|[KO] 그럼 이제 그 다음을 위해서 리눅스라는 쪽에서 아까 말씀드렸던 OS라는 얘기를 들었고 OS에서는 커널이라는 핵심 요소가 있다고 말씀을 드렸었기 때문에[KO]
./segmented_character_voice/lecs/lecs_4_63.wav|lecs|[KO] 이 부분에 대해서 어떤 핵심 요소로 나눠져서 현재 구성이 되느냐. 리눅스 커널이 어떤 요소들로 핵심적으로 나눠지는지를 살펴보는 다양한 접근방법이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_64.wav|lecs|[KO] 그런데 지금 저희가 보여드린 리눅스 커널 안에서 나오는 역할론이 몇 가지가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_65.wav|lecs|[KO] 그래서 어떤 기능이냐면 시스템을 관리하고 전체를 통제하는 어떤 그런 핵심적인 부분이 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_66.wav|lecs|[KO] 거기에서 네트워킹을 외부랑 대화해서 대화 이탈을 끌고 가져오고 주고받는 이 네트워킹을 담당하는 이런 커널 부분이 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_67.wav|lecs|[KO] 또 스토리지를 해서 데이터를 저희가 저장하고 저희가 디스크를 통해서 저장하고 세이브해서 다시 가져와서 데이터를 다시 볼 수 있게 만드는 저장 부분이 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_68.wav|lecs|[KO] 또 실제로 컴퓨터가 계산하기 위해서 메모리에 데이터를 쌓아놓고 계산하고 활용하고 다시 데이터를 바꿔서 임시로 처리할 때 작업을 할 때 쓰는 공간이 메모리 공간도 이 커널에서 담당을 해서 서포트를 하게 되고요.[KO]
./segmented_character_voice/lecs/lecs_4_69.wav|lecs|[KO] 이런 작업들을 하는 걸 프로세싱이라고 저희가 부르는데 CPU가 컴피션트럴 프로세싱 유닛이 프로세싱 작업을 하는데[KO]
./segmented_character_voice/lecs/lecs_4_70.wav|lecs|[KO] 프로세싱을 하는 일을 전체로 관리해서 차질 없이 여러 쪽의 어떤 사람들이 여러 가지 일들을 동시에 하고 싶을 때 차질 없이 만들어주는 이 프로세싱 부분도 동일하게 이 커널에서 담당하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_71.wav|lecs|[KO] 마지막으로 인터페이스 사람들이 이걸 편리하게 쓰고 저희가 키보드 마우스 이렇게 키보드 마우스 그다음에 비디오라고 화면을 보고 이런 모든 입출력 장치[KO]
./segmented_character_voice/lecs/lecs_4_72.wav|lecs|[KO] 그래서 휴먼 인터페이스라고 부릅니다. 휴먼 인터페이스 장치에 대해서 통제하는 부분도 리누스 커널에서 담당하고 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_73.wav|lecs|[KO] 그래서 이렇게 핵심적으로 어떤 컴퓨터 시스템이 갖고 있는 하드웨어 케이퍼빌리티를 사람들이 커먼하게 편리하게 쓸 수 있도록 하는 시스템 네트워킹 스토리지 메모리 프로세싱 휴먼 인터페이스[KO]
./segmented_character_voice/lecs/lecs_4_74.wav|lecs|[KO] 이런 부분을 커버하는 전체를 갖고 있는 게 리누스 커널의 역할이라고 보시면 되고요. 그럼 그 역할 중에서 조금 일부를 찾아봐야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_4_75.wav|lecs|[KO] 살펴보면서 하나씩 하나씩 내용의 어떤 일을 하고 있는지 조금 더 살펴봐야 됩니다.[KO]
./segmented_character_voice/lecs/lecs_4_76.wav|lecs|[KO] 그걸 가기 전에 잠깐 생각을 돌려서 컴퓨터 시스템의 부분에서 이걸 하는 모든 것들이 결국 어디서 도냐 하면 저희가 말씀드린 어떤 센트럴 프로세스 유닛이라고 하는[KO]
./segmented_character_voice/lecs/lecs_4_77.wav|lecs|[KO] 기본적으로 이 전체 컴퓨터로 등장하는 뭐죠? 두뇌라고 하는 거죠. 저희가 CPU라고 부르는 이 두뇌에서 돕니다.[KO]
./segmented_character_voice/lecs/lecs_4_78.wav|lecs|[KO] 그런데 두뇌를 돌리는 방식에서 구조적인 몇 가지 기술적인 진화가 있었습니다.[KO]
./segmented_character_voice/lecs/lecs_4_79.wav|lecs|[KO] 그래서 저희가 폰노이만 모델이라고 하는 부분이랑 그 다음에 하바드 모델이라고 하는 이런 어떤 모델 1인데 이 모델이 조금씩 다른 접근방법을 썼습니다.[KO]
./segmented_character_voice/lecs/lecs_4_80.wav|lecs|[KO] 접근방법에서 혁신적인 접근방법의 차이는 저희가 폰노이만 모델이라고 하는 쪽에서는 실제로 많이 쓰이는 저희가 일반적인 컴퓨터에서 많이 쓰는 방식입니다.[KO]
./segmented_character_voice/lecs/lecs_4_81.wav|lecs|[KO] 어떻게 되냐면 어떤 CPU가 일을 하면서 내가 지금 자기가 일을 하는 데이터랑 지금 일을 하기 위해서 지금 하는 프로그램 코드를 갖다가 그냥 CPU랑 메모리를 통해서 그냥 같이 섞어서 주거받고[KO]
./segmented_character_voice/lecs/lecs_4_82.wav|lecs|[KO] 한 번에 주거받으면서 일을 하는 방식 이렇게 하는 것들이 저희가 폰노이만 방식으로 구현되는 어떤 동작되는 CPU 이렇게 부를 수 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_83.wav|lecs|[KO] 조금 다른 모델이 하나 있습니다. 다른 모델은 어떻게 하냐면 실제로 CPU가 돌려야 되는 어떤 프로그램 데이터를 주거받는 어떤 부분을 따로 만들어 놓고[KO]
./segmented_character_voice/lecs/lecs_4_84.wav|lecs|[KO] 그 다음에 데이터가 주거받는 부분을 메모리를 분리를 한 다음에 그러니까 두 개가 섞이지 않던 상태로 따로따로 하면서 다시 저희가 IO를 상대하는[KO]
./segmented_character_voice/lecs/lecs_4_85.wav|lecs|[KO] 그러면 약간 기술적으로 보면 폰노이만의 방식은 단순하게 해서 싸게 만들 수 있지만 어떤 부분에서는 이 두 분 사이에서 약간 프로그램 부분하고 데이터가 자꾸 얽히는 부분이 조금 있을 수가 있고요.[KO]
./segmented_character_voice/lecs/lecs_4_86.wav|lecs|[KO] 그런 부분에서 오버헤드를 가지게 됩니다. 반대로 하바드 쪽에서는 이 부분을 얽히지 않게 만들었기 때문에 기본적으로 학창성은 있지만 대신 비용이나 어떤 다른 부분에서 복잡성이 올라가는 이런 식으로 트레이드 오프가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_87.wav|lecs|[KO] 그런 것들을 깔고 있는 어떤 구전 CPU가 동작하는 기본원리 그러니까 저희가 마이크로 컨트롤러 아키텍처라고 하는 기본원리.[KO]
./segmented_character_voice/lecs/lecs_4_88.wav|lecs|[KO] 아까 말씀하신 커널의 기본원리 부분이 숨어있는 거기에 한 주제가 있습니다.[KO]
./segmented_character_voice/lecs/lecs_4_89.wav|lecs|[KO] 그것을 잠깐 짚어봤고요.[KO]
